#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API endpoint –¥–ª—è –º–µ—Ç—Ä–∏–∫
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–º–ø–∏–ª—è—Ü–∏—é –∏ –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */

async function testMetricsApiSimple() {
  console.log('üß™ –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint –¥–ª—è –º–µ—Ç—Ä–∏–∫\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª API —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    console.log('üìÅ 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è API —Ñ–∞–π–ª–∞');
    
    const fs = require('fs');
    const path = require('path');
    
    const apiPath = path.join(process.cwd(), 'app/api/queue/metrics/route.ts');
    
    if (fs.existsSync(apiPath)) {
      console.log('‚úÖ API —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: app/api/queue/metrics/route.ts');
      
      const content = fs.readFileSync(apiPath, 'utf8');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
      const checks = [
        { name: 'GET handler', pattern: /export async function GET/ },
        { name: 'POST handler', pattern: /export async function POST/ },
        { name: 'metricsCollector import', pattern: /metricsCollector/ },
        { name: 'NextRequest import', pattern: /NextRequest/ },
        { name: 'NextResponse import', pattern: /NextResponse/ },
        { name: 'Error handling', pattern: /catch.*error/ },
        { name: 'Parameter validation', pattern: /period.*limit/ },
        { name: 'Metrics by type', pattern: /getMetricsByType/ },
        { name: 'Performance metrics', pattern: /getPerformanceMetrics/ },
        { name: 'Cleanup functionality', pattern: /cleanupExpiredMetrics/ }
      ];
      
      console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ API:');
      checks.forEach(check => {
        if (check.pattern.test(content)) {
          console.log(`   ‚úÖ ${check.name}`);
        } else {
          console.log(`   ‚ùå ${check.name}`);
        }
      });
      
    } else {
      console.log('‚ùå API —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return { success: false, message: 'API —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' };
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ API
    console.log('\nüìä 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ API');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—É—é –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å API
    const expectedResponse = {
      success: true,
      data: {
        period: '24h',
        summary: {
          averageProcessingTime: 0,
          throughputPerMinute: 0,
          errorRate: 0,
          failedJobsCount: 0,
          activeWorkersCount: 0
        },
        queues: {
          waiting: 0,
          active: 0,
          completed: 0,
          failed: 0
        },
        recentMetrics: {
          processingTime: { count: 0, latest: [] },
          throughput: { count: 0, latest: [] },
          errors: { count: 0, latest: [] }
        },
        periodInfo: {
          start: new Date(),
          end: new Date(),
          duration: '24 hours'
        }
      },
      timestamp: new Date().toISOString()
    };
    
    console.log('‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:');
    console.log('   - success: boolean');
    console.log('   - data.period: string');
    console.log('   - data.summary: –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
    console.log('   - data.queues: —Ä–∞–∑–º–µ—Ä—ã –æ—á–µ—Ä–µ–¥–µ–π');
    console.log('   - data.recentMetrics: –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º');
    console.log('   - data.periodInfo: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–∏–æ–¥–µ');
    console.log('   - timestamp: ISO —Å—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏');

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    console.log('\n‚öôÔ∏è 3. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã API');
    
    const supportedParams = [
      { name: 'period', description: '–ü–µ—Ä–∏–æ–¥ –≤ —á–∞—Å–∞—Ö (1-168)', example: '?period=24' },
      { name: 'type', description: '–¢–∏–ø –º–µ—Ç—Ä–∏–∫–∏', example: '?type=processing_time' },
      { name: 'limit', description: '–õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π (1-1000)', example: '?limit=100' },
      { name: 'action', description: '–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è POST', example: '?action=cleanup' }
    ];
    
    supportedParams.forEach(param => {
      console.log(`   ‚úÖ ${param.name}: ${param.description}`);
      console.log(`      –ü—Ä–∏–º–µ—Ä: ${param.example}`);
    });

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –º–µ—Ç—Ä–∏–∫
    console.log('\nüìà 4. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –º–µ—Ç—Ä–∏–∫');
    
    const metricTypes = [
      'processing_time - –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á',
      'throughput - –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å',
      'error - –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
      'custom - –∫–∞—Å—Ç–æ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏'
    ];
    
    metricTypes.forEach(type => {
      console.log(`   ‚úÖ ${type}`);
    });

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã HTTP
    console.log('\nüåê 5. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ HTTP –º–µ—Ç–æ–¥—ã');
    
    console.log('   ‚úÖ GET /api/queue/metrics - –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫');
    console.log('   ‚úÖ POST /api/queue/metrics?action=cleanup - –æ—á–∏—Å—Ç–∫–∞ –º–µ—Ç—Ä–∏–∫');

    console.log('\nüéâ –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    
    console.log('\nüí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:');
    console.log('   npm run dev');
    console.log('   node scripts/test-metrics-api.js');
    
    return {
      success: true,
      message: 'API endpoint –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
    };

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:', error.message);
    
    return {
      success: false,
      error: error.message,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API'
    };
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  testMetricsApiSimple()
    .then(result => {
      if (result.success) {
        console.log('\n‚úÖ –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        process.exit(0);
      } else {
        console.log('\n‚ùå –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏');
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { testMetricsApiSimple };