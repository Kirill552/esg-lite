const fs = require('fs');
const path = require('path');

console.log('üî¨ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á–∏ 7.1...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
const creditsPagePath = path.join(__dirname, '..', 'app', 'credits', 'page.tsx');
const headerPath = path.join(__dirname, '..', 'components', 'common', 'Header.tsx');
const creditsDisplayPath = path.join(__dirname, '..', 'components', 'credits', 'CreditsDisplay.tsx');

let score = 0;
const maxScore = 15;

console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:');

// 1. –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
if (fs.existsSync(creditsPagePath)) {
  console.log('‚úÖ app/credits/page.tsx —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
  score += 3;
  
  const content = fs.readFileSync(creditsPagePath, 'utf-8');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  if (content.includes('data-testid="credits-page"')) {
    console.log('‚úÖ –ï—Å—Ç—å data-testid –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    score += 1;
  }
  
  if (content.includes('useMemo')) {
    console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç useMemo –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏');
    score += 1;
  }
  
  if (content.includes('balance_t_co2')) {
    console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Credits API');
    score += 1;
  }
  
  if (content.includes('transaction_type')) {
    console.log('‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    score += 1;
  }
  
  if (content.includes('pagination')) {
    console.log('‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏');
    score += 1;
  }
  
} else {
  console.log('‚ùå app/credits/page.tsx –ù–ï –Ω–∞–π–¥–µ–Ω');
}

// 2. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤
if (fs.existsSync(creditsDisplayPath)) {
  console.log('‚úÖ components/credits/CreditsDisplay.tsx —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
  score += 2;
} else {
  console.log('‚ùå CreditsDisplay –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ù–ï –Ω–∞–π–¥–µ–Ω');
}

// 3. –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
if (fs.existsSync(headerPath)) {
  const headerContent = fs.readFileSync(headerPath, 'utf-8');
  if (headerContent.includes('–ö—Ä–µ–¥–∏—Ç—ã') || headerContent.includes('/credits')) {
    console.log('‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (—Å—Å—ã–ª–∫–∞ –Ω–∞ –∫—Ä–µ–¥–∏—Ç—ã)');
    score += 2;
  } else {
    console.log('‚ùå –ù–∞–≤–∏–≥–∞—Ü–∏—è –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
  }
} else {
  console.log('‚ùå Header –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ù–ï –Ω–∞–π–¥–µ–Ω');
}

// 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω
if (fs.existsSync(creditsPagePath)) {
  const content = fs.readFileSync(creditsPagePath, 'utf-8');
  
  if (content.includes('emerald') && content.includes('rounded-xl')) {
    console.log('‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω 2025 (emerald + rounded-xl)');
    score += 2;
  }
  
  if (content.includes('responsive') || content.includes('md:') || content.includes('lg:')) {
    console.log('‚úÖ Responsive –¥–∏–∑–∞–π–Ω');
    score += 1;
  }
}

console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${score}/${maxScore} –±–∞–ª–ª–æ–≤`);

if (score >= 13) {
  console.log('üéâ –û–¢–õ–ò–ß–ù–û! –ó–∞–¥–∞—á–∞ 7.1 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ 100%');
  console.log('‚úÖ –ì–æ—Ç–æ–≤—ã –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ –∑–∞–¥–∞—á—É 7.2 "–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞–º–∏"');
} else if (score >= 10) {
  console.log('üëç –•–û–†–û–®–û! –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
  console.log('‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ–ª–∫–∏—Ö –Ω–µ–¥–æ—á–µ—Ç–æ–≤ –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
} else {
  console.log('‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
}

console.log('\nüåê –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:3000/credits');
console.log('üîß –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ TypeScript - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ VS Code Language Server');

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
console.log('\nüìÇ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã:');
const testFiles = [
  'scripts/test-credits-page.js',
  'docs/TASK-7.1-CREDITS-MANAGEMENT-PAGE.md'
];

testFiles.forEach(file => {
  const filePath = path.join(__dirname, '..', file);
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
  } else {
    console.log(`‚ö†Ô∏è ${file} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
  }
});
