#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç API endpoint –¥–ª—è –º–µ—Ç—Ä–∏–∫ –æ—á–µ—Ä–µ–¥–µ–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç GET /api/queue/metrics —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 */

async function testMetricsApi() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint –¥–ª—è –º–µ—Ç—Ä–∏–∫ –æ—á–µ—Ä–µ–¥–µ–π\n');

  const baseUrl = 'http://localhost:3000';

  try {
    // 1. –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
    console.log('üìä 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫');
    
    const response1 = await fetch(`${baseUrl}/api/queue/metrics`);
    
    if (response1.ok) {
      const data1 = await response1.json();
      console.log('‚úÖ –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      console.log(`   –ü–µ—Ä–∏–æ–¥: ${data1.data.period}`);
      console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${data1.data.summary.averageProcessingTime}ms`);
      console.log(`   Throughput: ${data1.data.summary.throughputPerMinute} –∑–∞–¥–∞—á/–º–∏–Ω`);
      console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: ${data1.data.summary.errorRate}%`);
      console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤: ${data1.data.summary.activeWorkersCount}`);
      console.log('   –†–∞–∑–º–µ—Ä—ã –æ—á–µ—Ä–µ–¥–µ–π:');
      console.log(`     –û–∂–∏–¥–∞—é—â–∏–µ: ${data1.data.queues.waiting}`);
      console.log(`     –ê–∫—Ç–∏–≤–Ω—ã–µ: ${data1.data.queues.active}`);
      console.log(`     –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ: ${data1.data.queues.completed}`);
      console.log(`     –ù–µ—É–¥–∞—á–Ω—ã–µ: ${data1.data.queues.failed}`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫: ${response1.status}`);
      const error1 = await response1.text();
      console.log(`   –î–µ—Ç–∞–ª–∏: ${error1}`);
    }

    // 2. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    console.log('\nüìà 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏');
    
    const response2 = await fetch(`${baseUrl}/api/queue/metrics?period=12&limit=50`);
    
    if (response2.ok) {
      const data2 = await response2.json();
      console.log('‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      console.log(`   –ü–µ—Ä–∏–æ–¥: ${data2.data.period}`);
      console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${data2.data.recentMetrics.processingTime.count}`);
      console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ throughput: ${data2.data.recentMetrics.throughput.count}`);
      console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏: ${data2.data.recentMetrics.errors.count}`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: ${response2.status}`);
    }

    // 3. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø–æ —Ç–∏–ø—É
    console.log('\nüîç 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø–æ —Ç–∏–ø—É');
    
    const response3 = await fetch(`${baseUrl}/api/queue/metrics?type=processing_time&limit=10`);
    
    if (response3.ok) {
      const data3 = await response3.json();
      console.log('‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ç–∏–ø—É –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      console.log(`   –¢–∏–ø: ${data3.data.type}`);
      console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${data3.data.count}`);
      
      if (data3.data.metrics.length > 0) {
        console.log('   –ü—Ä–∏–º–µ—Ä—ã –º–µ—Ç—Ä–∏–∫:');
        data3.data.metrics.slice(0, 3).forEach((metric, index) => {
          console.log(`     ${index + 1}. –ó–Ω–∞—á–µ–Ω–∏–µ: ${metric.value}ms, –í—Ä–µ–º—è: ${new Date(metric.timestamp).toLocaleString()}`);
        });
      }
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø–æ —Ç–∏–ø—É: ${response3.status}`);
    }

    // 4. –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    console.log('\n‚ö†Ô∏è 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
    
    // –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    const response4 = await fetch(`${baseUrl}/api/queue/metrics?period=200`);
    if (!response4.ok) {
      const error4 = await response4.json();
      console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log(`   –û—à–∏–±–∫–∞: ${error4.error}`);
    }

    // –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –º–µ—Ç—Ä–∏–∫–∏
    const response5 = await fetch(`${baseUrl}/api/queue/metrics?type=invalid_type`);
    if (!response5.ok) {
      const error5 = await response5.json();
      console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log(`   –û—à–∏–±–∫–∞: ${error5.error}`);
    }

    // –ù–µ–≤–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç
    const response6 = await fetch(`${baseUrl}/api/queue/metrics?limit=2000`);
    if (!response6.ok) {
      const error6 = await response6.json();
      console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–∏–º–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log(`   –û—à–∏–±–∫–∞: ${error6.error}`);
    }

    // 5. –¢–µ—Å—Ç POST cleanup
    console.log('\nüßπ 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –º–µ—Ç—Ä–∏–∫');
    
    const response7 = await fetch(`${baseUrl}/api/queue/metrics?action=cleanup`, {
      method: 'POST'
    });
    
    if (response7.ok) {
      const data7 = await response7.json();
      console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –º–µ—Ç—Ä–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${data7.message}`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –º–µ—Ç—Ä–∏–∫: ${response7.status}`);
    }

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã API –º–µ—Ç—Ä–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
    
    return {
      success: true,
      message: 'API endpoint –¥–ª—è –º–µ—Ç—Ä–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
    };

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API –º–µ—Ç—Ä–∏–∫:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run dev');
    }
    
    return {
      success: false,
      error: error.message,
      message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API'
    };
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  testMetricsApi()
    .then(result => {
      if (result.success) {
        console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        process.exit(0);
      } else {
        console.log('\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏');
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { testMetricsApi };