/**
 * –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ POST /api/ocr —Å –æ—á–µ—Ä–µ–¥—è–º–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–¥–∞—á—É 6.1: –≤–æ–∑–≤—Ä–∞—Ç jobId –≤–º–µ—Å—Ç–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
 */

require('dotenv').config();

async function testOcrApiQueued() {
  console.log('üîß –¢–µ—Å—Ç POST /api/ocr —Å –æ—á–µ—Ä–µ–¥—è–º–∏ (–∑–∞–¥–∞—á–∞ 6.1)...');
  
  try {
    // –¢–µ—Å—Ç 1: –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
    console.log('\nüìã –¢–µ—Å—Ç 1: –£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å...');
    
    function simulateOcrPostQueued(documentId, userId, orgId, hasCredits = true, isSurgePeriod = false) {
      console.log(`üîç OCR POST request: { documentId: ${documentId}, userId: ${userId}, orgId: ${orgId} }`);
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º surge-pricing
      const surgeMultiplier = isSurgePeriod ? 2 : 1;
      const creditsRequired = Math.ceil(1 * surgeMultiplier);
      
      console.log(`üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤: —Ç—Ä–µ–±—É–µ—Ç—Å—è ${creditsRequired} –∫—Ä–µ–¥–∏—Ç–æ–≤ (surge: ${isSurgePeriod})`);
      
      if (!hasCredits) {
        return {
          status: 402,
          response: {
            success: false,
            error: 'Insufficient credits',
            code: 'INSUFFICIENT_CREDITS',
            details: {
              required: creditsRequired,
              isSurgePeriod,
              surgeMultiplier,
              message: isSurgePeriod 
                ? `–¢—Ä–µ–±—É–µ—Ç—Å—è ${creditsRequired} –∫—Ä–µ–¥–∏—Ç–æ–≤ (surge-–ø–µ—Ä–∏–æ–¥ x${surgeMultiplier})`
                : `–¢—Ä–µ–±—É–µ—Ç—Å—è ${creditsRequired} –∫—Ä–µ–¥–∏—Ç–æ–≤`
            }
          }
        };
      }
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
      const jobId = `job-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
      const priority = isSurgePeriod ? 'high' : 'normal';
      const queuePosition = Math.floor(Math.random() * 5) + 1;
      
      console.log(`‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: jobId=${jobId}, priority=${priority}`);
      
      return {
        status: 200,
        response: {
          success: true,
          data: {
            documentId,
            jobId,
            status: 'queued',
            priority,
            message: `Document queued for OCR processing with ${priority} priority`,
            estimatedProcessingTime: priority === 'high' ? '1-2 minutes' : '2-5 minutes',
            queuePosition,
            billing: {
              creditsRequired,
              isSurgePeriod,
              surgeMultiplier,
              costInfo: isSurgePeriod 
                ? `Surge-–ø–µ—Ä–∏–æ–¥: ${creditsRequired} –∫—Ä–µ–¥–∏—Ç–æ–≤ (x${surgeMultiplier})`
                : `–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${creditsRequired} –∫—Ä–µ–¥–∏—Ç`
            }
          }
        }
      };
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    const normalResult = simulateOcrPostQueued('doc-123', 'user1', 'org1', true, false);
    console.log('  –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥:', {
      status: normalResult.status,
      jobId: normalResult.response.data?.jobId?.substring(0, 20) + '...',
      priority: normalResult.response.data?.priority,
      creditsRequired: normalResult.response.data?.billing?.creditsRequired
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º surge-–ø–µ—Ä–∏–æ–¥
    const surgeResult = simulateOcrPostQueued('doc-456', 'user2', 'org2', true, true);
    console.log('  Surge-–ø–µ—Ä–∏–æ–¥:', {
      status: surgeResult.status,
      jobId: surgeResult.response.data?.jobId?.substring(0, 20) + '...',
      priority: surgeResult.response.data?.priority,
      creditsRequired: surgeResult.response.data?.billing?.creditsRequired,
      surgeMultiplier: surgeResult.response.data?.billing?.surgeMultiplier
    });
    
    // –¢–µ—Å—Ç 2: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ–≤
    console.log('\nüìã –¢–µ—Å—Ç 2: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ–≤...');
    
    const noCreditsResult = simulateOcrPostQueued('doc-789', 'user3', 'org3', false, false);
    console.log('  –†–µ–∑—É–ª—å—Ç–∞—Ç:', {
      status: noCreditsResult.status,
      error: noCreditsResult.response.error,
      code: noCreditsResult.response.code,
      required: noCreditsResult.response.details?.required
    });
    
    // –¢–µ—Å—Ç 3: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ–≤ –≤ surge-–ø–µ—Ä–∏–æ–¥
    console.log('\nüìã –¢–µ—Å—Ç 3: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ–≤ –≤ surge-–ø–µ—Ä–∏–æ–¥...');
    
    const noCreditsUrgeResult = simulateOcrPostQueued('doc-101', 'user4', 'org4', false, true);
    console.log('  –†–µ–∑—É–ª—å—Ç–∞—Ç:', {
      status: noCreditsUrgeResult.status,
      error: noCreditsUrgeResult.response.error,
      code: noCreditsUrgeResult.response.code,
      required: noCreditsUrgeResult.response.details?.required,
      message: noCreditsUrgeResult.response.details?.message
    });
    
    // –¢–µ—Å—Ç 4: –°–∏–º—É–ª—è—Ü–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ (–¥–æ–∫—É–º–µ–Ω—Ç —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è)
    console.log('\nüìã –¢–µ—Å—Ç 4: –ö–æ–Ω—Ñ–ª–∏–∫—Ç - –¥–æ–∫—É–º–µ–Ω—Ç —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...');
    
    function simulateConflict(documentId) {
      console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${documentId}`);
      
      return {
        status: 409,
        response: {
          success: false,
          error: 'Document is already being processed',
          data: {
            documentId,
            status: 'processing',
            jobId: 'existing-job-123',
            progress: 45
          }
        }
      };
    }
    
    const conflictResult = simulateConflict('doc-processing');
    console.log('  –†–µ–∑—É–ª—å—Ç–∞—Ç:', {
      status: conflictResult.status,
      error: conflictResult.response.error,
      existingJobId: conflictResult.response.data?.jobId,
      progress: conflictResult.response.data?.progress
    });
    
    // –¢–µ—Å—Ç 5: –°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–æ–∫ –æ—á–µ—Ä–µ–¥–∏
    console.log('\nüìã –¢–µ—Å—Ç 5: –û—à–∏–±–∫–∏ –æ—á–µ—Ä–µ–¥–∏...');
    
    function simulateQueueError(errorType) {
      console.log(`üîç –°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–∫–∏ –æ—á–µ—Ä–µ–¥–∏: ${errorType}`);
      
      let statusCode, errorCode, message;
      
      switch (errorType) {
        case 'unavailable':
          statusCode = 503;
          errorCode = 'QUEUE_UNAVAILABLE';
          message = 'Queue service temporarily unavailable';
          break;
        case 'full':
          statusCode = 429;
          errorCode = 'QUEUE_FULL';
          message = 'Queue capacity exceeded';
          break;
        default:
          statusCode = 500;
          errorCode = 'QUEUE_ERROR';
          message = 'Internal queue error';
      }
      
      return {
        status: statusCode,
        response: {
          success: false,
          error: 'Failed to queue OCR job',
          code: errorCode,
          details: message,
          retryable: true,
          retryAfter: statusCode === 503 ? 30 : 60
        }
      };
    }
    
    const queueErrors = ['unavailable', 'full', 'internal'];
    queueErrors.forEach(errorType => {
      const errorResult = simulateQueueError(errorType);
      console.log(`  ${errorType}:`, {
        status: errorResult.status,
        code: errorResult.response.code,
        retryAfter: errorResult.response.retryAfter
      });
    });
    
    // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–¥–∞—á–∏ 6.1
    console.log('\nüìã –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∑–∞–¥–∞—á–∏ 6.1...');
    
    const testResult = simulateOcrPostQueued('doc-test', 'user-test', 'org-test', true, false);
    const data = testResult.response.data;
    
    console.log('‚úÖ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ 6.1:');
    console.log(`  ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç jobId: ${data.jobId ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`  ‚úÖ –°—Ç–∞—Ç—É—Å 'queued': ${data.status === 'queued' ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`  ‚úÖ –ù–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${!data.ocrText ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`  ‚úÖ –ï—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ: ${data.priority ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`  ‚úÖ –ï—Å—Ç—å –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${data.estimatedProcessingTime ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`  ‚úÖ –ï—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: ${data.queuePosition !== undefined ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`  ‚úÖ –ï—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–ª–∏–Ω–≥–µ: ${data.billing ? '–î–ê' : '–ù–ï–¢'}`);
    
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã POST /api/ocr —Å –æ—á–µ—Ä–µ–¥—è–º–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    console.log('‚úÖ –ó–∞–¥–∞—á–∞ 6.1 —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞: —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ –æ—á–µ—Ä–µ–¥–∏');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testOcrApiQueued()
  .then(() => {
    console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST /api/ocr —Å –æ—á–µ—Ä–µ–¥—è–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    process.exit(1);
  });