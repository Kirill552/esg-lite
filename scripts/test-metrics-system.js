#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫ –æ—á–µ—Ä–µ–¥–µ–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–±–æ—Ä –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */

// –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –º–µ—Ç—Ä–∏–∫
// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ lib/metrics.ts

// –°–∏–º—É–ª—è—Ü–∏—è MetricsCollector –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const metricsCollector = {
  async recordProcessingTime(jobId, processingTimeMs) {
    console.log(`üìä [–°–ò–ú–£–õ–Ø–¶–ò–Ø] –ó–∞–ø–∏—Å–∞–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${processingTimeMs}ms –¥–ª—è –∑–∞–¥–∞—á–∏ ${jobId}`);
    return Promise.resolve();
  },

  async recordThroughput(jobsCompleted, timeWindowMinutes) {
    const throughputPerMinute = jobsCompleted / timeWindowMinutes;
    console.log(`üìà [–°–ò–ú–£–õ–Ø–¶–ò–Ø] –ó–∞–ø–∏—Å–∞–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞ throughput: ${throughputPerMinute.toFixed(2)} –∑–∞–¥–∞—á/–º–∏–Ω`);
    return Promise.resolve();
  },

  async recordError(jobId, errorType, errorMessage) {
    console.log(`‚ùå [–°–ò–ú–£–õ–Ø–¶–ò–Ø] –ó–∞–ø–∏—Å–∞–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞ –æ—à–∏–±–∫–∏: ${errorType} –¥–ª—è –∑–∞–¥–∞—á–∏ ${jobId}`);
    return Promise.resolve();
  },

  async getPerformanceMetrics(periodHours) {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    return {
      averageProcessingTime: Math.random() * 2000 + 500, // 500-2500ms
      throughputPerMinute: Math.random() * 10 + 5, // 5-15 –∑–∞–¥–∞—á/–º–∏–Ω
      errorRate: Math.random() * 5, // 0-5%
      failedJobsCount: Math.floor(Math.random() * 10),
      activeWorkersCount: Math.floor(Math.random() * 5) + 1,
      queueSizes: {
        waiting: Math.floor(Math.random() * 20),
        active: Math.floor(Math.random() * 10),
        completed: Math.floor(Math.random() * 100) + 50,
        failed: Math.floor(Math.random() * 5)
      },
      timestamp: new Date(),
      periodStart: new Date(Date.now() - periodHours * 60 * 60 * 1000),
      periodEnd: new Date()
    };
  },

  async getMetricsByType(metricType, periodHours, limit) {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ç–∏–ø—É
    const metrics = [];
    const count = Math.min(limit, Math.floor(Math.random() * 10) + 1);
    
    for (let i = 0; i < count; i++) {
      metrics.push({
        id: `${metricType}_${Date.now()}_${i}`,
        metric_type: metricType,
        metric_value: Math.random() * 3000 + 500,
        metadata: { test: true },
        timestamp: new Date(Date.now() - Math.random() * periodHours * 60 * 60 * 1000),
        expires_at: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)
      });
    }
    
    return metrics;
  },

  async recordCustomMetric(metricType, value, metadata) {
    console.log(`üéØ [–°–ò–ú–£–õ–Ø–¶–ò–Ø] –ó–∞–ø–∏—Å–∞–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞: ${metricType} = ${value}`);
    return Promise.resolve();
  },

  async cleanupExpiredMetrics() {
    const deletedCount = Math.floor(Math.random() * 20);
    console.log(`üßπ [–°–ò–ú–£–õ–Ø–¶–ò–Ø] –û—á–∏—â–µ–Ω–æ ${deletedCount} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –º–µ—Ç—Ä–∏–∫`);
    return Promise.resolve();
  }
};

async function testMetricsSystem() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫ –æ—á–µ—Ä–µ–¥–µ–π\n');

  try {
    // 1. –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    console.log('üìä 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
    
    const testJobId = `test-job-${Date.now()}`;
    const processingTime = 1500; // 1.5 —Å–µ–∫—É–Ω–¥—ã
    
    await metricsCollector.recordProcessingTime(testJobId, processingTime);
    console.log(`‚úÖ –ó–∞–ø–∏—Å–∞–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${processingTime}ms –¥–ª—è –∑–∞–¥–∞—á–∏ ${testJobId}`);

    // 2. –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ throughput
    console.log('\nüìà 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ throughput');
    
    const jobsCompleted = 10;
    const timeWindow = 5; // 5 –º–∏–Ω—É—Ç
    
    await metricsCollector.recordThroughput(jobsCompleted, timeWindow);
    console.log(`‚úÖ –ó–∞–ø–∏—Å–∞–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞ throughput: ${jobsCompleted} –∑–∞–¥–∞—á –∑–∞ ${timeWindow} –º–∏–Ω—É—Ç`);

    // 3. –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –æ—à–∏–±–æ–∫
    console.log('\n‚ùå 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—à–∏–±–æ–∫');
    
    const errorJobId = `error-job-${Date.now()}`;
    const errorType = 'OCR_PROCESSING_ERROR';
    const errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª';
    
    await metricsCollector.recordError(errorJobId, errorType, errorMessage);
    console.log(`‚úÖ –ó–∞–ø–∏—Å–∞–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞ –æ—à–∏–±–∫–∏: ${errorType} –¥–ª—è –∑–∞–¥–∞—á–∏ ${errorJobId}`);

    // 4. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    console.log('\nüìä 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
    
    const metrics = await metricsCollector.getPerformanceMetrics(24);
    console.log('‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω—ã:');
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${metrics.averageProcessingTime}ms`);
    console.log(`   Throughput: ${metrics.throughputPerMinute} –∑–∞–¥–∞—á/–º–∏–Ω`);
    console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: ${metrics.errorRate.toFixed(2)}%`);
    console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á: ${metrics.failedJobsCount}`);
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤: ${metrics.activeWorkersCount}`);
    console.log('   –†–∞–∑–º–µ—Ä—ã –æ—á–µ—Ä–µ–¥–µ–π:');
    console.log(`     –û–∂–∏–¥–∞—é—â–∏–µ: ${metrics.queueSizes.waiting}`);
    console.log(`     –ê–∫—Ç–∏–≤–Ω—ã–µ: ${metrics.queueSizes.active}`);
    console.log(`     –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ: ${metrics.queueSizes.completed}`);
    console.log(`     –ù–µ—É–¥–∞—á–Ω—ã–µ: ${metrics.queueSizes.failed}`);

    // 5. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø–æ —Ç–∏–ø—É
    console.log('\nüîç 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø–æ —Ç–∏–ø—É');
    
    const processingTimeMetrics = await metricsCollector.getMetricsByType('processing_time', 24, 5);
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${processingTimeMetrics.length} –º–µ—Ç—Ä–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
    
    processingTimeMetrics.forEach((metric, index) => {
      console.log(`   ${index + 1}. ID: ${metric.id}, –ó–Ω–∞—á–µ–Ω–∏–µ: ${metric.metric_value}ms, –í—Ä–µ–º—è: ${metric.timestamp}`);
    });

    // 6. –¢–µ—Å—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    console.log('\nüéØ 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫');
    
    await metricsCollector.recordCustomMetric('queue_size', 25, { queueName: 'ocr-processing' });
    console.log('‚úÖ –ó–∞–ø–∏—Å–∞–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏');

    await metricsCollector.recordCustomMetric('worker_memory_usage', 512, { workerId: 'worker-1', unit: 'MB' });
    console.log('‚úÖ –ó–∞–ø–∏—Å–∞–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –≤–æ—Ä–∫–µ—Ä–∞');

    // 7. –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –º–µ—Ç—Ä–∏–∫
    console.log('\nüßπ 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –º–µ—Ç—Ä–∏–∫');
    
    await metricsCollector.cleanupExpiredMetrics();
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –º–µ—Ç—Ä–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');

    // 8. –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
    console.log('\n‚ö° 8. –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏');
    
    console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫...');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    for (let i = 0; i < 5; i++) {
      const jobId = `load-test-job-${i}`;
      const processingTime = Math.random() * 3000 + 500; // 500-3500ms
      
      await metricsCollector.recordProcessingTime(jobId, processingTime);
      
      // –ò–Ω–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏
      if (Math.random() < 0.2) {
        await metricsCollector.recordError(jobId, 'RANDOM_ERROR', '–°–ª—É—á–∞–π–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      }
      
      console.log(`   –ó–∞–¥–∞—á–∞ ${jobId}: ${processingTime.toFixed(0)}ms`);
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    const updatedMetrics = await metricsCollector.getPerformanceMetrics(1);
    console.log('\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å–ª–µ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:');
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${updatedMetrics.averageProcessingTime.toFixed(0)}ms`);
    console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: ${updatedMetrics.errorRate.toFixed(2)}%`);
    console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á: ${updatedMetrics.failedJobsCount}`);

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    
    return {
      success: true,
      metrics: updatedMetrics,
      message: '–°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
    };

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫:', error);
    
    return {
      success: false,
      error: error.message,
      message: '–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –º–µ—Ç—Ä–∏–∫'
    };
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  testMetricsSystem()
    .then(result => {
      if (result.success) {
        console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        process.exit(0);
      } else {
        console.log('\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏');
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { testMetricsSystem };