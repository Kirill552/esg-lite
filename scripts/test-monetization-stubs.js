/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–µ–∫ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
 * –ó–∞–¥–∞—á–∞ 9.1: –°–æ–∑–¥–∞—Ç—å –∑–∞–≥–ª—É—à–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: 2.1, 2.2
 */

require('dotenv').config();

async function testMonetizationStubs() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–µ–∫ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ (–∑–∞–¥–∞—á–∞ 9.1)...');
  
  try {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –∑–∞–≥–ª—É—à–µ–∫ –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏)
    console.log('üìù –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∑–∞–≥–ª—É—à–µ–∫ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏...');
    
    // –¢–µ—Å—Ç 1: Credits Service –∑–∞–≥–ª—É—à–∫–∏
    console.log('\nüìã –¢–µ—Å—Ç 1: Credits Service –∑–∞–≥–ª—É—à–∫–∏...');
    
    const testOrgId = 'org-test-123';
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É Credits Service
    const mockCreditsService = {
      async checkBalance(orgId) {
        return { organizationId: orgId, balance: 1000, lastUpdated: new Date() };
      },
      async hasCredits(orgId, amount) {
        return true; // –ó–∞–≥–ª—É—à–∫–∞: –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤
      },
      async debitCredits(orgId, amount, desc) {
        return {
          success: true,
          newBalance: 990,
          transactionId: `tx_${Date.now()}_abc123`
        };
      },
      async creditBalance(orgId, amount, desc) {
        return {
          success: true,
          newBalance: 1050,
          transactionId: `tx_${Date.now()}_def456`
        };
      },
      async getOperationCost(type, multiplier = 1) {
        const costs = { ocr: 1, report_generation: 5, api_call: 0.1 };
        return Math.ceil((costs[type] || 1) * multiplier);
      }
    };
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    const balance = await mockCreditsService.checkBalance(testOrgId);
    console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ${testOrgId}: ${balance.balance} –∫—Ä–µ–¥–∏—Ç–æ–≤`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤
    const hasCredits = await mockCreditsService.hasCredits(testOrgId, 5);
    console.log(`‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ (5): ${hasCredits}`);
    
    // –°–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤
    const debitResult = await mockCreditsService.debitCredits(testOrgId, 10, 'Test OCR processing');
    console.log(`‚úÖ –°–ø–∏—Å–∞–Ω–∏–µ 10 –∫—Ä–µ–¥–∏—Ç–æ–≤: —É—Å–ø–µ—Ö=${debitResult.success}, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å=${debitResult.newBalance}, ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏=${debitResult.transactionId}`);
    
    // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    const creditResult = await mockCreditsService.creditBalance(testOrgId, 50, 'Test balance top-up');
    console.log(`‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ 50 –∫—Ä–µ–¥–∏—Ç–æ–≤: —É—Å–ø–µ—Ö=${creditResult.success}, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å=${creditResult.newBalance}`);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    const ocrCost = await mockCreditsService.getOperationCost('ocr');
    const reportCost = await mockCreditsService.getOperationCost('report_generation');
    const apiCost = await mockCreditsService.getOperationCost('api_call');
    console.log(`‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π: OCR=${ocrCost}, –û—Ç—á–µ—Ç=${reportCost}, API=${apiCost}`);
    
    // –¢–µ—Å—Ç 2: Surge Pricing Service –∑–∞–≥–ª—É—à–∫–∏
    console.log('\nüìã –¢–µ—Å—Ç 2: Surge Pricing –∑–∞–≥–ª—É—à–∫–∏...');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É Surge Pricing Service
    const mockSurgePricingService = {
      isSurgePeriod(date = new Date()) {
        const checkDate = new Date(date);
        const currentYear = checkDate.getFullYear();
        const surgeStart = new Date(currentYear, 5, 15); // 15 –∏—é–Ω—è
        const surgeEnd = new Date(currentYear, 5, 30);   // 30 –∏—é–Ω—è
        return checkDate >= surgeStart && checkDate <= surgeEnd;
      },
      getSurgeMultiplier(date = new Date()) {
        return this.isSurgePeriod(date) ? 1.5 : 1.0;
      },
      getSurgePricingStatus(date = new Date()) {
        const isActive = this.isSurgePeriod(date);
        return {
          isActive,
          multiplier: isActive ? 1.5 : 1.0,
          reason: isActive ? '–í—ã—Å–æ–∫–∏–π —Å–µ–∑–æ–Ω –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏' : '–û–±—ã—á–Ω–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
          timeRemaining: isActive ? '10 –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è' : undefined
        };
      },
      calculatePrice(basePrice, date = new Date()) {
        const multiplier = this.getSurgeMultiplier(date);
        return Math.ceil(basePrice * multiplier);
      },
      getJobPriority(date = new Date()) {
        return this.isSurgePeriod(date) ? 'high' : 'normal';
      }
    };
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    const currentDate = new Date();
    const isSurge = mockSurgePricingService.isSurgePeriod(currentDate);
    console.log(`‚úÖ –¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ surge pricing: ${isSurge}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è
    const multiplier = mockSurgePricingService.getSurgeMultiplier(currentDate);
    console.log(`‚úÖ –¢–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ü–µ–Ω—ã: ${multiplier}x`);
    
    // –°—Ç–∞—Ç—É—Å surge pricing
    const status = mockSurgePricingService.getSurgePricingStatus(currentDate);
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å surge pricing:`);
    console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${status.isActive}`);
    console.log(`   –ú–Ω–æ–∂–∏—Ç–µ–ª—å: ${status.multiplier}x`);
    console.log(`   –ü—Ä–∏—á–∏–Ω–∞: ${status.reason}`);
    if (status.timeRemaining) {
      console.log(`   –û—Å—Ç–∞–ª–æ—Å—å: ${status.timeRemaining}`);
    }
    
    // –¢–µ—Å—Ç –ø–µ—Ä–∏–æ–¥–∞ 15-30 –∏—é–Ω—è
    const juneDate = new Date(2024, 5, 20); // 20 –∏—é–Ω—è 2024
    const isJuneSurge = mockSurgePricingService.isSurgePeriod(juneDate);
    const juneMultiplier = mockSurgePricingService.getSurgeMultiplier(juneDate);
    console.log(`‚úÖ –ü–µ—Ä–∏–æ–¥ 20 –∏—é–Ω—è: surge=${isJuneSurge}, –º–Ω–æ–∂–∏—Ç–µ–ª—å=${juneMultiplier}x`);
    
    // –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —Å surge pricing
    const basePrice = 100;
    const surgePrice = mockSurgePricingService.calculatePrice(basePrice, juneDate);
    console.log(`‚úÖ –¶–µ–Ω–∞ —Å surge pricing: –±–∞–∑–æ–≤–∞—è=${basePrice}, —Å –Ω–∞–¥–±–∞–≤–∫–æ–π=${surgePrice}`);
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á
    const normalPriority = mockSurgePricingService.getJobPriority(new Date(2024, 3, 15)); // 15 –∞–ø—Ä–µ–ª—è
    const surgePriority = mockSurgePricingService.getJobPriority(juneDate);
    console.log(`‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á: –æ–±—ã—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥=${normalPriority}, surge –ø–µ—Ä–∏–æ–¥=${surgePriority}`);
    
    // –¢–µ—Å—Ç 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≥–ª—É—à–µ–∫
    console.log('\nüìã –¢–µ—Å—Ç 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≥–ª—É—à–µ–∫...');
    
    // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–µ–π
    const simulateProcessing = async (orgId, operationType) => {
      console.log(`\nüîÑ –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ${orgId}:`);
      
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
      const balance = await mockCreditsService.checkBalance(orgId);
      console.log(`   1. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance.balance} –∫—Ä–µ–¥–∏—Ç–æ–≤`);
      
      // 2. –ü–æ–ª—É—á–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å surge pricing
      const surgeMultiplier = mockSurgePricingService.getSurgeMultiplier();
      console.log(`   2. –ú–Ω–æ–∂–∏—Ç–µ–ª—å surge pricing: ${surgeMultiplier}x`);
      
      // 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
      const cost = await mockCreditsService.getOperationCost(operationType, surgeMultiplier);
      console.log(`   3. –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationType}: ${cost} –∫—Ä–µ–¥–∏—Ç–æ–≤`);
      
      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç–æ–≤
      const hasEnoughCredits = await mockCreditsService.hasCredits(orgId, cost);
      console.log(`   4. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: ${hasEnoughCredits}`);
      
      if (hasEnoughCredits) {
        // 5. –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã
        const debitResult = await mockCreditsService.debitCredits(orgId, cost, `${operationType} processing`);
        console.log(`   5. –°–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤: —É—Å–ø–µ—Ö=${debitResult.success}, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å=${debitResult.newBalance}`);
        
        // 6. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏
        const priority = mockSurgePricingService.getJobPriority();
        console.log(`   6. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏: ${priority}`);
        
        return {
          success: true,
          cost,
          newBalance: debitResult.newBalance,
          priority,
          transactionId: debitResult.transactionId
        };
      } else {
        console.log(`   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏`);
        return {
          success: false,
          error: 'Insufficient credits'
        };
      }
    };
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π
    await simulateProcessing('org-test-456', 'ocr');
    await simulateProcessing('org-test-789', 'report_generation');
    
    // –¢–µ—Å—Ç 4: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è surge pricing
    console.log('\nüìã –¢–µ—Å—Ç 4: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è surge pricing...');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const mockConfig = {
      enabled: true,
      surgeStartDate: new Date(2024, 5, 15),
      surgeEndDate: new Date(2024, 5, 30),
      multiplier: 1.5,
      reason: '–í—ã—Å–æ–∫–∏–π —Å–µ–∑–æ–Ω –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏'
    };
    
    console.log(`‚úÖ –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:`);
    console.log(`   –í–∫–ª—é—á–µ–Ω: ${mockConfig.enabled}`);
    console.log(`   –ü–µ—Ä–∏–æ–¥: ${mockConfig.surgeStartDate.toLocaleDateString()} - ${mockConfig.surgeEndDate.toLocaleDateString()}`);
    console.log(`   –ú–Ω–æ–∂–∏—Ç–µ–ª—å: ${mockConfig.multiplier}x`);
    console.log(`   –ü—Ä–∏—á–∏–Ω–∞: ${mockConfig.reason}`);
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    mockConfig.multiplier = 2.0;
    mockConfig.reason = '–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏';
    
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –º–Ω–æ–∂–∏—Ç–µ–ª—å=${mockConfig.multiplier}x, –ø—Ä–∏—á–∏–Ω–∞="${mockConfig.reason}"`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    const testStart = new Date(2024, 5, 10); // 10 –∏—é–Ω—è
    const testEnd = new Date(2024, 5, 25);   // 25 –∏—é–Ω—è
    const surgeStart = new Date(2024, 5, 15);
    const surgeEnd = new Date(2024, 5, 30);
    const willBeSurge = testStart <= surgeEnd && testEnd >= surgeStart;
    console.log(`‚úÖ –ë—É–¥–µ—Ç –ª–∏ surge –∞–∫—Ç–∏–≤–µ–Ω –≤ –ø–µ—Ä–∏–æ–¥ 10-25 –∏—é–Ω—è: ${willBeSurge}`);
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≥–ª—É—à–µ–∫ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:');
    console.log('   ‚úÖ Credits Service: –≤—Å–µ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('   ‚úÖ Surge Pricing Service: –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ 15-30 –∏—é–Ω—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
    console.log('   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –∑–∞–≥–ª—É—à–∫–∏ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ –æ—á–µ—Ä–µ–¥–µ–π');
    console.log('   ‚úÖ TypeScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã: –≤—Å–µ —Ç–∏–ø—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –∑–∞–≥–ª—É—à–µ–∫ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏:', error.message);
    if (error.stack) {
      console.error('Stack trace:', error.stack);
    }
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testMonetizationStubs();