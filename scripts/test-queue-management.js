/**
 * –¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é
 */

require('dotenv').config();
const PgBoss = require('pg-boss');

async function testQueueManagement() {
  console.log('üîß –¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é...');
  
  const host = process.env.DB_HOST;
  const port = parseInt(process.env.DB_PORT || '5432');
  const database = process.env.DB_NAME;
  const user = process.env.DB_USER;
  const password = process.env.DB_PASSWORD;
  
  if (!host || !database || !user || !password) {
    throw new Error('DB –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }
  
  const boss = new PgBoss({
    host,
    port,
    database,
    user,
    password,
    schema: 'pgboss',
    noSupervisor: true,
    noScheduling: true
  });
  
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ pg-boss...');
    await boss.start();
    console.log('‚úÖ pg-boss –∑–∞–ø—É—â–µ–Ω');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á...');
    const jobIds = [];
    
    for (let i = 0; i < 3; i++) {
      const jobData = {
        documentId: `test-doc-${i}`,
        fileKey: `test-file-${i}.pdf`,
        userId: 'test-user',
        organizationId: 'test-org'
      };
      
      const jobId = await boss.send('ocr-processing', jobData, {
        priority: i === 0 ? 20 : 5, // –ø–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        retryLimit: 3
      });
      
      if (jobId) {
        jobIds.push(jobId);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ ${i + 1}: ${jobId}`);
      }
    }
    
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('üìä –¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    const db = boss.db;
    
    if (db) {
      const result = await db.query(`
        SELECT 
          state,
          COUNT(*) as count
        FROM pgboss.job 
        WHERE name = 'ocr-processing'
        GROUP BY state
      `);
      
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
      result.rows.forEach(row => {
        console.log(`  - ${row.state}: ${row.count}`);
      });
    }
    
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    console.log('üìã –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏...');
    if (db) {
      const activeJobs = await db.query(`
        SELECT 
          id,
          data,
          createdon,
          priority,
          state
        FROM pgboss.job 
        WHERE name = 'ocr-processing'
        AND state IN ('created', 'active')
        ORDER BY priority DESC, createdon ASC
        LIMIT 5
      `);
      
      console.log('‚úÖ –ó–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏:');
      activeJobs.rows.forEach(job => {
        console.log(`  - ID: ${job.id}, Priority: ${job.priority}, State: ${job.state}`);
        console.log(`    Data: ${JSON.stringify(job.data)}`);
      });
    }
    
    // –¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏
    if (jobIds.length > 0) {
      console.log('‚ùå –¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏...');
      const jobToCancel = jobIds[0];
      
      try {
        const cancelled = await boss.cancel(jobToCancel);
        console.log(`‚úÖ –ó–∞–¥–∞—á–∞ ${jobToCancel} ${cancelled ? '–æ—Ç–º–µ–Ω–µ–Ω–∞' : '–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å'}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏: ${error.message}`);
      }
    }
    
    // –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á
    console.log('üßπ –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∑–∞–¥–∞—á...');
    if (db) {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º, —Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –µ—Å—Ç—å
      const beforeCleanup = await db.query(`
        SELECT COUNT(*) as count 
        FROM pgboss.job 
        WHERE name = 'ocr-processing'
      `);
      
      console.log(`üìä –ó–∞–¥–∞—á –¥–æ –æ—á–∏—Å—Ç–∫–∏: ${beforeCleanup.rows[0].count}`);
      
      // –û—á–∏—Å—Ç–∫–∞ –∑–∞–¥–∞—á —Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã (–¥–ª—è —Ç–µ—Å—Ç–∞)
      const oneMinuteAgo = new Date(Date.now() - 60 * 1000);
      const cleanupResult = await db.query(`
        DELETE FROM pgboss.job 
        WHERE name = 'ocr-processing'
        AND state IN ('completed', 'failed', 'cancelled')
        AND completedon < $1
      `, [oneMinuteAgo]);
      
      console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ –∑–∞–¥–∞—á: ${cleanupResult.rowCount || 0}`);
    }
    
    // –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    console.log('üìà –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
    if (db) {
      const last24Hours = new Date(Date.now() - 24 * 60 * 60 * 1000);
      
      const metricsResult = await db.query(`
        SELECT 
          state,
          COUNT(*) as count,
          AVG(EXTRACT(EPOCH FROM (completedon - startedon))) as avg_duration
        FROM pgboss.job 
        WHERE name = 'ocr-processing'
        AND createdon > $1
        GROUP BY state
      `, [last24Hours]);
      
      console.log('‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞ 24 —á–∞—Å–∞:');
      metricsResult.rows.forEach(row => {
        const avgDuration = row.avg_duration ? `${Math.round(row.avg_duration)}s` : 'N/A';
        console.log(`  - ${row.state}: ${row.count} –∑–∞–¥–∞—á, —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${avgDuration}`);
      });
    }
    
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é:', error.message);
    throw error;
  } finally {
    await boss.stop();
    console.log('üõë pg-boss –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

testQueueManagement()
  .then(() => {
    console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é –Ω–µ –ø—Ä–æ—à–µ–ª:', error.message);
    process.exit(1);
  });