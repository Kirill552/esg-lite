/**
 * –¢–µ—Å—Ç Queue Manager —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
 */

require('dotenv').config();

async function testQueueManager() {
  console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Queue Manager...');
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º require –¥–ª—è TypeScript —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ ts-node –∏–ª–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏—é
  // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  console.log('‚ö†Ô∏è –¢–µ—Å—Ç Queue Manager —Ç—Ä–µ–±—É–µ—Ç –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ TypeScript');
  
  const queueManager = new QueueManager();
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Queue Manager...');
    await queueManager.initialize();
    console.log('‚úÖ Queue Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const testJobData = {
      documentId: 'test-doc-123',
      fileKey: 'test-file.pdf',
      userId: 'test-user-456',
      organizationId: 'test-org-789'
    };
    
    // –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    console.log('üìã –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è OCR –∑–∞–¥–∞—á–∏...');
    const jobId = await queueManager.addOcrJob(testJobData, { priority: 'normal' });
    console.log('‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID:', jobId);
    
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    if (jobId) {
      console.log('üìä –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏...');
      const status = await queueManager.getJobStatus(jobId);
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:', status);
    }
    
    // –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π
    console.log('üìà –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π...');
    const stats = await queueManager.getQueueStats();
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π:', stats);
    
    // –¢–µ—Å—Ç surge-pricing
    console.log('üí∞ –¢–µ—Å—Ç surge-pricing –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...');
    const surgeInfo = queueManager.getSurgePricingInfo();
    console.log('‚úÖ Surge-pricing:', surgeInfo);
    
    // –¢–µ—Å—Ç —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    console.log('üî• –¢–µ—Å—Ç –∑–∞–¥–∞—á–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º...');
    const highPriorityJobId = await queueManager.addOcrJob({
      ...testJobData,
      documentId: 'test-doc-high-priority'
    }, { priority: 'high' });
    console.log('‚úÖ –ó–∞–¥–∞—á–∞ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∞:', highPriorityJobId);
    
    // –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏
    console.log('üßπ –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á...');
    const cleanedCount = await queueManager.cleanCompletedJobs(1);
    console.log('‚úÖ –û—á–∏—â–µ–Ω–æ –∑–∞–¥–∞—á:', cleanedCount);
    
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã Queue Manager –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Queue Manager:', error.message);
    throw error;
  } finally {
    await queueManager.stop();
    console.log('üõë Queue Manager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

testQueueManager()
  .then(() => {
    console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ:', error.message);
    process.exit(1);
  });