/**
 * –¢–µ—Å—Ç cleanup –ø—Ä–æ—Ü–µ–¥—É—Ä –¥–ª—è PostgreSQL –æ—á–µ—Ä–µ–¥–µ–π
 * –ó–∞–¥–∞—á–∞ 8.3: –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è PostgreSQL –æ—á–µ—Ä–µ–¥–µ–π
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: 5.2, 6.3
 */

require('dotenv').config();

async function testQueueCleanup() {
  console.log('üîß –¢–µ—Å—Ç cleanup –ø—Ä–æ—Ü–µ–¥—É—Ä –æ—á–µ—Ä–µ–¥–µ–π (–∑–∞–¥–∞—á–∞ 8.3)...');
  
  try {
    // –¢–µ—Å—Ç 1: –°–∏–º—É–ª—è—Ü–∏—è cleanup –ø—Ä–æ—Ü–µ–¥—É—Ä
    console.log('\nüìã –¢–µ—Å—Ç 1: Cleanup –ø—Ä–æ—Ü–µ–¥—É—Ä—ã...');
    
    function simulateCleanup(options = {}) {
      const {
        completedJobsOlderThanHours = 24 * 7,
        failedJobsOlderThanHours = 24 * 30,
        logsOlderThanHours = 24 * 3,
        batchSize = 1000,
        dryRun = false
      } = options;
      
      console.log(`üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã cleanup:`);
      console.log(`  –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å—Ç–∞—Ä—à–µ: ${completedJobsOlderThanHours} —á–∞—Å–æ–≤ (${Math.floor(completedJobsOlderThanHours/24)} –¥–Ω–µ–π)`);
      console.log(`  –ù–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å—Ç–∞—Ä—à–µ: ${failedJobsOlderThanHours} —á–∞—Å–æ–≤ (${Math.floor(failedJobsOlderThanHours/24)} –¥–Ω–µ–π)`);
      console.log(`  –õ–æ–≥–∏ —Å—Ç–∞—Ä—à–µ: ${logsOlderThanHours} —á–∞—Å–æ–≤ (${Math.floor(logsOlderThanHours/24)} –¥–Ω–µ–π)`);
      console.log(`  –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: ${batchSize}`);
      console.log(`  Dry run: ${dryRun ? '–î–ê' : '–ù–ï–¢'}`);
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã cleanup
      const mockResults = {
        completedJobs: Math.floor(Math.random() * 500),
        failedJobs: Math.floor(Math.random() * 100),
        cancelledJobs: Math.floor(Math.random() * 50),
        expiredJobs: Math.floor(Math.random() * 20),
        keepUntilJobs: Math.floor(Math.random() * 30),
        logs: Math.floor(Math.random() * 2000)
      };
      
      console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã cleanup${dryRun ? ' (DRY RUN)' : ''}:`);
      console.log(`  –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: ${mockResults.completedJobs}`);
      console.log(`  –ù–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏: ${mockResults.failedJobs}`);
      console.log(`  –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: ${mockResults.cancelledJobs}`);
      console.log(`  –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: ${mockResults.expiredJobs}`);
      console.log(`  –ó–∞–¥–∞—á–∏ —Å –∏—Å—Ç–µ–∫—à–∏–º keepUntil: ${mockResults.keepUntilJobs}`);
      console.log(`  –õ–æ–≥–∏: ${mockResults.logs}`);
      
      const totalJobs = mockResults.completedJobs + mockResults.failedJobs + 
                       mockResults.cancelledJobs + mockResults.expiredJobs + 
                       mockResults.keepUntilJobs;
      
      console.log(`\n‚úÖ –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ: ${totalJobs} –∑–∞–¥–∞—á, ${mockResults.logs} –ª–æ–≥–æ–≤`);
      
      return {
        deletedJobs: totalJobs,
        deletedLogs: mockResults.logs,
        duration: Math.floor(Math.random() * 5000) + 1000,
        errors: []
      };
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ cleanup
    const cleanupScenarios = [
      {
        name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞',
        options: {}
      },
      {
        name: '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞',
        options: {
          completedJobsOlderThanHours: 24,
          failedJobsOlderThanHours: 24 * 7,
          logsOlderThanHours: 12
        }
      },
      {
        name: '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞',
        options: {
          completedJobsOlderThanHours: 24 * 30,
          failedJobsOlderThanHours: 24 * 90,
          logsOlderThanHours: 24 * 7
        }
      },
      {
        name: 'Dry run —Ç–µ—Å—Ç',
        options: {
          dryRun: true
        }
      }
    ];
    
    cleanupScenarios.forEach((scenario, i) => {
      console.log(`\n  ${i + 1}. ${scenario.name}:`);
      const result = simulateCleanup(scenario.options);
      console.log(`     –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${result.duration}ms`);
      console.log(`     –û—à–∏–±–∫–∏: ${result.errors.length}`);
    });
    
    // –¢–µ—Å—Ç 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏
    console.log('\nüìã –¢–µ—Å—Ç 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏...');
    
    function simulateQueueStatistics() {
      console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏...');
      
      const mockStats = {
        totalJobs: Math.floor(Math.random() * 10000) + 1000,
        jobsByState: {
          CREATED: Math.floor(Math.random() * 100) + 10,
          ACTIVE: Math.floor(Math.random() * 50) + 5,
          COMPLETED: Math.floor(Math.random() * 8000) + 500,
          FAILED: Math.floor(Math.random() * 200) + 20,
          CANCELLED: Math.floor(Math.random() * 100) + 10,
          EXPIRED: Math.floor(Math.random() * 50) + 5
        },
        totalLogs: Math.floor(Math.random() * 50000) + 5000,
        logsByLevel: {
          DEBUG: Math.floor(Math.random() * 10000) + 1000,
          INFO: Math.floor(Math.random() * 30000) + 3000,
          WARN: Math.floor(Math.random() * 5000) + 500,
          ERROR: Math.floor(Math.random() * 1000) + 100
        },
        oldestJob: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),
        newestJob: new Date()
      };
      
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏:');
      console.log(`  –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${mockStats.totalJobs}`);
      console.log('  –ó–∞–¥–∞—á–∏ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º:');
      Object.entries(mockStats.jobsByState).forEach(([state, count]) => {
        console.log(`    ${state}: ${count}`);
      });
      
      console.log(`  –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: ${mockStats.totalLogs}`);
      console.log('  –õ–æ–≥–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º:');
      Object.entries(mockStats.logsByLevel).forEach(([level, count]) => {
        console.log(`    ${level}: ${count}`);
      });
      
      console.log(`  –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –∑–∞–¥–∞—á–∞: ${mockStats.oldestJob.toISOString()}`);
      console.log(`  –°–∞–º–∞—è –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: ${mockStats.newestJob.toISOString()}`);
      
      return mockStats;
    }
    
    simulateQueueStatistics();
    
    // –¢–µ—Å—Ç 3: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞
    console.log('\nüìã –¢–µ—Å—Ç 3: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞...');
    
    function simulateAutoCleanup() {
      console.log('ü§ñ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏...');
      console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:');
      console.log('  ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: 7 –¥–Ω–µ–π');
      console.log('  ‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏: 30 –¥–Ω–µ–π');
      console.log('  ‚Ä¢ –õ–æ–≥–∏: 3 –¥–Ω—è');
      console.log('  ‚Ä¢ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: 500');
      
      const result = simulateCleanup({
        completedJobsOlderThanHours: 24 * 7,
        failedJobsOlderThanHours: 24 * 30,
        logsOlderThanHours: 24 * 3,
        batchSize: 500,
        dryRun: false
      });
      
      console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      return result;
    }
    
    simulateAutoCleanup();
    
    // –¢–µ—Å—Ç 4: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ cleanup –ø—Ä–æ—Ü–µ–¥—É—Ä
    console.log('\nüìã –¢–µ—Å—Ç 4: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ cleanup –ø—Ä–æ—Ü–µ–¥—É—Ä...');
    
    const monitoringQueries = [
      {
        name: '–ó–∞–¥–∞—á–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º',
        sql: `SELECT state, COUNT(*) as count, 
                     MIN(completed_on) as oldest,
                     MAX(completed_on) as newest
              FROM queue_jobs 
              WHERE completed_on IS NOT NULL 
              GROUP BY state`,
        description: '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –≤–æ–∑—Ä–∞—Å—Ç –∑–∞–¥–∞—á –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º'
      },
      {
        name: '–°—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º',
        sql: `SELECT level, COUNT(*) as count,
                     MIN(created_on) as oldest
              FROM queue_job_logs 
              WHERE created_on < NOW() - INTERVAL '3 days'
              GROUP BY level`,
        description: '–õ–æ–≥–∏ —Å—Ç–∞—Ä—à–µ 3 –¥–Ω–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏'
      },
      {
        name: '–ó–∞–¥–∞—á–∏ —Å –∏—Å—Ç–µ–∫—à–∏–º keepUntil',
        sql: `SELECT COUNT(*) as expired_count,
                     MIN(keep_until) as oldest_expired
              FROM queue_jobs 
              WHERE keep_until IS NOT NULL AND keep_until < NOW()`,
        description: '–ó–∞–¥–∞—á–∏ —Å –∏—Å—Ç–µ–∫—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏—è'
      },
      {
        name: '–†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü –æ—á–µ—Ä–µ–¥–∏',
        sql: `SELECT 
                pg_size_pretty(pg_total_relation_size('queue_jobs')) as jobs_size,
                pg_size_pretty(pg_total_relation_size('queue_job_logs')) as logs_size`,
        description: '–†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–æ—Å—Ç–∞'
      },
      {
        name: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å cleanup –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å',
        sql: `SELECT 
                COUNT(*) as jobs_deleted_last_hour
              FROM queue_jobs 
              WHERE completed_on > NOW() - INTERVAL '1 hour'
                AND state IN ('COMPLETED', 'FAILED', 'CANCELLED')`,
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á, –≥–æ—Ç–æ–≤—ã—Ö –∫ cleanup'
      }
    ];
    
    console.log('üîç SQL –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ cleanup:');
    monitoringQueries.forEach((query, i) => {
      console.log(`  ${i + 1}. ${query.name}:`);
      console.log(`     –û–ø–∏—Å–∞–Ω–∏–µ: ${query.description}`);
      console.log(`     SQL: ${query.sql.replace(/\\s+/g, ' ').trim()}`);
      console.log('');
    });
    
    // –¢–µ—Å—Ç 5: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ cleanup
    console.log('\nüìã –¢–µ—Å—Ç 5: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ cleanup...');
    
    const recommendations = [
      {
        category: '–ß–∞—Å—Ç–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
        items: [
          '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 2:00',
          '–ù–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏: –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
          '–õ–æ–≥–∏: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 3:00',
          'keepUntil –∑–∞–¥–∞—á–∏: –∫–∞–∂–¥—ã–π —á–∞—Å',
          '–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 4:00'
        ]
      },
      {
        category: '–†–∞–∑–º–µ—Ä—ã –±–∞—Ç—á–µ–π',
        items: [
          '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞: 500 –∑–∞–ø–∏—Å–µ–π',
          '–†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: 1000 –∑–∞–ø–∏—Å–µ–π',
          '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞: 100 –∑–∞–ø–∏—Å–µ–π (–±–µ–∑–æ–ø–∞—Å–Ω–æ)',
          '–ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏: 100ms'
        ]
      },
      {
        category: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
        items: [
          '–†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10GB',
          '–í—Ä–µ–º—è cleanup –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 5 –º–∏–Ω—É—Ç',
          '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ cleanup < 1%',
          '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π cleanup'
        ]
      },
      {
        category: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
        items: [
          '–í—Å–µ–≥–¥–∞ —Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å dry run –ø–µ—Ä–µ–¥ —Ä–µ–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π',
          '–î–µ–ª–∞–π—Ç–µ backup –ø–µ—Ä–µ–¥ –º–∞—Å—Å–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–æ–π',
          '–ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ –≤—Ä–µ–º—è cleanup',
          '–ò–º–µ–π—Ç–µ –ø–ª–∞–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
        ]
      }
    ];
    
    console.log('üîç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ cleanup:');
    recommendations.forEach(category => {
      console.log(`  ${category.category}:`);
      category.items.forEach(item => {
        console.log(`    ‚Ä¢ ${item}`);
      });
      console.log('');
    });
    
    console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã cleanup –ø—Ä–æ—Ü–µ–¥—É—Ä –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìä –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:');
    console.log('  ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á');
    console.log('  ‚úÖ –ì–∏–±–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—á–∏—Å—Ç–∫–∏');
    console.log('  ‚úÖ –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
    console.log('  ‚úÖ Dry run —Ä–µ–∂–∏–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    console.log('  ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥');
    
    console.log('\nüîß Cleanup –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:');
    console.log('  ‚úÖ cleanupOldJobs() - –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—á–∏—Å—Ç–∫–∏');
    console.log('  ‚úÖ getQueueStatistics() - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏');
    console.log('  ‚úÖ autoCleanup() - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è cron');
    
    console.log('\nüìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:');
    console.log('  ‚Ä¢ –û—á–∏—Å—Ç–∫–∞ 1000 –∑–∞–¥–∞—á: ~1-5 —Å–µ–∫—É–Ω–¥');
    console.log('  ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ~100-500ms');
    console.log('  ‚Ä¢ Dry run –ø—Ä–æ–≤–µ—Ä–∫–∞: ~50-200ms');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testQueueCleanup();