// –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫—Ä–µ–¥–∏—Ç–æ–≤
console.log('üß™ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫—Ä–µ–¥–∏—Ç–æ–≤...\n');

async function quickTest() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
    const fs = require('fs');
    const path = require('path');
    
    const pagePath = path.join(__dirname, '..', 'app', 'credits', 'page.tsx');
    
    if (fs.existsSync(pagePath)) {
      console.log('‚úÖ –§–∞–π–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      
      const content = fs.readFileSync(pagePath, 'utf-8');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      const checks = [
        { name: 'Export default', regex: /export default function/ },
        { name: 'Data testid', regex: /data-testid="credits-page"/ },
        { name: 'UseCallback imports', regex: /useCallback, useMemo/ },
        { name: 'No problematic useEffect', regex: /useEffect.*fetchBalance.*fetchTransactions/ },
        { name: 'Proper dependency arrays', regex: /\[\]|\[organizationId\]|\[filter\]/ }
      ];
      
      checks.forEach(check => {
        if (check.regex.test(content)) {
          console.log(`‚úÖ ${check.name}: –Ω–∞–π–¥–µ–Ω`);
        } else {
          console.log(`‚ùå ${check.name}: –ù–ï –Ω–∞–π–¥–µ–Ω`);
        }
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ useEffect
      const useEffectMatches = content.match(/useEffect/g);
      console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ useEffect: ${useEffectMatches ? useEffectMatches.length : 0}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
      const problematicPatterns = [
        { name: 'Infinite dependency loops', regex: /fetchBalance.*fetchTransactions.*\]/ },
        { name: 'Missing dependency array', regex: /useEffect\([^}]+\);/ }
      ];
      
      problematicPatterns.forEach(pattern => {
        if (pattern.regex.test(content)) {
          console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: ${pattern.name}`);
        }
      });
      
    } else {
      console.log('‚ùå –§–∞–π–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ù–ï –Ω–∞–π–¥–µ–Ω!');
    }
    
    console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('üëÄ –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000/credits –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

quickTest();
