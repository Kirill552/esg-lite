const { Client } = require('pg');

async function checkDatabaseTables() {
  const client = new Client({
    connectionString: process.env.DATABASE_URL || 'postgresql://esg_user:esg_user_2025!@localhost:5433/esg_lite_mvp'
  });

  try {
    console.log('üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await client.connect();
    
    console.log('üìä –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ö–µ–º—ã –∏ —Ç–∞–±–ª–∏—Ü—ã
    const allTablesQuery = `
      SELECT 
        schemaname, 
        tablename,
        hasindexes,
        hasrules,
        hastriggers
      FROM pg_tables 
      WHERE schemaname NOT IN ('information_schema', 'pg_catalog', 'pg_toast')
      ORDER BY schemaname, tablename;
    `;
    
    const result = await client.query(allTablesQuery);
    
    console.log(`\nüìã –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} —Ç–∞–±–ª–∏—Ü:\n`);
    
    let currentSchema = '';
    result.rows.forEach(row => {
      if (row.schemaname !== currentSchema) {
        currentSchema = row.schemaname;
        console.log(`\nüèõÔ∏è  –°—Ö–µ–º–∞: ${currentSchema}`);
        console.log('='.repeat(40));
      }
      
      const features = [];
      if (row.hasindexes) features.push('indexes');
      if (row.hasrules) features.push('rules');
      if (row.hastriggers) features.push('triggers');
      
      console.log(`   üìÑ ${row.tablename}${features.length ? ` (${features.join(', ')})` : ''}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Å—Ö–µ–º—É pgboss
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É pgboss –¥–µ—Ç–∞–ª—å–Ω–æ...');
    const pgbossQuery = `
      SELECT 
        table_name,
        table_type
      FROM information_schema.tables 
      WHERE table_schema = 'pgboss'
      ORDER BY table_name;
    `;
    
    const pgbossResult = await client.query(pgbossQuery);
    
    if (pgbossResult.rows.length === 0) {
      console.log('‚ùå –°—Ö–µ–º–∞ pgboss –ø—É—Å—Ç–∞—è –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
    } else {
      console.log(`‚úÖ –í —Å—Ö–µ–º–µ pgboss –Ω–∞–π–¥–µ–Ω–æ ${pgbossResult.rows.length} —Ç–∞–±–ª–∏—Ü:`);
      pgbossResult.rows.forEach(row => {
        console.log(`   üìÑ ${row.table_name} (${row.table_type})`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const userQuery = `SELECT current_user, current_database();`;
    const userResult = await client.query(userQuery);
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userResult.rows[0].current_user}`);
    console.log(`üè† –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${userResult.rows[0].current_database}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å—Ö–µ–º—É pgboss
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ö–µ–º—ã pgboss...');
    const pgbossContentQuery = `
      SELECT 
        name,
        COUNT(*) as job_count
      FROM pgboss.job 
      GROUP BY name
      ORDER BY job_count DESC;
    `;
    
    try {
      const contentResult = await client.query(pgbossContentQuery);
      if (contentResult.rows.length > 0) {
        console.log('ÔøΩ –ó–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—è—Ö:');
        contentResult.rows.forEach(row => {
          console.log(`   üìù ${row.name}: ${row.job_count} –∑–∞–¥–∞—á`);
        });
      } else {
        console.log('üì≠ –û—á–µ—Ä–µ–¥–∏ –ø—É—Å—Ç—ã–µ');
      }
    } catch (err) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è pgboss.job:', err.message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é pgboss
    try {
      const versionQuery = `SELECT version FROM pgboss.version LIMIT 1;`;
      const versionResult = await client.query(versionQuery);
      if (versionResult.rows.length > 0) {
        console.log(`üî¢ –í–µ—Ä—Å–∏—è pg-boss —Å—Ö–µ–º—ã: ${versionResult.rows[0].version}`);
      }
    } catch (err) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ pg-boss:', err.message);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await client.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  checkDatabaseTables().catch(console.error);
}

module.exports = { checkDatabaseTables };
