/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≥–ª—É—à–µ–∫ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º—É –æ—á–µ—Ä–µ–¥–µ–π
 * –ó–∞–¥–∞—á–∞ 9.2: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–ª—É—à–∫–∏ –≤ —Å–∏—Å—Ç–µ–º—É –æ—á–µ—Ä–µ–¥–µ–π
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: 1.1, 2.1, 2.2
 */

require('dotenv').config();

async function testMonetizationIntegration() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≥–ª—É—à–µ–∫ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º—É –æ—á–µ—Ä–µ–¥–µ–π (–∑–∞–¥–∞—á–∞ 9.2)...');
  
  try {
    // –¢–µ—Å—Ç 1: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ Queue Manager
    console.log('\nüìã –¢–µ—Å—Ç 1: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≥–ª—É—à–µ–∫ –≤ Queue Manager...');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É Queue Manager —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∑–∞–≥–ª—É—à–µ–∫
    const mockQueueManager = {
      async addOcrJob(data, options = {}) {
        console.log(`üîç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ OCR –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ${data.organizationId}:`);
        
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–≥–ª—É—à–∫—É
        const hasCredits = true; // –ó–∞–≥–ª—É—à–∫–∞: –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç—ã
        console.log(`   1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤: ${hasCredits ? '‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ' : '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'}`);
        
        if (!hasCredits) {
          throw new Error('INSUFFICIENT_CREDITS');
        }
        
        // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å —É—á–µ—Ç–æ–º surge-pricing
        const currentDate = new Date();
        const isSurgePeriod = this.isSurgePeriod(currentDate);
        let priority = 'normal';
        
        if (options.priority === 'urgent') {
          priority = 'urgent';
        } else if (options.priority === 'high' || isSurgePeriod) {
          priority = 'high';
        }
        
        console.log(`   2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: ${priority} (surge –ø–µ—Ä–∏–æ–¥: ${isSurgePeriod})`);
        
        // 3. –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã
        const cost = isSurgePeriod ? 2 : 1; // –í surge –ø–µ—Ä–∏–æ–¥ –¥–æ—Ä–æ–∂–µ
        console.log(`   3. –°–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤: ${cost} –∫—Ä–µ–¥–∏—Ç–æ–≤`);
        
        // 4. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        const jobId = `job_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        console.log(`   4. –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${jobId}`);
        
        return {
          jobId,
          priority,
          cost,
          isSurgePeriod
        };
      },
      
      isSurgePeriod(date = new Date()) {
        const checkDate = new Date(date);
        const currentYear = checkDate.getFullYear();
        const surgeStart = new Date(currentYear, 5, 15); // 15 –∏—é–Ω—è
        const surgeEnd = new Date(currentYear, 5, 30);   // 30 –∏—é–Ω—è
        return checkDate >= surgeStart && checkDate <= surgeEnd;
      }
    };
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    const normalPeriodData = {
      documentId: 'doc-123',
      organizationId: 'org-456',
      fileName: 'test.pdf'
    };
    
    const normalResult = await mockQueueManager.addOcrJob(normalPeriodData);
    console.log(`‚úÖ –û–±—ã—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥: jobId=${normalResult.jobId}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç=${normalResult.priority}, —Å—Ç–æ–∏–º–æ—Å—Ç—å=${normalResult.cost}`);
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º surge –ø–µ—Ä–∏–æ–¥
    const surgeResult = await mockQueueManager.addOcrJob(normalPeriodData, { priority: 'normal' });
    console.log(`‚úÖ Surge –ø–µ—Ä–∏–æ–¥: jobId=${surgeResult.jobId}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç=${surgeResult.priority}, —Å—Ç–æ–∏–º–æ—Å—Ç—å=${surgeResult.cost}`);
    
    // –¢–µ—Å—Ç 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ Rate Limiter
    console.log('\nüìã –¢–µ—Å—Ç 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≥–ª—É—à–µ–∫ –≤ Rate Limiter...');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É Rate Limiter —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∑–∞–≥–ª—É—à–µ–∫
    const mockRateLimiter = {
      async checkLimit(organizationId) {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ${organizationId}:`);
        
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
        const hasCredits = true; // –ó–∞–≥–ª—É—à–∫–∞
        console.log(`   1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤: ${hasCredits ? '‚úÖ –ï—Å—Ç—å –∫—Ä–µ–¥–∏—Ç—ã' : '‚ùå –ù–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤'}`);
        
        if (!hasCredits) {
          return {
            allowed: false,
            remaining: 0,
            resetTime: new Date(),
            reason: 'INSUFFICIENT_CREDITS'
          };
        }
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º surge –ø–µ—Ä–∏–æ–¥
        const isSurgePeriod = this.isSurgePeriod();
        const baseLimit = 100;
        const effectiveLimit = isSurgePeriod ? Math.floor(baseLimit * 1.2) : baseLimit; // +20% –≤ surge
        
        console.log(`   2. Surge –ø–µ—Ä–∏–æ–¥: ${isSurgePeriod}, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ª–∏–º–∏—Ç: ${effectiveLimit}`);
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫
        const currentCount = Math.floor(Math.random() * 50); // –°–∏–º—É–ª—è—Ü–∏—è
        const remaining = effectiveLimit - currentCount - 1;
        
        console.log(`   3. –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫: ${currentCount}/${effectiveLimit}, –æ—Å—Ç–∞–ª–æ—Å—å: ${remaining}`);
        
        return {
          allowed: currentCount < effectiveLimit,
          remaining: Math.max(0, remaining),
          resetTime: new Date(Date.now() + 60 * 60 * 1000), // +1 —á–∞—Å
          isSurgePeriod,
          effectiveLimit
        };
      },
      
      async incrementCounter(organizationId) {
        console.log(`üìà –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è ${organizationId}`);
        return true;
      },
      
      isSurgePeriod() {
        const now = new Date();
        const currentYear = now.getFullYear();
        const surgeStart = new Date(currentYear, 5, 15);
        const surgeEnd = new Date(currentYear, 5, 30);
        return now >= surgeStart && now <= surgeEnd;
      }
    };
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏–º–∏—Ç–æ–≤
    const limitResult1 = await mockRateLimiter.checkLimit('org-test-123');
    console.log(`‚úÖ –õ–∏–º–∏—Ç –¥–ª—è org-test-123: —Ä–∞–∑—Ä–µ—à–µ–Ω=${limitResult1.allowed}, –æ—Å—Ç–∞–ª–æ—Å—å=${limitResult1.remaining}`);
    
    const limitResult2 = await mockRateLimiter.checkLimit('org-test-456');
    console.log(`‚úÖ –õ–∏–º–∏—Ç –¥–ª—è org-test-456: —Ä–∞–∑—Ä–µ—à–µ–Ω=${limitResult2.allowed}, –æ—Å—Ç–∞–ª–æ—Å—å=${limitResult2.remaining}`);
    
    // –¢–µ—Å—Ç 3: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    console.log('\nüìã –¢–µ—Å—Ç 3: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≥–ª—É—à–µ–∫...');
    
    const simulateFullCycle = async (organizationId, operationType) => {
      console.log(`\nüîÑ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ${organizationId} (${operationType}):`);
      
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
      const limitCheck = await mockRateLimiter.checkLimit(organizationId);
      console.log(`   1. Rate limit: ${limitCheck.allowed ? '‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω' : '‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω'}`);
      
      if (!limitCheck.allowed) {
        return { success: false, reason: 'RATE_LIMIT_EXCEEDED' };
      }
      
      // 2. –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      await mockRateLimiter.incrementCounter(organizationId);
      console.log(`   2. –°—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω`);
      
      // 3. –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
      const jobData = {
        documentId: `doc_${Date.now()}`,
        organizationId,
        fileName: `${operationType}_test.pdf`
      };
      
      const jobResult = await mockQueueManager.addOcrJob(jobData);
      console.log(`   3. –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ID=${jobResult.jobId}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç=${jobResult.priority}`);
      
      // 4. –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
      console.log(`   4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`);
      console.log(`      - –ö—Ä–µ–¥–∏—Ç—ã —Å–ø–∏—Å–∞–Ω—ã: ${jobResult.cost}`);
      console.log(`      - Surge –ø–µ—Ä–∏–æ–¥: ${jobResult.isSurgePeriod}`);
      console.log(`      - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${jobResult.priority}`);
      console.log(`      - Rate limit –æ—Å—Ç–∞–ª–æ—Å—å: ${limitCheck.remaining}`);
      
      return {
        success: true,
        jobId: jobResult.jobId,
        cost: jobResult.cost,
        priority: jobResult.priority,
        remainingRequests: limitCheck.remaining
      };
    };
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
    const cycle1 = await simulateFullCycle('org-integration-1', 'ocr');
    const cycle2 = await simulateFullCycle('org-integration-2', 'report');
    
    console.log(`\n‚úÖ –¶–∏–∫–ª 1: ${cycle1.success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'} (${cycle1.success ? cycle1.jobId : cycle1.reason})`);
    console.log(`‚úÖ –¶–∏–∫–ª 2: ${cycle2.success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'} (${cycle2.success ? cycle2.jobId : cycle2.reason})`);
    
    // –¢–µ—Å—Ç 4: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('\nüìã –¢–µ—Å—Ç 4: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–≥–ª—É—à–µ–∫...');
    
    const mockLogger = {
      logMonetizationEvent(event, data) {
        const timestamp = new Date().toISOString();
        console.log(`[${timestamp}] üí∞ MONETIZATION: ${event}`);
        Object.entries(data).forEach(([key, value]) => {
          console.log(`   ${key}: ${value}`);
        });
      }
    };
    
    // –ü—Ä–∏–º–µ—Ä—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    mockLogger.logMonetizationEvent('CREDITS_CHECK', {
      organizationId: 'org-debug-1',
      hasCredits: true,
      balance: 1000
    });
    
    mockLogger.logMonetizationEvent('SURGE_PRICING_APPLIED', {
      organizationId: 'org-debug-2',
      isSurgePeriod: true,
      multiplier: 1.5,
      originalCost: 1,
      finalCost: 2
    });
    
    mockLogger.logMonetizationEvent('RATE_LIMIT_CHECK', {
      organizationId: 'org-debug-3',
      allowed: true,
      currentCount: 45,
      maxRequests: 120,
      isSurgePeriod: true
    });
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≥–ª—É—à–µ–∫ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:');
    console.log('='.repeat(60));
    console.log('‚úÖ Queue Manager: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å credits-service –∏ surge-pricing');
    console.log('‚úÖ Rate Limiter: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ª–∏–º–∏—Ç–æ–≤ –≤ surge –ø–µ—Ä–∏–æ–¥');
    console.log('‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ –≤ surge –ø–µ—Ä–∏–æ–¥');
    console.log('‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è');
    console.log('‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏');
    
    console.log('\nüéØ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –ü–†–û–î–ê–ö–®–ï–ù–£:');
    console.log('   ‚Ä¢ –ó–∞–≥–ª—É—à–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤–æ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã');
    console.log('   ‚Ä¢ Surge pricing –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å');
    console.log('   ‚Ä¢ Rate limiting —É—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–æ–≤');
    console.log('   ‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ—Ç–ª–∞–¥–∫—É');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≥–ª—É—à–µ–∫:', error.message);
    if (error.stack) {
      console.error('Stack trace:', error.stack);
    }
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
testMonetizationIntegration();