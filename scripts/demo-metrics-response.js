#!/usr/bin/env node

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ API –º–µ—Ç—Ä–∏–∫
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å JSON –æ—Ç–≤–µ—Ç –æ—Ç /api/queue/metrics
 */

function demoMetricsResponse() {
  console.log('üìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ API –º–µ—Ç—Ä–∏–∫\n');

  // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç API
  const mockResponse = {
    success: true,
    data: {
      period: "24h",
      summary: {
        averageProcessingTime: 1847,
        throughputPerMinute: 8.5,
        errorRate: 2.3,
        failedJobsCount: 12,
        activeWorkersCount: 3
      },
      queues: {
        waiting: 15,
        active: 7,
        completed: 1250,
        failed: 12
      },
      recentMetrics: {
        processingTime: {
          count: 45,
          latest: [
            { value: 1200, timestamp: "2025-07-27T15:30:00.000Z" },
            { value: 2100, timestamp: "2025-07-27T15:25:00.000Z" },
            { value: 890, timestamp: "2025-07-27T15:20:00.000Z" },
            { value: 1650, timestamp: "2025-07-27T15:15:00.000Z" },
            { value: 2300, timestamp: "2025-07-27T15:10:00.000Z" }
          ]
        },
        throughput: {
          count: 24,
          latest: [
            { value: 8.5, timestamp: "2025-07-27T15:30:00.000Z" },
            { value: 9.2, timestamp: "2025-07-27T15:25:00.000Z" },
            { value: 7.8, timestamp: "2025-07-27T15:20:00.000Z" },
            { value: 8.1, timestamp: "2025-07-27T15:15:00.000Z" },
            { value: 9.5, timestamp: "2025-07-27T15:10:00.000Z" }
          ]
        },
        errors: {
          count: 8,
          latest: [
            {
              type: "OCR_PROCESSING_ERROR",
              message: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª",
              timestamp: "2025-07-27T15:28:00.000Z"
            },
            {
              type: "FILE_NOT_FOUND",
              message: "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ",
              timestamp: "2025-07-27T15:22:00.000Z"
            },
            {
              type: "NETWORK_ERROR",
              message: "–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
              timestamp: "2025-07-27T15:18:00.000Z"
            }
          ]
        }
      },
      periodInfo: {
        start: "2025-07-26T15:30:00.000Z",
        end: "2025-07-27T15:30:00.000Z",
        duration: "24 hours"
      }
    },
    timestamp: "2025-07-27T15:30:15.123Z"
  };

  console.log('‚úÖ –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ GET /api/queue/metrics:');
  console.log(JSON.stringify(mockResponse, null, 2));

  console.log('\nüìà –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞:');
  console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${mockResponse.data.summary.averageProcessingTime}ms`);
  console.log(`   –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ${mockResponse.data.summary.throughputPerMinute} –∑–∞–¥–∞—á/–º–∏–Ω`);
  console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: ${mockResponse.data.summary.errorRate}%`);
  console.log(`   –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á: ${mockResponse.data.summary.failedJobsCount}`);
  console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤: ${mockResponse.data.summary.activeWorkersCount}`);

  console.log('\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–µ–π:');
  console.log(`   –û–∂–∏–¥–∞—é—â–∏–µ: ${mockResponse.data.queues.waiting}`);
  console.log(`   –ê–∫—Ç–∏–≤–Ω—ã–µ: ${mockResponse.data.queues.active}`);
  console.log(`   –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ: ${mockResponse.data.queues.completed}`);
  console.log(`   –ù–µ—É–¥–∞—á–Ω—ã–µ: ${mockResponse.data.queues.failed}`);

  console.log('\nüîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏:');
  mockResponse.data.recentMetrics.processingTime.latest.forEach((metric, index) => {
    const time = new Date(metric.timestamp).toLocaleTimeString();
    console.log(`   ${index + 1}. ${metric.value}ms –≤ ${time}`);
  });

  console.log('\n‚ùå –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:');
  mockResponse.data.recentMetrics.errors.latest.forEach((error, index) => {
    const time = new Date(error.timestamp).toLocaleTimeString();
    console.log(`   ${index + 1}. ${error.type}: ${error.message} –≤ ${time}`);
  });

  // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –º–µ—Ç—Ä–∏–∫–∏
  console.log('\n\nüîç –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ GET /api/queue/metrics?type=processing_time:');
  
  const typeResponse = {
    success: true,
    data: {
      type: "processing_time",
      period: "24h",
      count: 45,
      metrics: [
        {
          id: "processing_time_1753614039701_1",
          value: 1200,
          metadata: { jobId: "job_123" },
          timestamp: "2025-07-27T15:30:00.000Z",
          expiresAt: "2025-08-03T15:30:00.000Z"
        },
        {
          id: "processing_time_1753614039701_2", 
          value: 2100,
          metadata: { jobId: "job_124" },
          timestamp: "2025-07-27T15:25:00.000Z",
          expiresAt: "2025-08-03T15:25:00.000Z"
        }
      ]
    },
    timestamp: "2025-07-27T15:30:15.123Z"
  };

  console.log(JSON.stringify(typeResponse, null, 2));

  console.log('\nüí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API:');
  console.log('   GET /api/queue/metrics - –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏');
  console.log('   GET /api/queue/metrics?period=12 - –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ 12 —á–∞—Å–æ–≤');
  console.log('   GET /api/queue/metrics?type=processing_time - –º–µ—Ç—Ä–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
  console.log('   GET /api/queue/metrics?limit=50 - –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π');
  console.log('   POST /api/queue/metrics?action=cleanup - –æ—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –º–µ—Ç—Ä–∏–∫–∏');

  console.log('\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
if (require.main === module) {
  demoMetricsResponse();
}

module.exports = { demoMetricsResponse };