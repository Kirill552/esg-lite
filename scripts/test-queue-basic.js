/**
 * –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç Queue Manager —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 */

require('dotenv').config();
const PgBoss = require('pg-boss');

async function testQueueBasic() {
  console.log('üîß –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç Queue Manager —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...');
  
  const host = process.env.DB_HOST;
  const port = parseInt(process.env.DB_PORT || '5432');
  const database = process.env.DB_NAME;
  const user = process.env.DB_USER;
  const password = process.env.DB_PASSWORD;
  
  if (!host || !database || !user || !password) {
    throw new Error('DB –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }
  
  const boss = new PgBoss({
    host,
    port,
    database,
    user,
    password,
    schema: 'pgboss',
    noSupervisor: true,
    noScheduling: true
  });
  
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ pg-boss...');
    await boss.start();
    console.log('‚úÖ pg-boss –∑–∞–ø—É—â–µ–Ω');
    
    // –¢–µ—Å—Ç –∑–∞–≥–ª—É—à–µ–∫ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
    console.log('üí≥ –¢–µ—Å—Ç –∑–∞–≥–ª—É—à–µ–∫ –∫—Ä–µ–¥–∏—Ç–æ–≤...');
    const organizationId = 'test-org-123';
    
    // –ó–∞–≥–ª—É—à–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
    function checkCreditsStub(orgId) {
      console.log(`üîß [STUB] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è ${orgId}: OK`);
      return true;
    }
    
    // –ó–∞–≥–ª—É—à–∫–∞ surge-pricing
    function isSurgePeriodStub() {
      const now = new Date();
      const month = now.getMonth() + 1;
      const day = now.getDate();
      const isSurge = month === 6 && day >= 15 && day <= 30;
      console.log(`üîß [STUB] Surge –ø–µ—Ä–∏–æ–¥: ${isSurge ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
      return isSurge;
    }
    
    // –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    console.log('üìã –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏...');
    
    const hasCredits = checkCreditsStub(organizationId);
    if (!hasCredits) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤');
    }
    
    const isSurge = isSurgePeriodStub();
    const priority = isSurge ? 20 : 5; // high : normal
    
    const jobData = {
      documentId: 'test-doc-123',
      fileKey: 'test-file.pdf',
      userId: 'test-user',
      organizationId: organizationId
    };
    
    const jobId = await boss.send('ocr-processing', jobData, {
      priority,
      retryLimit: 3,
      expireInHours: 1
    });
    
    console.log('‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID:', jobId);
    console.log('üìä –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:', priority, isSurge ? '(surge)' : '(normal)');
    
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('üìà –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π...');
    const queueSize = await boss.getQueueSize('ocr-processing');
    console.log('‚úÖ –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ ocr-processing:', queueSize);
    
    // –¢–µ—Å—Ç –∑–∞–≥–ª—É—à–∫–∏ —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤
    console.log('üí∞ –¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤...');
    function debitCreditsStub(orgId, amount) {
      const surgeMultiplier = isSurge ? 2 : 1;
      const totalAmount = amount * surgeMultiplier;
      console.log(`üîß [STUB] –°–ø–∏—Å–∞–Ω–∏–µ ${totalAmount} –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è ${orgId} (surge: x${surgeMultiplier})`);
      return true;
    }
    
    debitCreditsStub(organizationId, 1);
    
    console.log('üéâ –í—Å–µ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞:', error.message);
    throw error;
  } finally {
    await boss.stop();
    console.log('üõë pg-boss –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

testQueueBasic()
  .then(() => {
    console.log('‚úÖ –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ:', error.message);
    process.exit(1);
  });