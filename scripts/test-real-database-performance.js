/**
 * –†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î
 * –ó–∞–¥–∞—á–∞ 8.2: –°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: 4.1, 4.2
 */

require('dotenv').config();
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testRealDatabasePerformance() {
  console.log('üîß –†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î (–∑–∞–¥–∞—á–∞ 8.2)...');
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ –ë–î
    console.log('\nüìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ PostgreSQL...');
    
    const indexQuery = `
      SELECT 
        schemaname,
        tablename,
        indexname,
        indexdef
      FROM pg_indexes 
      WHERE tablename = 'documents' 
      AND schemaname = 'public'
      ORDER BY indexname;
    `;
    
    try {
      const indexes = await prisma.$queryRawUnsafe(indexQuery);
      console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –≤ —Ç–∞–±–ª–∏—Ü–µ documents:');
      indexes.forEach((index, i) => {
        console.log(`  ${i + 1}. ${index.indexname}`);
        console.log(`     ${index.indexdef}`);
        console.log('');
      });
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–¥–µ–∫—Å–∞—Ö:', error.message);
    }
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
    console.log('\nüìã –¢–µ—Å—Ç 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤...');
    
    const statsQuery = `
      SELECT 
        schemaname,
        tablename,
        indexname,
        idx_tup_read,
        idx_tup_fetch,
        idx_scan
      FROM pg_stat_user_indexes 
      WHERE tablename = 'documents'
      ORDER BY idx_scan DESC;
    `;
    
    try {
      const stats = await prisma.$queryRawUnsafe(statsQuery);
      console.log('üîç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤:');
      if (stats.length > 0) {
        stats.forEach((stat, i) => {
          console.log(`  ${i + 1}. ${stat.indexname}:`);
          console.log(`     –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: ${stat.idx_scan}`);
          console.log(`     –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${stat.idx_tup_read}`);
          console.log(`     –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${stat.idx_tup_fetch}`);
          console.log('');
        });
      } else {
        console.log('  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ —Å–æ–±—Ä–∞–Ω–∞ (–Ω–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã)');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω–¥–µ–∫—Å–æ–≤:', error.message);
    }
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ë–î
    console.log('\nüìã –¢–µ—Å—Ç 3: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      const totalDocs = await prisma.document.count();
      console.log(`üîç –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${totalDocs}`);
      
      if (totalDocs > 0) {
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        const statusStats = await prisma.document.groupBy({
          by: ['status'],
          _count: {
            id: true
          }
        });
        
        console.log('üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
        statusStats.forEach(stat => {
          console.log(`  ${stat.status}: ${stat._count.id} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);
        });
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ queueStatus
        const queueStats = await prisma.document.groupBy({
          by: ['queueStatus'],
          _count: {
            id: true
          },
          where: {
            queueStatus: {
              not: null
            }
          }
        });
        
        if (queueStats.length > 0) {
          console.log('üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –æ—á–µ—Ä–µ–¥–∏:');
          queueStats.forEach(stat => {
            console.log(`  ${stat.queueStatus}: ${stat._count.id} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);
          });
        }
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
    }
    
    // –¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('\nüìã –¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤...');
    
    const performanceTests = [
      {
        name: '–ü–æ–∏—Å–∫ –ø–æ jobId',
        query: async () => {
          const start = Date.now();
          await prisma.document.findFirst({
            where: { jobId: 'test-job-id-that-does-not-exist' }
          });
          return Date.now() - start;
        }
      },
      {
        name: '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ queueStatus',
        query: async () => {
          const start = Date.now();
          await prisma.document.findMany({
            where: { queueStatus: 'ACTIVE' },
            take: 10
          });
          return Date.now() - start;
        }
      },
      {
        name: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ createdAt',
        query: async () => {
          const start = Date.now();
          await prisma.document.findMany({
            orderBy: { createdAt: 'desc' },
            take: 10
          });
          return Date.now() - start;
        }
      },
      {
        name: '–°–æ—Å—Ç–∞–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å userId + queueStatus',
        query: async () => {
          const start = Date.now();
          await prisma.document.findMany({
            where: {
              userId: 'test-user-id',
              queueStatus: 'COMPLETED'
            },
            take: 10
          });
          return Date.now() - start;
        }
      }
    ];
    
    console.log('üîç –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:');
    
    for (const test of performanceTests) {
      try {
        const executionTime = await test.query();
        let performance = '–æ—Ç–ª–∏—á–Ω–∞—è';
        if (executionTime > 50) performance = '—Ö–æ—Ä–æ—à–∞—è';
        if (executionTime > 200) performance = '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è';
        if (executionTime > 1000) performance = '—Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏';
        
        console.log(`  ${test.name}: ${executionTime}ms (${performance})`);
      } catch (error) {
        console.log(`  ${test.name}: –æ—à–∏–±–∫–∞ - ${error.message}`);
      }
    }
    
    // –¢–µ—Å—Ç 5: EXPLAIN ANALYZE –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('\nüìã –¢–µ—Å—Ç 5: –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤...');
    
    const explainQueries = [
      {
        name: '–ü–æ–∏—Å–∫ –ø–æ jobId',
        sql: `EXPLAIN ANALYZE SELECT * FROM documents WHERE job_id = 'test-job-id'`
      },
      {
        name: '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ queueStatus',
        sql: `EXPLAIN ANALYZE SELECT * FROM documents WHERE queue_status = 'ACTIVE' LIMIT 10`
      }
    ];
    
    console.log('üîç –ü–ª–∞–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:');
    
    for (const query of explainQueries) {
      try {
        console.log(`\n  ${query.name}:`);
        const result = await prisma.$queryRawUnsafe(query.sql);
        result.forEach(row => {
          console.log(`    ${row['QUERY PLAN']}`);
        });
      } catch (error) {
        console.log(`    –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
      }
    }
    
    console.log('\n‚úÖ –†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log('  ‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã –≤ PostgreSQL');
    console.log('  ‚úÖ –ó–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω–¥–µ–∫—Å–æ–≤');
    console.log('  ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º');
    
    console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('  ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤');
    console.log('  ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞–±–ª–∏—Ü (ANALYZE)');
    console.log('  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ EXPLAIN ANALYZE –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤');
    console.log('  ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testRealDatabasePerformance();