/**
 * –¢–µ—Å—Ç Health Monitor –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * –ó–∞–¥–∞—á–∞ 7.1: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å Health Monitor –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: 3.1, 3.2, 3.3
 */

require('dotenv').config();

async function testHealthMonitor() {
  console.log('üîß –¢–µ—Å—Ç Health Monitor –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–∑–∞–¥–∞—á–∞ 7.1)...');
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –æ—á–µ—Ä–µ–¥–µ–π (PostgreSQL)
    console.log('\nüìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è PostgreSQL...');
    
    function simulateQueueStorageHealth(scenario = 'healthy') {
      console.log(`üîç checkQueueStorageHealth() - —Å—Ü–µ–Ω–∞—Ä–∏–π: ${scenario}`);
      
      const scenarios = {
        healthy: {
          status: 'healthy',
          message: 'PostgreSQL —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—á–µ—Ä–µ–¥–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ',
          connectionTime: 45,
          version: 'PostgreSQL 14.9',
          memoryUsage: 25.5
        },
        warning: {
          status: 'warning',
          message: '–ú–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL (1200ms)',
          connectionTime: 1200,
          memoryUsage: 45.2
        },
        critical: {
          status: 'critical',
          message: '–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π PostgreSQL (85.0%)',
          connectionTime: 800,
          memoryUsage: 85.0
        },
        unhealthy: {
          status: 'unhealthy',
          message: 'PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: connection timeout',
          connectionTime: 5000
        }
      };
      
      return {
        ...scenarios[scenario],
        timestamp: new Date().toISOString()
      };
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    ['healthy', 'warning', 'critical', 'unhealthy'].forEach(scenario => {
      const result = simulateQueueStorageHealth(scenario);
      console.log(`  ${scenario}: ${result.status} - ${result.message}`);
      if (result.connectionTime) {
        console.log(`    –í—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${result.connectionTime}ms`);
      }
      if (result.memoryUsage) {
        console.log(`    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${result.memoryUsage}%`);
      }
    });
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á
    console.log('\nüìã –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –æ—á–µ—Ä–µ–¥–∏...');
    
    function simulateQueueHealth(scenario = 'healthy') {
      console.log(`üîç checkQueueHealth() - —Å—Ü–µ–Ω–∞—Ä–∏–π: ${scenario}`);
      
      const scenarios = {
        healthy: {
          status: 'healthy',
          message: '–û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ',
          stats: {
            waiting: 5,
            active: 2,
            completed: 150,
            failed: 3,
            total: 160
          }
        },
        warning: {
          status: 'warning',
          message: '–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –æ—á–µ—Ä–µ–¥—å (120 –∑–∞–¥–∞—á –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ)',
          stats: {
            waiting: 100,
            active: 20,
            completed: 500,
            failed: 25,
            total: 645
          }
        },
        critical: {
          status: 'critical',
          message: '–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏ (15.5%)',
          stats: {
            waiting: 50,
            active: 10,
            completed: 200,
            failed: 40,
            total: 300
          }
        },
        unhealthy: {
          status: 'unhealthy',
          message: '–û—á–µ—Ä–µ–¥—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: Queue connection failed',
          stats: {
            waiting: 0,
            active: 0,
            completed: 0,
            failed: 0,
            total: 0
          }
        }
      };
      
      return {
        ...scenarios[scenario],
        timestamp: new Date().toISOString()
      };
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ—á–µ—Ä–µ–¥–∏
    ['healthy', 'warning', 'critical', 'unhealthy'].forEach(scenario => {
      const result = simulateQueueHealth(scenario);
      const stats = result.stats;
      console.log(`  ${scenario}: ${result.status} - ${result.message}`);
      console.log(`    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ–∂–∏–¥–∞—é—Ç ${stats.waiting}, –∞–∫—Ç–∏–≤–Ω—ã—Ö ${stats.active}, –∑–∞–≤–µ—Ä—à–µ–Ω–æ ${stats.completed}, –æ—à–∏–±–æ–∫ ${stats.failed}`);
    });
    
    // –¢–µ—Å—Ç 3: –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
    console.log('\nüìã –¢–µ—Å—Ç 3: –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã...');
    
    function simulateOverallHealth(components) {
      console.log('üîç getOverallHealth() - –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞');
      
      const { queueStorage, queue, database } = components;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
      const statuses = [queueStorage.status, queue.status, database.status];
      let overallStatus = 'healthy';
      
      if (statuses.includes('unhealthy')) {
        overallStatus = 'unhealthy';
      } else if (statuses.includes('critical')) {
        overallStatus = 'critical';
      } else if (statuses.includes('warning')) {
        overallStatus = 'warning';
      }
      
      const criticalIssues = statuses.filter(s => s === 'critical' || s === 'unhealthy').length;
      const warnings = statuses.filter(s => s === 'warning').length;
      const totalIssues = criticalIssues + warnings;
      
      return {
        status: overallStatus,
        timestamp: new Date().toISOString(),
        components: {
          queueStorage,
          queue,
          database
        },
        summary: {
          totalIssues,
          criticalIssues,
          warnings
        }
      };
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
    const testCases = [
      {
        name: '–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–¥–æ—Ä–æ–≤—ã',
        components: {
          queueStorage: { status: 'healthy' },
          queue: { status: 'healthy' },
          database: { status: 'healthy' }
        }
      },
      {
        name: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏',
        components: {
          queueStorage: { status: 'healthy' },
          queue: { status: 'warning' },
          database: { status: 'healthy' }
        }
      },
      {
        name: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –ë–î',
        components: {
          queueStorage: { status: 'healthy' },
          queue: { status: 'healthy' },
          database: { status: 'critical' }
        }
      },
      {
        name: '–°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
        components: {
          queueStorage: { status: 'unhealthy' },
          queue: { status: 'unhealthy' },
          database: { status: 'healthy' }
        }
      }
    ];
    
    testCases.forEach(testCase => {
      const result = simulateOverallHealth(testCase.components);
      console.log(`  ${testCase.name}: ${result.status}`);
      console.log(`    –ü—Ä–æ–±–ª–µ–º: ${result.summary.totalIssues} (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: ${result.summary.criticalIssues}, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${result.summary.warnings})`);
    });
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã Health Monitor –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìä –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:');
    console.log('  ‚úÖ 3.1: Endpoint /api/queue/health –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á');
    console.log('  ‚úÖ 3.2: –ü–æ–∫–∞–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á');
    console.log('  ‚úÖ 3.3: –°—Ç–∞—Ç—É—Å "unhealthy" –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
    
    console.log('\nüîß –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã:');
    console.log('  ‚úÖ checkQueueStorageHealth() - –ø—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL');
    console.log('  ‚úÖ checkQueueHealth() - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á');
    console.log('  ‚úÖ checkDatabaseHealth() - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î');
    console.log('  ‚úÖ getOverallHealth() - –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã');
    console.log('  ‚úÖ quickHealthCheck() - –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏');
    
    console.log('\nüìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–∞–µ—Ç:');
    console.log('  ‚Ä¢ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
    console.log('  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤');
    console.log('  ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏');
    console.log('  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏');
    console.log('  ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫');
    console.log('  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testHealthMonitor();