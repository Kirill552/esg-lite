/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
 */

require('dotenv').config();
const { Client } = require('pg');
const fs = require('fs');
const path = require('path');

async function runMigration() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  const client = new Client({
    connectionString: process.env.DATABASE_URL
  });

  try {
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ');

    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏
    const migrationPath = path.join(__dirname, 'add-missing-fields.sql');
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
    
    console.log('üìÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —É—á–∏—Ç—ã–≤–∞—è DO –±–ª–æ–∫–∏
    const commands = [];
    let currentCommand = '';
    let inDoBlock = false;
    
    const lines = migrationSQL.split('\n');
    
    for (const line of lines) {
      const trimmedLine = line.trim();
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (trimmedLine.startsWith('--') || trimmedLine === '') {
        continue;
      }
      
      currentCommand += line + '\n';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ DO –±–ª–æ–∫–∞
      if (trimmedLine.includes('DO $$')) {
        inDoBlock = true;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–µ—Ü DO –±–ª–æ–∫–∞
      if (inDoBlock && trimmedLine.includes('END $$;')) {
        inDoBlock = false;
        commands.push(currentCommand.trim());
        currentCommand = '';
        continue;
      }
      
      // –ï—Å–ª–∏ –Ω–µ –≤ DO –±–ª–æ–∫–µ –∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ;
      if (!inDoBlock && trimmedLine.endsWith(';') && !trimmedLine.includes('DO $$')) {
        commands.push(currentCommand.trim());
        currentCommand = '';
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–º–∞–Ω–¥—É –µ—Å–ª–∏ –µ—Å—Ç—å
    if (currentCommand.trim()) {
      commands.push(currentCommand.trim());
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const filteredCommands = commands.filter(cmd => cmd.length > 0 && cmd !== 'COMMIT');

    for (let i = 0; i < filteredCommands.length; i++) {
      const command = filteredCommands[i];
      if (command.trim()) {
        try {
          console.log(`  ${i + 1}/${filteredCommands.length}: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã...`);
          console.log(`    ${command.substring(0, 60)}...`);
          await client.query(command);
          console.log(`  ‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        } catch (error) {
          if (error.message.includes('already exists') || 
              error.message.includes('already has value') ||
              error.message.includes('duplicate key') ||
              error.message.includes('does not exist')) {
            console.log(`  ‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –ø—Ä–æ–ø—É—â–µ–Ω–∞: ${error.message.split('\n')[0]}`);
          } else {
            console.error(`  ‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${i + 1}:`, error.message);
            console.error(`  –ö–æ–º–∞–Ω–¥–∞: ${command.substring(0, 200)}...`);
            throw error;
          }
        }
      }
    }

    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ documents
    const documentsResult = await client.query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'documents' AND column_name IN ('processingProgress', 'processingStage', 'processingMessage', 'jobId')
      ORDER BY column_name;
    `);
    
    console.log('üìÑ –ù–æ–≤—ã–µ –ø–æ–ª—è –≤ documents:', documentsResult.rows.map(r => r.column_name));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' AND table_name IN ('credits', 'credit_transactions', 'rate_limits')
      ORDER BY table_name;
    `);
    
    console.log('üóÇÔ∏è –ù–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã:', tablesResult.rows.map(r => r.table_name));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º enum DocumentStatus
    const enumResult = await client.query(`
      SELECT enumlabel 
      FROM pg_enum 
      WHERE enumtypid = (SELECT oid FROM pg_type WHERE typname = 'DocumentStatus')
      ORDER BY enumlabel;
    `);
    
    console.log('üìã DocumentStatus enum:', enumResult.rows.map(r => r.enumlabel));

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  } finally {
    await client.end();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
runMigration()
  .then(() => {
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  });