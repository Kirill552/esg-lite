/**
 * –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î
 */

require('dotenv').config();
const { Client } = require('pg');
const fs = require('fs');
const path = require('path');

async function runSimpleMigration() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  const client = new Client({
    connectionString: process.env.DATABASE_URL
  });

  try {
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ');

    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏
    const migrationPath = path.join(__dirname, 'add-report-snapshots.sql');
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
    
    console.log('üìÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–ø–æ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π)
    const commands = migrationSQL
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));

    for (let i = 0; i < commands.length; i++) {
      const command = commands[i];
      if (command.trim()) {
        try {
          console.log(`  ${i + 1}/${commands.length}: ${command.substring(0, 50)}...`);
          await client.query(command);
          console.log(`  ‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        } catch (error) {
          if (error.message.includes('already exists') || 
              error.message.includes('already has value') ||
              error.message.includes('duplicate key') ||
              error.message.includes('does not exist') ||
              error.message.includes('IF NOT EXISTS')) {
            console.log(`  ‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –ø—Ä–æ–ø—É—â–µ–Ω–∞: ${error.message.split('\n')[0]}`);
          } else {
            console.error(`  ‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${i + 1}:`, error.message);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
          }
        }
      }
    }

    console.log('\nüéâ –ü—Ä–æ—Å—Ç–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ documents
    const documentsResult = await client.query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'documents' AND column_name IN ('processingProgress', 'processingStage', 'processingMessage', 'jobId')
      ORDER BY column_name;
    `);
    
    console.log('üìÑ –ù–æ–≤—ã–µ –ø–æ–ª—è –≤ documents:', documentsResult.rows.map(r => r.column_name));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' AND table_name IN ('credits', 'credit_transactions', 'rate_limits')
      ORDER BY table_name;
    `);
    
    console.log('üóÇÔ∏è –ù–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã:', tablesResult.rows.map(r => r.table_name));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º enum DocumentStatus
    const enumResult = await client.query(`
      SELECT enumlabel 
      FROM pg_enum 
      WHERE enumtypid = (SELECT oid FROM pg_type WHERE typname = 'DocumentStatus')
      ORDER BY enumlabel;
    `);
    
    console.log('üìã DocumentStatus enum:', enumResult.rows.map(r => r.enumlabel));

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüí∞ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∫—Ä–µ–¥–∏—Ç–æ–≤...');
    const insertResult = await client.query(`
      INSERT INTO credits ("userId", balance, "totalPurchased", "totalUsed", "createdAt", "updatedAt")
      SELECT id, 1000, 1000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
      FROM users
      WHERE id NOT IN (SELECT "userId" FROM credits WHERE "userId" IS NOT NULL)
      ON CONFLICT ("userId") DO NOTHING;
    `);
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${insertResult.rowCount} –∑–∞–ø–∏—Å–µ–π –∫—Ä–µ–¥–∏—Ç–æ–≤`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  } finally {
    await client.end();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
runSimpleMigration()
  .then(() => {
    console.log('‚úÖ –ü—Ä–æ—Å—Ç–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  });