/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ TypeScript –º–æ–¥—É–ª–µ–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤ –∏ –±–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 */

require('dotenv').config();
const fs = require('fs');
const path = require('path');

async function testBasicLogging() {
  console.log('üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    console.log(`   LOG_LEVEL: ${process.env.LOG_LEVEL || 'info'}`);
    console.log(`   LOG_TO_FILE: ${process.env.LOG_TO_FILE || 'false'}`);
    console.log(`   LOG_DIRECTORY: ${process.env.LOG_DIRECTORY || './logs'}`);
    console.log(`   LOG_MAX_FILE_SIZE: ${process.env.LOG_MAX_FILE_SIZE || '10485760'}`);
    console.log(`   LOG_MAX_FILES: ${process.env.LOG_MAX_FILES || '5'}`);

    // 2. –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const logDir = process.env.LOG_DIRECTORY || './logs';
    if (process.env.LOG_TO_FILE === 'true') {
      console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤...');
      
      if (!fs.existsSync(logDir)) {
        fs.mkdirSync(logDir, { recursive: true });
        console.log(`   ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${logDir}`);
      } else {
        console.log(`   ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${logDir}`);
      }
    }

    // 3. –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞
    if (process.env.LOG_TO_FILE === 'true') {
      console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ —Ñ–∞–π–ª...');
      
      const testLogFile = path.join(logDir, 'test-log.log');
      const logEntry = {
        timestamp: new Date().toISOString(),
        level: 'info',
        component: 'test',
        message: 'Test log entry',
        data: { test: true }
      };
      
      fs.appendFileSync(testLogFile, JSON.stringify(logEntry) + '\n');
      console.log(`   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥ –∑–∞–ø–∏—Å–∞–Ω: ${testLogFile}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
      const stats = fs.statSync(testLogFile);
      console.log(`   üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${stats.size} –±–∞–π—Ç`);
    }

    // 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ª–æ–≥–∞
    console.log('\n4Ô∏è‚É£ –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ª–æ–≥–∞:');
    const exampleLog = {
      timestamp: new Date().toISOString(),
      level: 'info',
      component: 'queue-manager',
      message: 'OCR job started',
      jobId: 'job123',
      organizationId: 'org456',
      data: {
        documentId: 'doc789',
        priority: 'normal',
        fileSize: 1024
      }
    };
    console.log(JSON.stringify(exampleLog, null, 2));

    // 5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–∞ –æ—à–∏–±–∫–∏
    console.log('\n5Ô∏è‚É£ –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∞ –æ—à–∏–±–∫–∏:');
    const errorLog = {
      timestamp: new Date().toISOString(),
      level: 'error',
      component: 'ocr-worker',
      message: 'Job processing failed',
      jobId: 'job123',
      error: {
        name: 'ProcessingError',
        message: 'Failed to process document',
        stack: 'ProcessingError: Failed to process document\n    at processOcr (worker.js:123:45)'
      },
      data: {
        attempt: 2,
        maxAttempts: 3
      }
    };
    console.log(JSON.stringify(errorLog, null, 2));

    console.log('\nüéâ –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!');

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testBasicLogging()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { testBasicLogging };
