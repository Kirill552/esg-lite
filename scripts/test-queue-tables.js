/**
 * –¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü PostgreSQL –æ—á–µ—Ä–µ–¥–µ–π –∏ cleanup –ø—Ä–æ—Ü–µ–¥—É—Ä
 * –ó–∞–¥–∞—á–∞ 8.3: –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è PostgreSQL –æ—á–µ—Ä–µ–¥–µ–π
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: 5.2, 6.3
 */

require('dotenv').config();

async function testQueueTables() {
  console.log('üîß –¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü PostgreSQL –æ—á–µ—Ä–µ–¥–µ–π (–∑–∞–¥–∞—á–∞ 8.3)...');
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    console.log('\nüìã –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—á–µ—Ä–µ–¥–µ–π...');
    
    const tables = [
      {
        name: 'queue_jobs',
        description: '–û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –æ—á–µ—Ä–µ–¥–∏',
        fields: [
          'id - UUID –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏',
          'name - –ò–º—è –æ—á–µ—Ä–µ–¥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "ocr-processing")',
          'data - JSON –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏',
          'priority - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ (0 = –Ω–∏–∑–∫–∏–π, –≤—ã—à–µ = –≤–∞–∂–Ω–µ–µ)',
          'state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á–∏ (CREATED, ACTIVE, COMPLETED, etc.)',
          'retryLimit - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤',
          'retryCount - –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤',
          'startAfter - –í—Ä–µ–º—è, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ',
          'startedOn - –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
          'completedOn - –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è',
          'keepUntil - –í—Ä–µ–º—è, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á—É',
          'output - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏',
          'singletonKey - –ö–ª—é—á –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á'
        ]
      },
      {
        name: 'queue_job_logs',
        description: '–¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ª–æ–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á',
        fields: [
          'id - UUID –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–æ–≥–∞',
          'jobId - –°–≤—è–∑—å —Å –∑–∞–¥–∞—á–µ–π',
          'level - –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∞ (DEBUG, INFO, WARN, ERROR)',
          'message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è',
          'data - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON',
          'createdOn - –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–∞'
        ]
      }
    ];
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü:');
    tables.forEach((table, i) => {
      console.log(`  ${i + 1}. ${table.name}:`);
      console.log(`     –û–ø–∏—Å–∞–Ω–∏–µ: ${table.description}`);
      console.log(`     –ü–æ–ª—è:`);
      table.fields.forEach(field => {
        console.log(`       ‚Ä¢ ${field}`);
      });
      console.log('');
    });
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    console.log('\nüìã –¢–µ—Å—Ç 2: –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
    
    const indexes = [
      {
        table: 'queue_jobs',
        indexes: [
          'name - –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –æ—á–µ—Ä–µ–¥–∏',
          'state - –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é',
          'priority - –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É',
          'name + state - —Å–æ—Å—Ç–∞–≤–Ω–æ–π –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏',
          'startAfter - –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á',
          'createdOn - –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è',
          'completedOn - –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á',
          'singletonKey - –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á',
          'keepUntil - –¥–ª—è cleanup –ø—Ä–æ—Ü–µ–¥—É—Ä'
        ]
      },
      {
        table: 'queue_job_logs',
        indexes: [
          'jobId - –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ª–æ–≥–æ–≤ –∑–∞–¥–∞—á–∏',
          'level - –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è',
          'createdOn - –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ª–æ–≥–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏'
        ]
      }
    ];
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤:');
    indexes.forEach(tableInfo => {
      console.log(`  ${tableInfo.table}:`);
      tableInfo.indexes.forEach(index => {
        console.log(`    ‚úÖ ${index}`);
      });
      console.log('');
    });
    
    // –¢–µ—Å—Ç 3: Enum —Ç–∏–ø—ã –¥–ª—è –æ—á–µ—Ä–µ–¥–µ–π
    console.log('\nüìã –¢–µ—Å—Ç 3: Enum —Ç–∏–ø—ã –¥–ª—è –æ—á–µ—Ä–µ–¥–µ–π...');
    
    const enums = [
      {
        name: 'QueueJobState',
        values: ['CREATED', 'RETRY', 'ACTIVE', 'COMPLETED', 'EXPIRED', 'CANCELLED', 'FAILED'],
        description: '–°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏'
      },
      {
        name: 'QueueLogLevel',
        values: ['DEBUG', 'INFO', 'WARN', 'ERROR'],
        description: '–£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è'
      }
    ];
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ enum —Ç–∏–ø–æ–≤:');
    enums.forEach(enumInfo => {
      console.log(`  ${enumInfo.name} (${enumInfo.description}):`);
      enumInfo.values.forEach(value => {
        console.log(`    ‚Ä¢ ${value}`);
      });
      console.log('');
    });
    
    // –¢–µ—Å—Ç 4: –°–∏–º—É–ª—è—Ü–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∑–∞–¥–∞—á–∏
    console.log('\nüìã –¢–µ—Å—Ç 4: –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏...');
    
    function simulateJobLifecycle() {
      console.log('üîç –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏:');
      
      const lifecycle = [
        {
          stage: '1. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏',
          data: {
            name: 'ocr-processing',
            data: { documentId: 'doc-123', fileName: 'invoice.pdf' },
            priority: 0,
            state: 'CREATED',
            retryLimit: 3,
            retryCount: 0,
            startAfter: new Date(),
            createdOn: new Date()
          }
        },
        {
          stage: '2. –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
          data: {
            state: 'ACTIVE',
            startedOn: new Date()
          },
          log: {
            level: 'INFO',
            message: '–ó–∞–¥–∞—á–∞ OCR –Ω–∞—á–∞—Ç–∞',
            data: { stage: 'starting' }
          }
        },
        {
          stage: '3. –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
          log: {
            level: 'INFO',
            message: 'OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞: 50%',
            data: { progress: 50 }
          }
        },
        {
          stage: '4. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏',
          data: {
            state: 'COMPLETED',
            completedOn: new Date(),
            output: {
              success: true,
              text: '–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç...',
              confidence: 0.95
            },
            keepUntil: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // 7 –¥–Ω–µ–π
          },
          log: {
            level: 'INFO',
            message: 'OCR –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
            data: { confidence: 0.95, textLength: 1500 }
          }
        }
      ];
      
      lifecycle.forEach(step => {
        console.log(`  ${step.stage}:`);
        if (step.data) {
          Object.entries(step.data).forEach(([key, value]) => {
            const displayValue = value instanceof Date ? value.toISOString() : 
                               typeof value === 'object' ? JSON.stringify(value) : value;
            console.log(`    ${key}: ${displayValue}`);
          });
        }
        if (step.log) {
          console.log(`    –õ–æ–≥: [${step.log.level}] ${step.log.message}`);
          if (step.log.data) {
            console.log(`         –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(step.log.data)}`);
          }
        }
        console.log('');
      });
    }
    
    simulateJobLifecycle();
    
    // –¢–µ—Å—Ç 5: Cleanup –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
    console.log('\nüìã –¢–µ—Å—Ç 5: Cleanup –ø—Ä–æ—Ü–µ–¥—É—Ä—ã...');
    
    const cleanupScenarios = [
      {
        name: '–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á',
        description: '–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ COMPLETED —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π',
        sql: `DELETE FROM queue_jobs WHERE state = 'COMPLETED' AND completed_on < NOW() - INTERVAL '7 days'`,
        frequency: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ'
      },
      {
        name: '–û—á–∏—Å—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á',
        description: '–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FAILED —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π',
        sql: `DELETE FROM queue_jobs WHERE state = 'FAILED' AND completed_on < NOW() - INTERVAL '30 days'`,
        frequency: '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'
      },
      {
        name: '–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤',
        description: '–£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ 3 –¥–Ω–µ–π',
        sql: `DELETE FROM queue_job_logs WHERE created_on < NOW() - INTERVAL '3 days'`,
        frequency: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ'
      },
      {
        name: '–û—á–∏—Å—Ç–∫–∞ –ø–æ keepUntil',
        description: '–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á —Å –∏—Å—Ç–µ–∫—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏—è',
        sql: `DELETE FROM queue_jobs WHERE keep_until IS NOT NULL AND keep_until < NOW()`,
        frequency: '–ö–∞–∂–¥—ã–π —á–∞—Å'
      },
      {
        name: '–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á',
        description: '–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è',
        sql: `DELETE FROM queue_jobs WHERE state = 'CANCELLED' AND completed_on < NOW() - INTERVAL '1 day'`,
        frequency: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ'
      }
    ];
    
    console.log('üîç Cleanup –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:');
    cleanupScenarios.forEach((scenario, i) => {
      console.log(`  ${i + 1}. ${scenario.name}:`);
      console.log(`     –û–ø–∏—Å–∞–Ω–∏–µ: ${scenario.description}`);
      console.log(`     –ß–∞—Å—Ç–æ—Ç–∞: ${scenario.frequency}`);
      console.log(`     SQL: ${scenario.sql}`);
      console.log('');
    });
    
    // –¢–µ—Å—Ç 6: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    console.log('\nüìã –¢–µ—Å—Ç 6: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã...');
    
    const optimizedQueries = [
      {
        name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏',
        sql: `SELECT * FROM queue_jobs 
              WHERE name = $1 AND state = 'CREATED' AND start_after <= NOW()
              ORDER BY priority DESC, created_on ASC 
              LIMIT 1`,
        indexes: ['name + state', 'priority', 'createdOn']
      },
      {
        name: '–ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ —Ç–∏–ø—É',
        sql: `SELECT name, COUNT(*) as active_count 
              FROM queue_jobs 
              WHERE state = 'ACTIVE' 
              GROUP BY name`,
        indexes: ['state', 'name']
      },
      {
        name: '–ü–æ–∏—Å–∫ –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –∑–∞–¥–∞—á',
        sql: `SELECT * FROM queue_jobs 
              WHERE state = 'ACTIVE' AND started_on < NOW() - INTERVAL '10 minutes'`,
        indexes: ['state', 'startedOn']
      },
      {
        name: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞ –¥–µ–Ω—å',
        sql: `SELECT name, COUNT(*) as completed_today
              FROM queue_jobs 
              WHERE state = 'COMPLETED' AND completed_on >= CURRENT_DATE
              GROUP BY name`,
        indexes: ['state', 'completedOn', 'name']
      },
      {
        name: '–õ–æ–≥–∏ –æ—à–∏–±–æ–∫ –¥–ª—è –∑–∞–¥–∞—á–∏',
        sql: `SELECT * FROM queue_job_logs 
              WHERE job_id = $1 AND level = 'ERROR' 
              ORDER BY created_on DESC`,
        indexes: ['jobId', 'level', 'createdOn']
      }
    ];
    
    console.log('üîç –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:');
    optimizedQueries.forEach((query, i) => {
      console.log(`  ${i + 1}. ${query.name}:`);
      console.log(`     –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω–¥–µ–∫—Å—ã: [${query.indexes.join(', ')}]`);
      console.log(`     SQL: ${query.sql.replace(/\\s+/g, ' ').trim()}`);
      console.log('');
    });
    
    console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Ç–∞–±–ª–∏—Ü PostgreSQL –æ—á–µ—Ä–µ–¥–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìä –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:');
    console.log('  ‚úÖ 5.2: –¢–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –∏ –ª–æ–≥–æ–≤ –≤ PostgreSQL');
    console.log('  ‚úÖ 6.3: Cleanup –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á');
    
    console.log('\nüîß –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
    console.log('  ‚úÖ queue_jobs - –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á —Å 9 –∏–Ω–¥–µ–∫—Å–∞–º–∏');
    console.log('  ‚úÖ queue_job_logs - —Ç–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ —Å 3 –∏–Ω–¥–µ–∫—Å–∞–º–∏');
    
    console.log('\nüìà –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:');
    console.log('  ‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–∏—Å–∫ –∑–∞–¥–∞—á');
    console.log('  ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
    console.log('  ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    console.log('  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    console.log('  ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á (singleton)');
    console.log('  ‚Ä¢ –ì–∏–±–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è');
    
    console.log('\nüéØ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:');
    console.log('  ‚Ä¢ –ü–æ–∏—Å–∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏: ~1-5ms');
    console.log('  ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: ~1-2ms');
    console.log('  ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤: ~5-10ms');
    console.log('  ‚Ä¢ Cleanup –æ–ø–µ—Ä–∞—Ü–∏–∏: ~100-500ms');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testQueueTables();