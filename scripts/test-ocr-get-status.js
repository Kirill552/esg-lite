/**
 * –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ GET /api/ocr –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á
 * –ó–∞–¥–∞—á–∞ 6.2: –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á –≤ BullMQ
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: 4.1, 4.2, 4.3
 */

require('dotenv').config();

async function testOcrGetStatus() {
  console.log('üîß –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ GET /api/ocr (–∑–∞–¥–∞—á–∞ 6.2)...');
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ jobId (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ 4.1)
    console.log('\nüìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ jobId...');
    
    function simulateJobStatusCheck(jobId, userId, hasAccess = true, jobExists = true) {
      console.log(`üîç GET /api/ocr?jobId=${jobId}`);
      
      if (!jobExists) {
        return {
          status: 404,
          response: {
            success: false,
            error: 'Job not found in queue',
            code: 'JOB_NOT_FOUND'
          }
        };
      }
      
      if (!hasAccess) {
        return {
          status: 403,
          response: {
            success: false,
            error: 'Access denied to this job',
            code: 'ACCESS_DENIED'
          }
        };
      }
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á
      const jobStatuses = {
        'job-waiting': { 
          status: 'waiting', 
          progress: 0,
          createdAt: new Date().toISOString()
        },
        'job-active': { 
          status: 'active', 
          progress: 65,
          createdAt: new Date().toISOString(),
          processedAt: new Date().toISOString()
        },
        'job-completed': { 
          status: 'completed', 
          progress: 100,
          createdAt: new Date().toISOString(),
          processedAt: new Date().toISOString(),
          finishedAt: new Date().toISOString(),
          result: {
            text: '–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞...',
            textLength: 1500,
            confidence: 0.95,
            processedAt: new Date().toISOString()
          }
        },
        'job-failed': { 
          status: 'failed', 
          progress: 0,
          createdAt: new Date().toISOString(),
          processedAt: new Date().toISOString(),
          finishedAt: new Date().toISOString(),
          error: 'OCR processing failed: file corrupted'
        }
      };
      
      const jobStatus = jobStatuses[jobId] || jobStatuses['job-waiting'];
      
      return {
        status: 200,
        response: {
          success: true,
          data: {
            jobId,
            status: mapQueueStatusToApiStatus(jobStatus.status),
            progress: jobStatus.progress,
            priority: 'normal',
            createdAt: jobStatus.createdAt,
            processedAt: jobStatus.processedAt,
            finishedAt: jobStatus.finishedAt,
            document: {
              id: 'doc-123',
              fileName: 'test-document.pdf',
              fileSize: 1024000,
              dbStatus: 'PROCESSING',
              processingProgress: jobStatus.progress,
              processingStage: jobStatus.status,
              processingMessage: `–ó–∞–¥–∞—á–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ ${jobStatus.status}`
            },
            ocrResults: jobStatus.result ? {
              text: jobStatus.result.text,
              textLength: jobStatus.result.textLength,
              confidence: jobStatus.result.confidence,
              processedAt: jobStatus.result.processedAt,
              textPreview: jobStatus.result.text.substring(0, 200) + '...'
            } : null,
            error: jobStatus.error ? {
              message: jobStatus.error,
              code: 'QUEUE_ERROR',
              retryable: true,
              occurredAt: jobStatus.finishedAt
            } : null,
            metadata: {
              documentId: 'doc-123',
              fileKey: 'uploads/test-document.pdf',
              userId,
              organizationId: 'org-123'
            }
          }
        }
      };
    }
    
    function mapQueueStatusToApiStatus(queueStatus) {
      switch (queueStatus) {
        case 'waiting': return 'queued';
        case 'active': return 'processing';
        case 'completed': return 'completed';
        case 'failed': return 'failed';
        default: return 'unknown';
      }
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á
    const jobTestCases = [
      { jobId: 'job-waiting', expected: 'queued' },
      { jobId: 'job-active', expected: 'processing' },
      { jobId: 'job-completed', expected: 'completed' },
      { jobId: 'job-failed', expected: 'failed' }
    ];
    
    jobTestCases.forEach(testCase => {
      const result = simulateJobStatusCheck(testCase.jobId, 'user1');
      const data = result.response.data;
      console.log(`  ${testCase.jobId}: ${data.status} (${data.progress}%)`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã OCR –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ 4.2)
      if (data.ocrResults) {
        console.log(`    OCR: ${data.ocrResults.textLength} —Å–∏–º–≤–æ–ª–æ–≤, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ${data.ocrResults.confidence}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ 4.3)
      if (data.error) {
        console.log(`    –û—à–∏–±–∫–∞: ${data.error.message} (${data.error.code})`);
      }
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    const notFoundResult = simulateJobStatusCheck('job-nonexistent', 'user1', true, false);
    console.log(`  –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–¥–∞—á–∞: ${notFoundResult.status} - ${notFoundResult.response.code}`);
    
    const accessDeniedResult = simulateJobStatusCheck('job-waiting', 'user1', false, true);
    console.log(`  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞: ${accessDeniedResult.status} - ${accessDeniedResult.response.code}`);
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã GET /api/ocr –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìä –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:');
    console.log('  ‚úÖ 4.1: –í–æ–∑–≤—Ä–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (queued/processing/completed/failed)');
    console.log('  ‚úÖ 4.2: –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á');
    console.log('  ‚úÖ 4.3: –í–æ–∑–≤—Ä–∞—Ç –æ–ø–∏—Å–∞–Ω–∏—è –æ—à–∏–±–∫–∏ –∏ –∫–æ–¥–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
    console.log('\nüîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:');
    console.log('  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ jobId –∏ documentId');
    console.log('  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–¥–∞—á–∞–º');
    console.log('  ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–µ–∂–¥—É –æ—á–µ—Ä–µ–¥—å—é –∏ –ë–î');
    console.log('  ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –∫–æ–¥–∞–º–∏');
    console.log('  ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ –∑–∞–¥–∞—á');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testOcrGetStatus();