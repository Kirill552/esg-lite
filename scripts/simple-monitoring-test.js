/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Yandex Cloud Monitoring –±–µ–∑ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
 * –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ IAM —Ç–æ–∫–µ–Ω—ã –∏ –±–∞–∑–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ—Ç—Ä–∏–∫
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
require('dotenv').config();

const jwt = require('jsonwebtoken');
const fs = require('fs');

// –ü–æ–ª—É—á–µ–Ω–∏–µ IAM —Ç–æ–∫–µ–Ω–∞ –¥–ª—è Service Account
async function getIamToken() {
  const keyFile = process.env.YANDEX_CLOUD_SA_KEY_FILE || 'authorized_key.json';
  
  if (!fs.existsSync(keyFile)) {
    throw new Error(`–§–∞–π–ª –∫–ª—é—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${keyFile}`);
  }

  const keyData = JSON.parse(fs.readFileSync(keyFile, 'utf8'));
  
  const now = Math.floor(Date.now() / 1000);
  const payload = {
    iss: keyData.service_account_id,
    aud: 'https://iam.api.cloud.yandex.net/iam/v1/tokens',
    iat: now,
    exp: now + 3600 // 1 —á–∞—Å
  };

  const jwtToken = jwt.sign(payload, keyData.private_key, {
    algorithm: 'PS256',
    keyid: keyData.id
  });

  console.log('üîë JWT —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω');

  const response = await fetch('https://iam.api.cloud.yandex.net/iam/v1/tokens', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      jwt: jwtToken
    })
  });

  if (!response.ok) {
    const error = await response.text();
    throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IAM —Ç–æ–∫–µ–Ω–∞: ${response.status} ${error}`);
  }

  const data = await response.json();
  console.log('‚úÖ IAM —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω');
  return data.iamToken;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –º–µ—Ç—Ä–∏–∫–∏
async function sendTestMetric(iamToken) {
  const folderId = process.env.YANDEX_CLOUD_FOLDER_ID;
  
  const metrics = [{
    name: 'esg_lite_test_connection',
    value: 1,
    labels: {
      service: 'esg-lite',
      test: 'true'
    },
    ts: new Date().toISOString()
  }];

  const url = `https://monitoring.api.cloud.yandex.net/monitoring/v2/data/write?folderId=${folderId}&service=custom`;

  const response = await fetch(url, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${iamToken}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      metrics: metrics
    })
  });

  if (!response.ok) {
    const error = await response.text();
    throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Ç—Ä–∏–∫–∏: ${response.status} ${error}`);
  }

  console.log('üìä –¢–µ—Å—Ç–æ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
  return true;
}

async function simpleMonitoringTest() {
  console.log('üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Yandex Cloud Monitoring\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    console.log(`   YANDEX_CLOUD_FOLDER_ID: ${process.env.YANDEX_CLOUD_FOLDER_ID || '–ù–ï –ó–ê–î–ê–ù'}`);
    console.log(`   YANDEX_MONITORING_ENABLED: ${process.env.YANDEX_MONITORING_ENABLED || '–ù–ï –ó–ê–î–ê–ù'}`);

    if (!process.env.YANDEX_CLOUD_FOLDER_ID) {
      throw new Error('YANDEX_CLOUD_FOLDER_ID –Ω–µ –∑–∞–¥–∞–Ω');
    }

    // 2. –ü–æ–ª—É—á–∞–µ–º IAM —Ç–æ–∫–µ–Ω
    console.log('\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ IAM —Ç–æ–∫–µ–Ω–∞...');
    const iamToken = await getIamToken();

    // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –º–µ—Ç—Ä–∏–∫—É
    console.log('\n3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –º–µ—Ç—Ä–∏–∫–∏...');
    await sendTestMetric(iamToken);

    console.log('\nüéâ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ Yandex Cloud Console:');
    console.log(`   https://console.cloud.yandex.ru/folders/${process.env.YANDEX_CLOUD_FOLDER_ID}/monitoring`);

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    
    if (error.message.includes('403')) {
      console.log('\nüîß –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (403):');
      console.log('   Service Account –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫');
      console.log('   –ù–∞–∑–Ω–∞—á—å—Ç–µ —Ä–æ–ª—å monitoring.editor –≤ Yandex Cloud Console');
    }
    
    if (error.message.includes('401')) {
      console.log('\nüîß –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (401):');
      console.log('   –ü—Ä–æ–±–ª–µ–º—ã —Å Service Account –∫–ª—é—á–æ–º –∏–ª–∏ —Ç–æ–∫–µ–Ω–æ–º');
      console.log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª authorized_key.json');
    }

    if (error.message.includes('400')) {
      console.log('\nüîß –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (400):');
      console.log('   –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ FOLDER_ID');
      console.log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ YANDEX_CLOUD_FOLDER_ID');
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  simpleMonitoringTest()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { simpleMonitoringTest };
