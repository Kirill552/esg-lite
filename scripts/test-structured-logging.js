/**
 * –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –ª–æ–≥–≥–µ—Ä–æ–≤ –∏ —Ä–æ—Ç–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
require('dotenv').config();

const { queueLogger, workerLogger, healthLogger, apiLogger } = require('../lib/structured-logger.js');

async function testStructuredLogging() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...\n');

  try {
    // 1. –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...');
    
    await queueLogger.debug('Debug message from queue', { test: true });
    await queueLogger.info('Info message from queue', { data: { key: 'value' }});
    await queueLogger.warn('Warning message from queue');
    await queueLogger.error('Error message from queue', new Error('Test error'));

    // 2. –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º...');
    
    await queueLogger.info('Job processing started', 
      { documentId: 'doc123', fileSize: 1024 }, 
      { jobId: 'job456', organizationId: 'org789', userId: 'user101' }
    );

    // 3. –¢–µ—Å—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –æ—á–µ—Ä–µ–¥–µ–π
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ—á–µ—Ä–µ–¥–µ–π...');
    
    await queueLogger.jobStarted('job123', 'OCR', { documentId: 'doc456' });
    await queueLogger.jobCompleted('job123', 'OCR', 1500, { textLength: 2048 });
    await queueLogger.jobFailed('job124', 'OCR', new Error('OCR failed'), 2, 3);
    await queueLogger.jobRetry('job124', 'OCR', 3, 5000);

    // 4. –¢–µ—Å—Ç worker –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç worker –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...');
    
    await workerLogger.workerStarted('worker1', 'ocr-queue');
    await workerLogger.info('Processing job', { jobId: 'job789' });
    await workerLogger.workerStopped('worker1', 'ocr-queue', 'Graceful shutdown');

    // 5. –¢–µ—Å—Ç health monitor –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç health monitor –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...');
    
    await healthLogger.queueHealthCheck('ocr-queue', { 
      waiting: 5, 
      active: 2, 
      completed: 100, 
      failed: 1 
    });

    // 6. –¢–µ—Å—Ç API –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç API –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...');
    
    await apiLogger.info('API request received', {
      method: 'POST',
      path: '/api/ocr',
      userAgent: 'test-client'
    }, { userId: 'user123' });

    // 7. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    console.log('\n7Ô∏è‚É£ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...');
    
    const complexError = new Error('Complex error');
    complexError.stack = 'Error: Complex error\n    at testFunction (test.js:123:45)';
    
    await queueLogger.error('Complex error occurred', complexError, {
      context: 'job_processing',
      retryAttempt: 2
    }, { jobId: 'job999' });

    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–∞—Ö
    const logDir = process.env.LOG_DIRECTORY || './logs';
    const logToFile = process.env.LOG_TO_FILE === 'true';
    
    console.log('\nüìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–∞—Ö:');
    console.log(`   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤: ${logDir}`);
    console.log(`   –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª: ${logToFile ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}`);
    console.log(`   –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: ${process.env.LOG_LEVEL || 'info'}`);
    
    if (logToFile) {
      console.log('\nüìã –§–∞–π–ª—ã –ª–æ–≥–æ–≤:');
      try {
        const fs = require('fs');
        const files = fs.readdirSync(logDir).filter(f => f.endsWith('.log'));
        files.forEach(file => {
          console.log(`   - ${file}`);
        });
      } catch (error) {
        console.log('   –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤');
      }
    }

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testStructuredLogging()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { testStructuredLogging };
