/**
 * –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ ESG-Lite
 * –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø—É–±–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü, –∑–∞—Ç–µ–º –∂–¥–µ—Ç —Ä—É—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * –∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
 */

const { chromium } = require('playwright');
const fs = require('fs').promises;
const path = require('path');
const readline = require('readline');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BASE_URL = 'http://localhost:3000';
const SCREENSHOTS_DIR = path.join(__dirname, '..', 'screenshots');

// –†–∞–∑—Ä–µ—à–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–æ–≤
const VIEWPORTS = {
  mobile: { width: 375, height: 812 },
  desktop: { width: 1440, height: 900 }
};

// –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
const PAGES = [
  // –ü—É–±–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
  { 
    name: 'homepage', 
    path: '/', 
    requiresAuth: false,
    description: '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞'
  },
  { 
    name: 'sign-in', 
    path: '/sign-in', 
    requiresAuth: false,
    description: '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É'
  },
  { 
    name: 'sign-up', 
    path: '/sign-up', 
    requiresAuth: false,
    description: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
  },
  { 
    name: 'knowledge', 
    path: '/knowledge', 
    requiresAuth: false,
    description: '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π'
  },
  { 
    name: 'knowledge-296fz', 
    path: '/knowledge/296-fz', 
    requiresAuth: false,
    description: '296-–§–ó —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ'
  },
  { 
    name: 'knowledge-cbam', 
    path: '/knowledge/cbam', 
    requiresAuth: false,
    description: 'CBAM —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ'
  },
  { 
    name: 'help', 
    path: '/help', 
    requiresAuth: false,
    description: '–°–ø—Ä–∞–≤–∫–∞'
  },
  
  // –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  { 
    name: 'dashboard', 
    path: '/dashboard', 
    requiresAuth: true,
    description: '–î–∞—à–±–æ—Ä–¥',
    variants: ['default', 'with-billing'] // –û–±—ã—á–Ω—ã–π –≤–∏–¥ –∏ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –±–∏–ª–ª–∏–Ω–≥–æ–º
  },
  { 
    name: 'analytics', 
    path: '/analytics', 
    requiresAuth: true,
    description: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ ESG'
  },
  { 
    name: 'credits', 
    path: '/credits', 
    requiresAuth: true,
    description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞–º–∏',
    variants: ['default', 'with-billing'] // –û–±—ã—á–Ω—ã–π –≤–∏–¥ –∏ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –±–∏–ª–ª–∏–Ω–≥–æ–º
  },
  { 
    name: 'subscription', 
    path: '/subscription', 
    requiresAuth: true,
    description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏'
  },
  { 
    name: 'suppliers', 
    path: '/suppliers', 
    requiresAuth: true,
    description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏'
  },
  { 
    name: 'settings', 
    path: '/settings', 
    requiresAuth: true,
    description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã',
    variants: ['tab1', 'tab2'] // –†–∞–∑–Ω—ã–µ —Ç–∞–±—ã
  },
  { 
    name: 'create-report', 
    path: '/create-report', 
    requiresAuth: true,
    description: '–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤'
  },
  { 
    name: 'upload', 
    path: '/upload', 
    requiresAuth: true,
    description: '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'
  },
  { 
    name: 'reports', 
    path: '/reports', 
    requiresAuth: true,
    description: '–ú–æ–∏ –æ—Ç—á–µ—Ç—ã'
  },
  { 
    name: 'documents', 
    path: '/documents', 
    requiresAuth: true,
    description: '–ú–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã'
  }
];

// –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function waitForPageLoad(page) {
  try {
    console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    await page.waitForLoadState('domcontentloaded', { timeout: 10000 });
    await page.waitForTimeout(2000);
    
    // –ñ–¥–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    await page.waitForFunction(() => {
      return document.readyState === 'complete' && 
             (window.React !== undefined || 
              document.querySelector('[data-reactroot], #__next, #root, main, .container') !== null);
    }, { timeout: 8000 }).catch(() => {
      console.log('‚ö†Ô∏è React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...');
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π
    await page.waitForTimeout(2000);
    
    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    
  } catch (error) {
    console.warn('‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –Ω–µ–ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π:', error.message);
    await page.waitForTimeout(1000);
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function scrollPage(page) {
  try {
    await page.evaluate(() => {
      return new Promise((resolve) => {
        let totalHeight = 0;
        const distance = 100;
        const timer = setInterval(() => {
          const scrollHeight = document.body.scrollHeight;
          window.scrollBy(0, distance);
          totalHeight += distance;

          if (totalHeight >= scrollHeight) {
            clearInterval(timer);
            window.scrollTo(0, 0); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
            setTimeout(resolve, 500);
          }
        }, 100);
      });
    });
  } catch (error) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –ø–µ—Ä–µ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º
async function interactWithPage(page, pageConfig, variant = 'default') {
  try {
    // –î–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü –¥–∞—à–±–æ—Ä–¥–∞ –∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ - –ø–æ–ø—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å –≤ —Ö–µ–¥–µ—Ä–µ
    if (['dashboard', 'credits', 'analytics', 'subscription'].includes(pageConfig.name)) {
      
      if (variant === 'with-billing') {
        console.log('üîò –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∏–ª–ª–∏–Ω–≥–æ–≤—É—é –ø–∞–Ω–µ–ª—å...');
        
        // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –±–∞–ª–∞–Ω—Å–∞
        const balanceButton = page.locator('button:has-text("‚ÇΩ"), button[class*="emerald"]:has-text("‚ÇΩ")').first();
        
        const balanceExists = await balanceButton.count() > 0;
        if (balanceExists) {
          console.log('üí∞ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –±–∞–ª–∞–Ω—Å–∞, –∫–ª–∏–∫–∞–µ–º...');
          await balanceButton.click();
          
          // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è drawer —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–∏–ª–ª–∏–Ω–≥–µ
          await page.waitForTimeout(1500);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã–ª—Å—è –ª–∏ drawer
          const drawer = page.locator('[role="dialog"], .drawer, [data-drawer], [class*="drawer"]');
          const drawerExists = await drawer.count() > 0;
          
          if (drawerExists) {
            console.log('üìä Drawer —Å –±–∏–ª–ª–∏–Ω–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ—Ç–∫—Ä—ã—Ç');
            await page.waitForTimeout(500); // –ñ–¥–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
          } else {
            console.log('‚ö†Ô∏è Drawer –Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã...');
            
            // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            const modal = page.locator('[data-testid="billing-modal"], .modal, [class*="modal"]');
            const modalExists = await modal.count() > 0;
            
            if (modalExists) {
              console.log('üìã –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±–∏–ª–ª–∏–Ω–≥–∞ –æ—Ç–∫—Ä—ã—Ç–æ');
              await page.waitForTimeout(500);
            }
          }
        } else {
          console.log('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
      }
    }
    
    // –î–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ - –º–æ–∂–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —Ç–∞–±–∞–º–∏
    if (pageConfig.name === 'settings') {
      console.log('‚öôÔ∏è –†–∞–±–æ—Ç–∞–µ–º —Å —Ç–∞–±–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
      
      // –ò—â–µ–º —Ç–∞–±—ã
      const tabs = page.locator('button[role="tab"], .tab-button, [data-tab], button:has-text("–ü—Ä–æ—Ñ–∏–ª—å"), button:has-text("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"), button:has-text("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")');
      const tabCount = await tabs.count();
      
      if (tabCount > 1 && variant === 'tab2') {
        // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –≤—Ç–æ—Ä–æ–π —Ç–∞–± –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        await tabs.nth(1).click();
        await page.waitForTimeout(500);
        console.log('üìë –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –≤—Ç–æ—Ä–æ–π —Ç–∞–±');
      }
    }
    
  } catch (error) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
async function takeScreenshot(page, pageName, viewport, viewportName) {
  try {
    const filename = `${pageName}_${viewportName}.png`;
    const filepath = path.join(SCREENSHOTS_DIR, filename);
    
    await page.screenshot({
      path: filepath,
      fullPage: true,
      type: 'png'
    });
    
    console.log(`üì∏ ${viewportName}: ${filename}`);
    return filename;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ ${pageName}_${viewportName}:`, error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
function waitForUserInput(question) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      rl.close();
      resolve(answer.trim().toLowerCase());
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function checkAuthentication(page) {
  try {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    await page.goto(`${BASE_URL}/dashboard`, { 
      waitUntil: 'domcontentloaded', 
      timeout: 10000 
    });
    await page.waitForTimeout(3000);
    
    const currentUrl = page.url();
    
    // –ï—Å–ª–∏ –Ω–∞—Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞, –∑–Ω–∞—á–∏—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã
    if (currentUrl.includes('/sign-in') || currentUrl.includes('/sign-up')) {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const hasUserMenu = await page.locator('button:has-text("–í—ã–π—Ç–∏"), button:has-text("Sign out"), [data-testid="user-menu"], .user-menu').count() > 0;
    const hasDashboardContent = await page.locator('h1:has-text("–î–∞—à–±–æ—Ä–¥"), h1:has-text("Dashboard"), [data-testid="dashboard"]').count() > 0;
    
    return hasUserMenu || hasDashboardContent || currentUrl.includes('/dashboard');
    
  } catch (error) {
    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message);
    return false;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function createScreenshots() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ ESG-Lite');
  console.log(`üìç –ë–∞–∑–æ–≤—ã–π URL: ${BASE_URL}`);
  console.log(`üìÅ –ü–∞–ø–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: ${SCREENSHOTS_DIR}`);
  
  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
  await fs.mkdir(SCREENSHOTS_DIR, { recursive: true });
  
  const browser = await chromium.launch({ 
    headless: false, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —Ä—É—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    slowMo: 50 
  });
  
  const context = await browser.newContext({
    viewport: VIEWPORTS.desktop,
    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
  });
  
  const results = {
    success: [],
    failed: [],
    total: PAGES.length * Object.keys(VIEWPORTS).length
  };
  
  try {
    // –≠–¢–ê–ü 1: –°–∫—Ä–∏–Ω—à–æ—Ç—ã –ø—É–±–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    console.log('\nüåê –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø—É–±–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü');
    console.log('=' .repeat(60));
    
    const publicPages = PAGES.filter(page => !page.requiresAuth);
    
    for (const pageConfig of publicPages) {
      console.log(`\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${pageConfig.description} (${pageConfig.path})`);
      
      for (const [viewportName, viewport] of Object.entries(VIEWPORTS)) {
        try {
          const page = await context.newPage();
          await page.setViewportSize(viewport);
          
          console.log(`üîç ${viewportName} (${viewport.width}x${viewport.height})`);
          
          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
          await page.goto(`${BASE_URL}${pageConfig.path}`, { 
            waitUntil: 'domcontentloaded',
            timeout: 15000 
          });
          
          // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
          await waitForPageLoad(page);
          
          // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
          await scrollPage(page);
          
          // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
          const filename = await takeScreenshot(page, pageConfig.name, viewport, viewportName);
          
          if (filename) {
            results.success.push(filename);
            console.log(`‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`);
          } else {
            results.failed.push(`${pageConfig.name}_${viewportName}`);
          }
          
          await page.close();
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageConfig.name} (${viewportName}):`, error.message);
          results.failed.push(`${pageConfig.name}_${viewportName}`);
        }
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 500));
      }
    }
    
    // –≠–¢–ê–ü 2: –†—É—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    console.log('\nüîê –≠–¢–ê–ü 2: –†—É—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    console.log('=' .repeat(60));
    console.log('üåê –û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    
    const authPage = await context.newPage();
    await authPage.goto(`${BASE_URL}/sign-in`);
    
    console.log('\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–ò:');
    console.log('1. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –±—Ä–∞—É–∑–µ—Ä–µ');
    console.log('2. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –¥–∞—à–±–æ—Ä–¥');
    console.log('3. –ù–∞–∂–º–∏—Ç–µ Enter –≤ —ç—Ç–æ–º –æ–∫–Ω–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è');
    
    await waitForUserInput('\n‚è≥ –ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    const isAuthenticated = await checkAuthentication(authPage);
    
    if (!isAuthenticated) {
      console.log('\n‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑...');
      
      const retry = await waitForUserInput('–•–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É? (y/n): ');
      if (retry === 'y' || retry === 'yes') {
        const secondCheck = await checkAuthentication(authPage);
        if (!secondCheck) {
          console.log('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É —Å –ø—É–±–ª–∏—á–Ω—ã–º–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏.');
          await authPage.close();
          await browser.close();
          return;
        }
      } else {
        await authPage.close();
        await browser.close();
        return;
      }
    }
    
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!');
    await authPage.close();
    
    // –≠–¢–ê–ü 3: –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    console.log('\nüîí –≠–¢–ê–ü 3: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü');
    console.log('=' .repeat(60));
    
    const authPages = PAGES.filter(page => page.requiresAuth);
    
    for (const pageConfig of authPages) {
      console.log(`\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${pageConfig.description} (${pageConfig.path})`);
      
      for (const [viewportName, viewport] of Object.entries(VIEWPORTS)) {
        try {
          const page = await context.newPage();
          await page.setViewportSize(viewport);
          
          console.log(`üîç ${viewportName} (${viewport.width}x${viewport.height})`);
          
          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
          await page.goto(`${BASE_URL}${pageConfig.path}`, { 
            waitUntil: 'domcontentloaded',
            timeout: 15000 
          });
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –±—ã–ª–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –≤—Ö–æ–¥
          await page.waitForTimeout(2000);
          const currentUrl = page.url();
          if (currentUrl.includes('/sign-in')) {
            console.log('‚ö†Ô∏è –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...');
            results.failed.push(`${pageConfig.name}_${viewportName}`);
            await page.close();
            continue;
          }
          
          // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
          await waitForPageLoad(page);
          
          // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ–º —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º (–∫–ª–∏–∫–∞–µ–º –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
          await interactWithPage(page, pageConfig);
          
          // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
          await scrollPage(page);
          
          // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
          const filename = await takeScreenshot(page, pageConfig.name, viewport, viewportName);
          
          if (filename) {
            results.success.push(filename);
            console.log(`‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`);
          } else {
            results.failed.push(`${pageConfig.name}_${viewportName}`);
          }
          
          await page.close();
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageConfig.name} (${viewportName}):`, error.message);
          results.failed.push(`${pageConfig.name}_${viewportName}`);
        }
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 500));
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª
    await createIndexHTML(results.success);
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('=' .repeat(60));
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${results.success.length}`);
    console.log(`‚ùå –û—à–∏–±–∫–∏: ${results.failed.length}`);
    console.log(`üìÅ –°–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${SCREENSHOTS_DIR}`);
    
    if (results.failed.length > 0) {
      console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã:');
      results.failed.forEach(name => console.log(`   ‚Ä¢ ${name}`));
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  } finally {
    await context.close();
    await browser.close();
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–Ω–æ–≥–æ HTML —Ñ–∞–π–ª–∞
async function createIndexHTML(screenshots) {
  const indexPath = path.join(SCREENSHOTS_DIR, 'index.html');
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
  const groupedScreenshots = {};
  screenshots.forEach(filename => {
    const [pageName, viewport] = filename.replace('.png', '').split('_');
    if (!groupedScreenshots[pageName]) {
      groupedScreenshots[pageName] = {};
    }
    groupedScreenshots[pageName][viewport] = filename;
  });
  
  const html = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ESG-Lite Screenshots</title>
    <style>
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
            margin: 0; 
            padding: 20px; 
            background: #f5f5f5; 
        }
        .container { max-width: 1200px; margin: 0 auto; }
        h1 { color: #2563eb; text-align: center; margin-bottom: 30px; }
        .page-section { 
            background: white; 
            border-radius: 8px; 
            padding: 20px; 
            margin-bottom: 20px; 
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .page-title { 
            font-size: 18px; 
            font-weight: 600; 
            margin-bottom: 15px; 
            color: #1f2937;
            border-bottom: 2px solid #e5e7eb;
            padding-bottom: 8px;
        }
        .viewport-group { 
            display: grid; 
            grid-template-columns: 1fr 1fr; 
            gap: 20px; 
            margin-bottom: 20px;
        }
        .viewport-item {
            text-align: center;
        }
        .viewport-label { 
            font-weight: 500; 
            margin-bottom: 10px; 
            color: #6b7280;
            font-size: 14px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        .screenshot-container {
            border: 1px solid #e5e7eb;
            border-radius: 6px;
            overflow: hidden;
            transition: transform 0.2s ease;
        }
        .screenshot-container:hover {
            transform: scale(1.02);
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        }
        .screenshot { 
            max-width: 100%; 
            height: auto; 
            display: block;
        }
        .stats {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            text-align: center;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
        }
        @media (max-width: 768px) {
            .viewport-group { grid-template-columns: 1fr; }
            .container { padding: 10px; }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üì∏ ESG-Lite Screenshots</h1>
        
        <div class="stats">
            <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤</h3>
            <p>–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${Object.keys(groupedScreenshots).length} | –í—Å–µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: ${screenshots.length}</p>
            <p>–°–æ–∑–¥–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}</p>
        </div>
        
        ${Object.entries(groupedScreenshots).map(([pageName, viewports]) => {
          const pageInfo = PAGES.find(p => p.name === pageName);
          const title = pageInfo ? pageInfo.description : pageName;
          const authStatus = pageInfo ? (pageInfo.requiresAuth ? 'üîí –¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' : 'üåê –ü—É–±–ª–∏—á–Ω–∞—è') : '';
          
          return `
            <div class="page-section">
                <div class="page-title">
                    ${title} <small style="color: #6b7280;">(${pageName}) ${authStatus}</small>
                </div>
                <div class="viewport-group">
                    ${viewports.mobile ? `
                        <div class="viewport-item">
                            <div class="viewport-label">üì± Mobile (375px)</div>
                            <div class="screenshot-container">
                                <img src="./${viewports.mobile}" alt="${pageName} mobile" class="screenshot" />
                            </div>
                        </div>
                    ` : ''}
                    ${viewports.desktop ? `
                        <div class="viewport-item">
                            <div class="viewport-label">üñ•Ô∏è Desktop (1440px)</div>
                            <div class="screenshot-container">
                                <img src="./${viewports.desktop}" alt="${pageName} desktop" class="screenshot" />
                            </div>
                        </div>
                    ` : ''}
                </div>
            </div>
          `;
        }).join('')}
    </div>
</body>
</html>
  `;
  
  await fs.writeFile(indexPath, html, 'utf8');
  console.log(`üìÑ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª: ${indexPath}`);
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
createScreenshots().catch(console.error);
