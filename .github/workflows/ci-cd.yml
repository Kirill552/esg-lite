# ESG-Lite CI/CD Pipeline
# –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π workflow –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ–ø–ª–æ—è

name: ESG-Lite CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'

jobs:
  # ============================================================================
  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ª–∏–Ω—Ç–∏–Ω–≥
  # ============================================================================
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_esg_lite
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test environment
      run: |
        cp .env.example .env
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_esg_lite" >> .env
        echo "NODE_ENV=test" >> .env

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Run database migrations
      run: npx prisma db push

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npx tsc --noEmit

    - name: Run unit tests
      run: npm run test

    - name: Run integration tests
      run: npm run test:integration

    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # ============================================================================
  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
  # ============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=high

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # ============================================================================
  # –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞
  # ============================================================================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'
    
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=git-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Web image (Distroless)
      id: build-web
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_NUMBER=${{ github.run_number }}
          BUILD_SHA=${{ github.sha }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          
    - name: Build and push Worker image (Alpine)
      id: build-worker
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.worker
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-worker:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-worker:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_NUMBER=${{ github.run_number }}
          BUILD_SHA=${{ github.sha }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}

    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
        subject-digest: ${{ steps.build.outputs.digest }}
        push-to-registry: true

    - name: Output image
      id: image
      run: |
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

  # ============================================================================
  # –î–µ–ø–ª–æ–π –≤ staging (–≤–µ—Ç–∫–∞ develop)
  # ============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config

    - name: Deploy to staging
      run: |
        kubectl set image deployment/esg-lite-web \
          esg-lite-web=${{ needs.build.outputs.image }} \
          -n esg-lite-staging
        
        kubectl set image deployment/esg-lite-worker \
          esg-lite-worker=${{ needs.build.outputs.image }} \
          -n esg-lite-staging

    - name: Wait for rollout
      run: |
        kubectl rollout status deployment/esg-lite-web -n esg-lite-staging --timeout=300s
        kubectl rollout status deployment/esg-lite-worker -n esg-lite-staging --timeout=300s

    - name: Run health check
      run: |
        kubectl port-forward service/esg-lite-web-service 8080:80 -n esg-lite-staging &
        sleep 10
        curl -f http://localhost:8080/api/queue/health
        
    - name: Run smoke tests
      run: |
        npm ci
        npm run test:smoke -- --base-url=http://localhost:8080

  # ============================================================================
  # –î–µ–ø–ª–æ–π –≤ production (—Ç–µ–≥–∏ –∏ main –≤–µ—Ç–∫–∞)
  # ============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config

    - name: Create deployment backup
      run: |
        kubectl get deployment esg-lite-web -n esg-lite -o yaml > deployment-backup.yaml
        kubectl get deployment esg-lite-worker -n esg-lite -o yaml > worker-backup.yaml

    - name: Deploy to production
      run: |
        kubectl set image deployment/esg-lite-web \
          esg-lite-web=${{ needs.build.outputs.image }} \
          -n esg-lite
        
        kubectl set image deployment/esg-lite-worker \
          esg-lite-worker=${{ needs.build.outputs.image }} \
          -n esg-lite

    - name: Wait for rollout
      run: |
        kubectl rollout status deployment/esg-lite-web -n esg-lite --timeout=600s
        kubectl rollout status deployment/esg-lite-worker -n esg-lite --timeout=600s

    - name: Run health check
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º external endpoint
        for i in {1..30}; do
          if curl -f https://esg-lite.example.com/api/queue/health; then
            echo "Health check passed"
            break
          fi
          echo "Health check attempt $i failed, retrying..."
          sleep 10
        done

    - name: Run production smoke tests
      run: |
        npm ci
        npm run test:smoke -- --base-url=https://esg-lite.example.com

    - name: Notify on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: 'üöÄ ESG-Lite production deployment successful!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, rolling back..."
        kubectl rollout undo deployment/esg-lite-web -n esg-lite
        kubectl rollout undo deployment/esg-lite-worker -n esg-lite
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø—Ä–æ–±–ª–µ–º–µ
        curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
          -H 'Content-Type: application/json' \
          -d '{"text":"‚ùå ESG-Lite production deployment failed and was rolled back!"}'

  # ============================================================================
  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
  # ============================================================================
  post-deploy-monitoring:
    name: Post-Deploy Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && (needs.deploy-production.result == 'success')
    
    steps:
    - name: Wait for system stabilization
      run: sleep 300  # 5 –º–∏–Ω—É—Ç

    - name: Check error rates
      run: |
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
        ERROR_RATE=$(curl -s "https://esg-lite.example.com/api/queue/metrics?period=10m" | \
          jq -r '.performance.errorRate // 0')
        
        echo "Current error rate: $ERROR_RATE"
        
        if (( $(echo "$ERROR_RATE > 0.05" | bc -l) )); then
          echo "‚ùå High error rate detected: $ERROR_RATE"
          exit 1
        fi

    - name: Check response times
      run: |
        for i in {1..5}; do
          START_TIME=$(date +%s%N)
          curl -f https://esg-lite.example.com/api/queue/health > /dev/null
          END_TIME=$(date +%s%N)
          
          RESPONSE_TIME=$(( (END_TIME - START_TIME) / 1000000 ))  # Convert to milliseconds
          echo "Response time $i: ${RESPONSE_TIME}ms"
          
          if [ $RESPONSE_TIME -gt 5000 ]; then
            echo "‚ùå High response time detected: ${RESPONSE_TIME}ms"
            exit 1
          fi
        done

    - name: Verify queue processing
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
        QUEUE_STATS=$(curl -s "https://esg-lite.example.com/api/queue/status")
        PROCESSING_JOBS=$(echo "$QUEUE_STATS" | jq -r '.queues.ocr.processing // 0')
        
        echo "Currently processing jobs: $PROCESSING_JOBS"
        
        if [ "$PROCESSING_JOBS" = "0" ]; then
          echo "‚ö†Ô∏è No jobs being processed - this might be normal or indicate an issue"
        fi

    - name: Final success notification
      if: success()
      run: |
        curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
          -H 'Content-Type: application/json' \
          -d '{"text":"‚úÖ ESG-Lite production deployment verified - all systems operational!"}'
