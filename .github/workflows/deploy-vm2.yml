# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π ESG-Lite –Ω–∞ VM2
name: Deploy to VM2

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é

jobs:
  deploy:
    name: Deploy to VM2
    runs-on: ubuntu-latest
    timeout-minutes: 30  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 30 –º–∏–Ω—É—Ç
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to VM2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VM2_HOST }}
        username: ${{ secrets.VM2_USER }}
        key: ${{ secrets.VM2_SSH_KEY }}
        port: 22
        timeout: 25m  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º SSH —Ç–∞–π–º–∞—É—Ç
        command_timeout: 20m  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∫–æ–º–∞–Ω–¥
        script: |
          echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π ESG-Lite..."
          
          # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
          cd /opt/esg-lite || { echo "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è /opt/esg-lite –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"; exit 1; }
          
          # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
          if [ ! -f ./ssl/nginx-selfsigned.crt ]; then
            echo "üîê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç..."
            mkdir -p ./ssl
            openssl genrsa -out ./ssl/nginx-selfsigned.key 2048
            openssl req -new -x509 -key ./ssl/nginx-selfsigned.key \
              -out ./ssl/nginx-selfsigned.crt -days 365 \
              -subj "/C=RU/ST=Moscow/L=Moscow/O=ESG-Lite/CN=82.202.156.35"
            chmod 600 ./ssl/nginx-selfsigned.key
            chmod 644 ./ssl/nginx-selfsigned.crt
          fi
          
          # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
          echo "‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
          docker compose -f docker-compose.prod.yml down
          
          # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
          echo "üì• –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –∏–∑ GitHub..."
          git fetch origin
          git reset --hard origin/main
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ authorized_key.json —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          if [ ! -f authorized_key.json ]; then
            echo "‚ö†Ô∏è authorized_key.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
          fi
          
          # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã
          echo "üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã..."
          docker image prune -f
          docker system prune -f
          
          # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã (–ø–æ—ç—Ç–∞–ø–Ω–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏)
          echo "üî• –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤–µ–± –∏ nginx –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
          docker compose -f docker-compose.prod.yml build --no-cache --pull nginx esg-lite-web metrics-exporter
          
          echo "üî• –¢–µ–ø–µ—Ä—å —Å–æ–±–∏—Ä–∞–µ–º worker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 10 –º–∏–Ω—É—Ç)..."
          timeout 900 docker compose -f docker-compose.prod.yml build --no-cache --pull esg-lite-worker || {
            echo "‚ö†Ô∏è Worker –±–∏–ª–¥ –ø—Ä–µ–≤—ã—Å–∏–ª 15 –º–∏–Ω—É—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–∑"
            docker compose -f docker-compose.prod.yml build esg-lite-worker || echo "–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–∑"
          }
          
          # –°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
          echo "üî® –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
          docker compose -f docker-compose.prod.yml up -d
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞
          echo "‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
          sleep 30
          
          # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
          echo "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞..."
          docker compose -f docker-compose.prod.yml ps
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
          echo "üìã –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
          docker compose -f docker-compose.prod.yml logs --tail=30
          
          # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–µ–±-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω
          if docker compose -f docker-compose.prod.yml ps esg-lite-web | grep -q "Up"; then
            echo "üóÉÔ∏è –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
            docker compose -f docker-compose.prod.yml exec -T esg-lite-web sh -c 'DATABASE_URL="${{ secrets.PRODUCTION_DATABASE_URL }}" npx prisma migrate deploy' || echo "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"
            
            echo "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –≤—ã–±—Ä–æ—Å–æ–≤..."
            docker compose -f docker-compose.prod.yml exec -T esg-lite-web sh -c 'node scripts/update-emission-factors.js --check || echo "‚ö†Ô∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è"'
          else
            echo "‚ùå –í–µ–±-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏"
          fi
          
          # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
          echo "‚è≥ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞..."
          sleep 30
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
          echo "‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
          docker compose -f docker-compose.prod.yml ps
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
          echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:"
          docker compose -f docker-compose.prod.yml logs --tail=20
          
          echo "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!"

    - name: Health Check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VM2_HOST }}
        username: ${{ secrets.VM2_USER }}
        key: ${{ secrets.VM2_SSH_KEY }}
        port: 22
        script: |
          cd /opt/esg-lite
          echo "üè• –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
          
          # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
          echo "‚è≥ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
          sleep 30
          
          # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
          echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
          docker compose -f docker-compose.prod.yml ps
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
          echo "üìã –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:"
          docker compose -f docker-compose.prod.yml logs --tail=100 || echo "–ù–µ—Ç –ª–æ–≥–æ–≤"
          
          if ! docker compose -f docker-compose.prod.yml ps | grep -q "Up"; then
            echo "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã! –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:"
            
            echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–∑—ã:"
            docker images | grep esg-lite || echo "–û–±—Ä–∞–∑—ã esg-lite –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Docker:"
            docker info | head -10
            
            echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ:"
            ls -la
            
            echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Dockerfile:"
            head -20 Dockerfile || echo "Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            exit 1
          fi
          
          echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø–æ—Ä—Ç—ã —Å–ª—É—à–∞—é—Ç—Å—è..."
          ss -tlnp | grep -E ":80|:443|:3000" || echo "–ù–µ –≤—Å–µ –ø–æ—Ä—Ç—ã —Å–ª—É—à–∞—é—Ç—Å—è"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ nginx
          echo "üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å through nginx..."
          if curl -f -k -m 10 https://localhost/api/queue/health; then
            echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —á–µ—Ä–µ–∑ HTTPS!"
          elif curl -f -m 10 http://localhost/api/queue/health; then
            echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ HTTP!"
          else
            echo "‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ nginx, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–±-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–ø—Ä—è–º—É—é
            if docker compose -f docker-compose.prod.yml exec -T esg-lite-web curl -f -m 5 http://localhost:3000/api/queue/health; then
              echo "‚ö†Ô∏è –í–µ–±-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ nginx –Ω–µ –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç"
              echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é nginx..."
              docker compose -f docker-compose.prod.yml logs nginx --tail=20
            else
              echo "‚ùå –í–µ–±-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
              echo "üìã –õ–æ–≥–∏ –≤–µ–±-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:"
              docker compose -f docker-compose.prod.yml logs esg-lite-web --tail=50
            fi
            
            echo "üìã –õ–æ–≥–∏ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
            docker compose -f docker-compose.prod.yml logs --tail=30
            exit 1
          fi
          
          echo "üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
          echo "üåê –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://esg-lite.ru"

    - name: Notify Success
      if: success()
      run: |
        echo "üéâ –î–µ–ø–ª–æ–π –Ω–∞ VM2 —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
        echo "üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: https://esg-lite.ru"

    - name: Notify Failure
      if: failure()
      run: |
        echo "‚ùå –î–µ–ø–ª–æ–π –Ω–∞ VM2 –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!"
        echo "üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã"