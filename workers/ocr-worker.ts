/**
 * OCR Worker - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á OCR –∏–∑ –æ—á–µ—Ä–µ–¥–∏ pg-boss
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É OCR —Å —Å–∏—Å—Ç–µ–º–æ–π –æ—á–µ—Ä–µ–¥–µ–π –∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–µ–π –∫—Ä–µ–¥–∏—Ç–æ–≤
 * –ó–∞–¥–∞—á–∞ 2.1: –û–±–Ω–æ–≤–∏—Ç—å OCR Worker –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤
 */

const PgBoss = require('pg-boss');
import { createPgBoss, QUEUE_NAMES, OcrJobData, OcrJobResult } from '../lib/pg-boss-config';
import { processS3File } from '../lib/ocr';
import { CreditsService, creditsService } from '../lib/credits-service';
import { prisma } from '../lib/prisma';
import { metricsCollector } from '../lib/metrics';
import { workerLogger } from '../lib/structured-logger';

export interface WorkerConfig {
  concurrency: number;
  pollInterval: number;
  maxRetries: number;
}

export interface JobProgress {
  stage: 'starting' | 'downloading' | 'processing' | 'saving' | 'completed';
  progress: number;
  message: string;
}

/**
 * OCR Worker –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∏–∑ –æ—á–µ—Ä–µ–¥–∏
 */
export class OcrWorker {
  private boss: any = null;
  private isRunning: boolean = false;
  private config: WorkerConfig;
  private creditsService: CreditsService;

  constructor(config: Partial<WorkerConfig> = {}) {
    this.config = {
      concurrency: config.concurrency || parseInt(process.env.BULLMQ_CONCURRENCY || '5'),
      pollInterval: config.pollInterval || 5000, // 5 —Å–µ–∫—É–Ω–¥
      maxRetries: config.maxRetries || 3
    };
    
    this.creditsService = creditsService;
    
    console.log('üîß OCR Worker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π:', this.config);
  }

  /**
   * –ó–∞–ø—É—Å–∫ worker –ø—Ä–æ—Ü–µ—Å—Å–∞
   */
  async start(): Promise<void> {
    if (this.isRunning) {
      await workerLogger.warn('OCR Worker already running');
      return;
    }

    try {
      await workerLogger.info('Starting OCR Worker...');
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ pg-boss
      this.boss = await createPgBoss();
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á OCR
      await this.boss.work(
        QUEUE_NAMES.OCR,
        { teamSize: this.config.concurrency },
        this.processOcrJob.bind(this)
      );

      this.isRunning = true;
      await workerLogger.workerStarted('ocr-worker', QUEUE_NAMES.OCR);
      await workerLogger.info('OCR Worker started successfully', { 
        concurrency: this.config.concurrency,
        queueName: QUEUE_NAMES.OCR
      });
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º graceful shutdown
      this.setupGracefulShutdown();
      
    } catch (error) {
      await workerLogger.error('Failed to start OCR Worker', 
        error instanceof Error ? error : new Error(String(error))
      );
      throw error;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ worker –ø—Ä–æ—Ü–µ—Å—Å–∞
   */
  async stop(): Promise<void> {
    if (!this.isRunning) {
      await workerLogger.warn('OCR Worker already stopped');
      return;
    }

    try {
      await workerLogger.info('Stopping OCR Worker...');
      
      this.isRunning = false;
      
      if (this.boss) {
        await this.boss.stop();
        this.boss = null;
      }
      
      await workerLogger.workerStopped('ocr-worker', QUEUE_NAMES.OCR, 'Manual stop');
    } catch (error) {
      await workerLogger.error('Failed to stop OCR Worker', 
        error instanceof Error ? error : new Error(String(error))
      );
      throw error;
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ OCR –∑–∞–¥–∞—á–∏
   */
  private async processOcrJob(job: any): Promise<OcrJobResult> {
    const jobData: OcrJobData = job.data;
    const jobId = job.id;
    const startTime = Date.now();
    
    await workerLogger.jobStarted(jobId, 'OCR', {
      documentId: jobData.documentId,
      fileKey: jobData.fileKey,
      fileName: jobData.fileName,
      fileSize: jobData.fileSize,
      userId: jobData.userId,
      organizationId: jobData.organizationId
    });

    try {
      const organizationId = jobData.organizationId || jobData.userId;
      
      // –≠—Ç–∞–ø 1: –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ OCR
      await this.updateProgress(job, {
        stage: 'starting',
        progress: 5,
        message: '–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ OCR'
      });

      const operationCost = await this.creditsService.getOperationCost('ocr');
      const requiredCredits = operationCost.finalCost;

      // –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
      await this.updateProgress(job, {
        stage: 'starting',
        progress: 10,
        message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤'
      });

      const hasCredits = await this.creditsService.hasCredits(organizationId, requiredCredits);
      
      if (!hasCredits) {
        const balance = await this.creditsService.checkBalance(organizationId);
        throw new Error(
          `INSUFFICIENT_CREDITS: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. ` +
          `–¢—Ä–µ–±—É–µ—Ç—Å—è: ${requiredCredits} —Ç CO‚ÇÇ, –¥–æ—Å—Ç—É–ø–Ω–æ: ${balance.balance} —Ç CO‚ÇÇ`
        );
      }

      // –≠—Ç–∞–ø 3: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
      await this.updateProgress(job, {
        stage: 'downloading',
        progress: 30,
        message: '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞'
      });

      // –≠—Ç–∞–ø 4: OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞
      await this.updateProgress(job, {
        stage: 'processing',
        progress: 50,
        message: '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞'
      });

      const ocrText = await processS3File(jobData.fileKey);
      
      if (!ocrText || ocrText.length < 10) {
        throw new Error('OCR_FAILED: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
      }

      // –≠—Ç–∞–ø 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      await this.updateProgress(job, {
        stage: 'saving',
        progress: 70,
        message: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
      });

      await this.saveOcrResults(jobData.documentId, ocrText);

      // –≠—Ç–∞–ø 6: –°–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
      await this.updateProgress(job, {
        stage: 'saving',
        progress: 90,
        message: '–°–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É'
      });

      const debitResult = await this.creditsService.debitCredits(
        organizationId, 
        requiredCredits, 
        `OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${jobData.fileName} (${jobData.documentId})`,
        {
          documentId: jobData.documentId,
          fileName: jobData.fileName,
          fileSize: jobData.fileSize,
          operationType: 'ocr',
          textLength: ocrText.length
        }
      );

      if (!debitResult.success) {
        // –ï—Å–ª–∏ —Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        await this.rollbackOcrResults(jobData.documentId);
        throw new Error(`DEBIT_FAILED: ${debitResult.error}`);
      }

      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      await this.updateProgress(job, {
        stage: 'completed',
        progress: 100,
        message: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
      });

      const result: OcrJobResult = {
        documentId: jobData.documentId,
        text: ocrText,
        textLength: ocrText.length,
        confidence: 0.95, // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
        processedAt: new Date().toISOString()
      };

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const processingTime = Date.now() - startTime;
      await metricsCollector.recordProcessingTime(jobId, processingTime);

      console.log(`‚úÖ OCR –∑–∞–¥–∞—á–∞ ${jobId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:`, {
        documentId: result.documentId,
        textLength: result.textLength,
        creditsDebited: requiredCredits,
        newBalance: debitResult.newBalance,
        processingTime: `${processingTime}ms`
      });

      return result;

    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ OCR –∑–∞–¥–∞—á–∏ ${jobId}:`, error.message);
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –æ—à–∏–±–∫–∏
      const processingTime = Date.now() - startTime;
      await metricsCollector.recordError(jobId, error.name || 'UNKNOWN_ERROR', error.message);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ –æ—à–∏–±–∫—É
      await this.handleJobError(jobData.documentId, error);
      
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
   */
  private async updateProgress(job: any, progress: JobProgress): Promise<void> {
    try {
      console.log(`üìä ${job.id} [${progress.progress}%] ${progress.stage}: ${progress.message}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ pg-boss (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
      if (this.boss && typeof this.boss.publish === 'function') {
        await this.boss.publish('job-progress', {
          jobId: job.id,
          ...progress
        });
      }
      
    } catch (error) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  private async saveOcrResults(documentId: string, ocrText: string): Promise<void> {
    try {
      await prisma.document.update({
        where: { id: documentId },
        data: {
          status: 'PROCESSED',
          ocrProcessed: true,
          ocrData: {
            fullText: ocrText,
            textPreview: ocrText.substring(0, 200),
            textLength: ocrText.length,
            processedAt: new Date().toISOString()
          },
          ocrConfidence: 0.95
        }
      });
      
      console.log(`üíæ OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${documentId}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è ${documentId}:`, error);
      throw error;
    }
  }

  /**
   * –û—Ç–∫–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤
   */
  private async rollbackOcrResults(documentId: string): Promise<void> {
    try {
      await prisma.document.update({
        where: { id: documentId },
        data: {
          status: 'PROCESSING', // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
          ocrProcessed: false,
          ocrData: undefined,
          ocrConfidence: null,
          processingCompletedAt: null
        }
      });
      
      console.log(`üîÑ –û—Ç–∫–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${documentId}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è ${documentId}:`, error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–¥–∞—á–∏
   */
  private async handleJobError(documentId: string, error: Error): Promise<void> {
    try {
      await prisma.document.update({
        where: { id: documentId },
        data: {
          status: 'FAILED',
          ocrData: {
            error: error.message,
            processedAt: new Date().toISOString()
          }
        }
      });
      
      await workerLogger.info('OCR error saved to database', {
        documentId,
        errorMessage: error.message
      });
    } catch (saveError) {
      await workerLogger.error('Failed to save OCR error to database', 
        saveError instanceof Error ? saveError : new Error(String(saveError)), 
        { documentId, originalError: error.message }
      );
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
   */
  private setupGracefulShutdown(): void {
    const shutdown = async (signal: string) => {
      await workerLogger.info(`Received shutdown signal: ${signal}`, { signal });
      await workerLogger.workerStopped('ocr-worker', QUEUE_NAMES.OCR, `Signal: ${signal}`);
      await this.stop();
      process.exit(0);
    };

    process.on('SIGTERM', () => shutdown('SIGTERM'));
    process.on('SIGINT', () => shutdown('SIGINT'));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ worker'–∞
   */
  async getWorkerStats(): Promise<{
    isRunning: boolean;
    config: WorkerConfig;
    queueSize?: number;
  }> {
    const stats = {
      isRunning: this.isRunning,
      config: this.config,
      queueSize: undefined as number | undefined
    };

    if (this.boss) {
      try {
        stats.queueSize = await this.boss.getQueueSize(QUEUE_NAMES.OCR);
      } catch (error) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏:', error);
      }
    }

    return stats;
  }
}

/**
 * Singleton instance –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 */
let workerInstance: OcrWorker | null = null;

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ OCR Worker
 */
export function getOcrWorker(config?: Partial<WorkerConfig>): OcrWorker {
  if (!workerInstance) {
    workerInstance = new OcrWorker(config);
  }
  return workerInstance;
}

/**
 * –ó–∞–ø—É—Å–∫ OCR Worker (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ)
 */
export async function startOcrWorker(config?: Partial<WorkerConfig>): Promise<OcrWorker> {
  const worker = getOcrWorker(config);
  await worker.start();
  return worker;
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ OCR Worker
 */
export async function stopOcrWorker(): Promise<void> {
  if (workerInstance) {
    await workerInstance.stop();
    workerInstance = null;
  }
}