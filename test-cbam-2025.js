/**
 * –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ CBAM —à–∞–±–ª–æ–Ω–∞ 2025 —Å —Ç–æ–∫–µ–Ω–∞–º–∏ [[snake_case]]
 */

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤ [[snake_case]]
function replaceTokens(template, data) {
  let result = template;
  
  // –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã [[token_name]]
  const tokenRegex = /\[\[([a-z_0-9]+)\]\]/g;
  
  result = result.replace(tokenRegex, (match, tokenName) => {
    const value = data[tokenName];
    return value !== undefined ? String(value) : '';
  });
  
  return result;
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤ CBAM
function calculateCBAMTotals(lines) {
  const totalDirect = lines.reduce((sum, line) => {
    const direct = parseFloat(line.l_dir) || 0;
    const qty = parseFloat(line.l_qty) || 0;
    return sum + (direct * qty);
  }, 0);
  
  const totalIndirect = lines.reduce((sum, line) => {
    const elMwh = parseFloat(line.l_el_mwh) || 0;
    const elEf = parseFloat(line.l_el_ef) || 0;
    const qty = parseFloat(line.l_qty) || 0;
    return sum + (elMwh * elEf * qty);
  }, 0);
  
  const totalQuantity = lines.reduce((sum, line) => {
    return sum + (parseFloat(line.l_qty) || 0);
  }, 0);
  
  return {
    totalQuantity: totalQuantity.toFixed(1),
    totalDirect: totalDirect.toFixed(1),
    totalIndirect: totalIndirect.toFixed(1),
    totalAll: (totalDirect + totalIndirect).toFixed(1)
  };
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è CBAM 2025
function createCBAMTemplateData(baseData) {
  const now = new Date();
  
  const templateData = {
    // 1. Declarant block
    eori: baseData.eori || 'RU123456789012345',
    cbam_id: baseData.cbamId || 'DL-2025-000123',
    org_name: baseData.companyName || '–û–û–û "Steel Export"',
    org_address: baseData.address || '123456, –ú–æ—Å–∫–≤–∞, —É–ª. –≠–∫—Å–ø–æ—Ä—Ç–Ω–∞—è, –¥. 1',
    org_country: baseData.country || 'RU',
    org_email: baseData.email || 'cbam@steel.ru',
    report_year_q: baseData.quarter || '2025-2',
    
    // 2. Goods lines (3 –ø—Ä–∏–º–µ—Ä–∞)
    // Line 1 - Flat steel products
    l1_cn: '72081000',
    l1_qty: '100.0',
    l1_unit: 't',
    l1_origin: 'RU',
    l1_unloc: 'RUMOW',
    l1_inst: 'Magnitogorsk Iron & Steel Works',
    l1_lat: '53.4069',
    l1_lon: '59.0461',
    l1_route: 'BF-BOF',
    l1_dir: '2.515',
    l1_el_mwh: '0.65',
    l1_el_ef: '0.322',
    l1_ef_meth: 'RM',
    l1_steel_id: 'MMK-001',
    l1_ip_in_qty: '120.0',
    l1_ip_in_co2: '180.5',
    l1_ip_out_qty: '100.0',
    l1_ip_out_co2: '251.5',
    
    // Line 2 - Coated steel
    l2_cn: '72101200',
    l2_qty: '50.0',
    l2_unit: 't',
    l2_origin: 'RU',
    l2_unloc: 'RUMOW',
    l2_inst: 'Magnitogorsk Iron & Steel Works',
    l2_lat: '53.4069',
    l2_lon: '59.0461',
    l2_route: 'BF-BOF',
    l2_dir: '2.496',
    l2_el_mwh: '0.68',
    l2_el_ef: '0.322',
    l2_ef_meth: 'RM',
    l2_steel_id: 'MMK-002',
    l2_ip_in_qty: '60.0',
    l2_ip_in_co2: '90.2',
    l2_ip_out_qty: '50.0',
    l2_ip_out_co2: '124.8',
    
    // Line 3 - Empty (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
    l3_cn: '',
    l3_qty: '',
    l3_unit: '',
    l3_origin: '',
    l3_unloc: '',
    l3_inst: '',
    l3_lat: '',
    l3_lon: '',
    l3_route: '',
    l3_dir: '',
    l3_el_mwh: '',
    l3_el_ef: '',
    l3_ef_meth: '',
    l3_steel_id: '',
    l3_ip_in_qty: '',
    l3_ip_in_co2: '',
    l3_ip_out_qty: '',
    l3_ip_out_co2: '',
    
    // 3. Signer block
    signer_name: baseData.signerName || '–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á',
    signer_pos: baseData.signerPosition || 'Export Manager',
    sign_date: now.toLocaleDateString('ru-RU'),
    
    // Metadata
    generation_date: now.toLocaleDateString('ru-RU'),
    generation_time: now.toLocaleTimeString('ru-RU'),
    document_id: `CBAM_${Date.now()}`
  };
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏ –≤—Ä—É—á–Ω—É—é –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
  const line1Direct = parseFloat(templateData.l1_qty) * parseFloat(templateData.l1_dir);
  const line2Direct = parseFloat(templateData.l2_qty) * parseFloat(templateData.l2_dir);
  const totalDirect = line1Direct + line2Direct;
  
  const line1Indirect = parseFloat(templateData.l1_qty) * parseFloat(templateData.l1_el_mwh) * parseFloat(templateData.l1_el_ef);
  const line2Indirect = parseFloat(templateData.l2_qty) * parseFloat(templateData.l2_el_mwh) * parseFloat(templateData.l2_el_ef);
  const totalIndirect = line1Indirect + line2Indirect;
  
  const totalQuantity = parseFloat(templateData.l1_qty) + parseFloat(templateData.l2_qty);
  const totalEmissions = totalDirect + totalIndirect;
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∏—Ç–æ–≥–∏
  templateData.total_quantity = totalQuantity.toFixed(1);
  templateData.total_direct_emissions = totalDirect.toFixed(1);
  templateData.total_indirect_emissions = totalIndirect.toFixed(1);
  templateData.total_emissions = totalEmissions.toFixed(1);
  
  return templateData;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è CBAM –¥–∞–Ω–Ω—ã—Ö
function validateCBAMData(data) {
  const errors = [];
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è EORI
  const eoriPattern = /^[A-Z]{2}[A-Z0-9]{1,15}$/;
  if (!eoriPattern.test(data.eori)) {
    errors.push(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π EORI –Ω–æ–º–µ—Ä: ${data.eori}`);
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è CN –∫–æ–¥–æ–≤ (8 —Å–∏–º–≤–æ–ª–æ–≤)
  const cnPattern = /^\d{8}$/;
  if (data.l1_cn && !cnPattern.test(data.l1_cn)) {
    errors.push(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π CN –∫–æ–¥ L1: ${data.l1_cn}`);
  }
  if (data.l2_cn && !cnPattern.test(data.l2_cn)) {
    errors.push(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π CN –∫–æ–¥ L2: ${data.l2_cn}`);
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è ISO –∫–æ–¥–æ–≤ —Å—Ç—Ä–∞–Ω
  const isoPattern = /^[A-Z]{2}$/;
  if (!isoPattern.test(data.org_country)) {
    errors.push(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ISO –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã: ${data.org_country}`);
  }
  if (data.l1_origin && !isoPattern.test(data.l1_origin)) {
    errors.push(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ISO –∫–æ–¥ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è L1: ${data.l1_origin}`);
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è UN/LOCODE
  const unlocPattern = /^[A-Z]{2}[A-Z0-9]{3}$/;
  if (data.l1_unloc && !unlocPattern.test(data.l1_unloc)) {
    errors.push(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UN/LOCODE L1: ${data.l1_unloc}`);
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  const numericFields = ['l1_qty', 'l1_dir', 'l1_el_mwh', 'l1_el_ef', 'l2_qty', 'l2_dir', 'l2_el_mwh', 'l2_el_ef'];
  numericFields.forEach(field => {
    if (data[field] && (isNaN(parseFloat(data[field])) || parseFloat(data[field]) <= 0)) {
      errors.push(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ${field}: ${data[field]}`);
    }
  });
  
  return errors;
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testData = {
  companyName: '–û–û–û "–ú–µ—Ç–∞–ª–ª –≠–∫—Å–ø–æ—Ä—Ç"',
  eori: 'RU123456789012345',
  cbamId: 'DL-2025-000456',
  address: '115114, –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –≠–∫—Å–ø–æ—Ä—Ç–Ω–∞—è, –¥. 15',
  country: 'RU',
  email: 'cbam@metalexport.ru',
  quarter: '2025-2',
  signerName: '–°–∏–¥–æ—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á',
  signerPosition: '–î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ —ç–∫—Å–ø–æ—Ä—Ç—É'
};

try {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ CBAM —à–∞–±–ª–æ–Ω–∞ 2025...');
  
  // –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω
  const templatePath = path.join(__dirname, 'templates', 'eu-cbam-quarterly-2025.html');
  const template = fs.readFileSync(templatePath, 'utf-8');
  console.log('‚úÖ CBAM 2025 —à–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω');
  
  // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
  const templateData = createCBAMTemplateData(testData);
  console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ —Å–æ–∑–¥–∞–Ω—ã');
  
  // –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
  const processedHtml = replaceTokens(template, templateData);
  console.log('‚úÖ –¢–æ–∫–µ–Ω—ã [[snake_case]] –∑–∞–º–µ–Ω–µ–Ω—ã');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∑–∞–º–µ–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
  const unreplacedTokens = processedHtml.match(/\[\[[a-z_0-9]+\]\]/g);
  if (unreplacedTokens) {
    console.log('‚ö†Ô∏è  –ù–µ–∑–∞–º–µ–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:');
    unreplacedTokens.forEach(token => console.log(`  - ${token}`));
  } else {
    console.log('‚úÖ –í—Å–µ —Ç–æ–∫–µ–Ω—ã –∑–∞–º–µ–Ω–µ–Ω—ã');
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è CBAM –¥–∞–Ω–Ω—ã—Ö
  console.log('\nüßÆ –í–∞–ª–∏–¥–∞—Ü–∏—è CBAM –¥–∞–Ω–Ω—ã—Ö:');
  const validationErrors = validateCBAMData(templateData);
  
  if (validationErrors.length === 0) {
    console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é');
  } else {
    console.log('‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:');
    validationErrors.forEach(error => console.log(`  - ${error}`));
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã –≤—ã–±—Ä–æ—Å–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É–ª—É)
  const line1Direct = parseFloat(templateData.l1_qty) * parseFloat(templateData.l1_dir);
  const line2Direct = parseFloat(templateData.l2_qty) * parseFloat(templateData.l2_dir);
  const calculatedDirect = line1Direct + line2Direct;
  
  const line1Indirect = parseFloat(templateData.l1_qty) * parseFloat(templateData.l1_el_mwh) * parseFloat(templateData.l1_el_ef);
  const line2Indirect = parseFloat(templateData.l2_qty) * parseFloat(templateData.l2_el_mwh) * parseFloat(templateData.l2_el_ef);
  const calculatedIndirect = line1Indirect + line2Indirect;
  
  const calculatedTotal = calculatedDirect + calculatedIndirect;
  const reportedTotal = parseFloat(templateData.total_emissions);
  const difference = Math.abs(calculatedTotal - reportedTotal);
  
  if (difference < 0.1) {
    console.log(`‚úÖ –°—É–º–º–∞ –≤—ã–±—Ä–æ—Å–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: ${calculatedDirect.toFixed(1)} + ${calculatedIndirect.toFixed(1)} = ${reportedTotal.toFixed(1)} —Ç CO‚ÇÇ-—ç–∫–≤`);
  } else {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å—É–º–º–µ –≤—ã–±—Ä–æ—Å–æ–≤: —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ ${calculatedTotal.toFixed(1)}, —É–∫–∞–∑–∞–Ω–æ ${reportedTotal.toFixed(1)}`);
  }
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
  const goodsCount = [templateData.l1_cn, templateData.l2_cn, templateData.l3_cn].filter(cn => cn && cn.length > 0).length;
  console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: ${goodsCount}`);
  
  if (goodsCount > 0) {
    console.log('üìã –¢–æ–≤–∞—Ä—ã CBAM:');
    if (templateData.l1_cn) {
      console.log(`  1. CN ${templateData.l1_cn}: ${templateData.l1_qty} ${templateData.l1_unit} –∏–∑ ${templateData.l1_origin} (${templateData.l1_ip_out_co2} —Ç CO‚ÇÇ)`);
    }
    if (templateData.l2_cn) {
      console.log(`  2. CN ${templateData.l2_cn}: ${templateData.l2_qty} ${templateData.l2_unit} –∏–∑ ${templateData.l2_origin} (${templateData.l2_ip_out_co2} —Ç CO‚ÇÇ)`);
    }
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const outputPath = path.join(__dirname, 'test-output-cbam-2025.html');
  fs.writeFileSync(outputPath, processedHtml);
  console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${outputPath}`);
  
  console.log('\nüìã –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞:');
  console.log('- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–∫–µ–Ω—ã [[snake_case]] (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å 296-–§–ó)');
  console.log('- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç XSD v1.4.1.1 (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)');
  console.log('- –ü–æ–ª–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ Annex I —Å 18 –∫–æ–ª–æ–Ω–∫–∞–º–∏');
  console.log('- –í–∞–ª–∏–¥–∞—Ü–∏—è CN –∫–æ–¥–æ–≤, EORI, ISO —Å—Ç—Ä–∞–Ω, UN/LOCODE');
  console.log('- PDF-friendly CSS —Å page-break –∫–æ–Ω—Ç—Ä–æ–ª–µ–º');
  console.log('- –ì–æ—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å template-engine.ts');
  
  console.log('\nüéâ –¢–µ—Å—Ç CBAM 2025 —à–∞–±–ª–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CBAM 2025 —à–∞–±–ª–æ–Ω–∞:', error.message);
}