"use strict";
/**
 * Queue Manager –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ pg-boss
 * –í–∫–ª—é—á–∞–µ—Ç –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ (–∫—Ä–µ–¥–∏—Ç—ã –∏ surge-pricing)
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueueManager = void 0;
exports.getQueueManager = getQueueManager;
exports.stopQueueManager = stopQueueManager;
const PgBoss = require('pg-boss');
const pg_boss_config_1 = require("./pg-boss-config");
const credits_service_1 = require("./credits-service");
const surge_pricing_1 = require("./surge-pricing");
// –ó–∞–≥–ª—É—à–∫–∏ —É–¥–∞–ª–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Queue Manager
 */
class QueueManager {
    constructor() {
        this.boss = null;
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º singleton —Å–µ—Ä–≤–∏—Å—ã
    }
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pg-boss
     */
    async initialize() {
        if (this.boss) {
            console.log('‚ö†Ô∏è Queue Manager —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }
        try {
            this.boss = await (0, pg_boss_config_1.createPgBoss)();
            console.log('‚úÖ Queue Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Queue Manager:', error);
            throw error;
        }
    }
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ pg-boss
     */
    async stop() {
        if (this.boss) {
            await this.boss.stop();
            this.boss = null;
            console.log('üõë Queue Manager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
    }
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ OCR –≤ –æ—á–µ—Ä–µ–¥—å
     */
    async addOcrJob(data, options = {}) {
        if (!this.boss) {
            throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
        const hasCredits = await credits_service_1.creditsService.hasCredits(data.organizationId || data.userId);
        if (!hasCredits) {
            console.log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ${data.organizationId || data.userId}`);
            throw new Error('INSUFFICIENT_CREDITS');
        }
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å —É—á–µ—Ç–æ–º surge-pricing
        let priority = pg_boss_config_1.JOB_PRIORITIES.NORMAL;
        if (options.priority === 'urgent') {
            priority = pg_boss_config_1.JOB_PRIORITIES.URGENT;
        }
        else if (options.priority === 'high' || surge_pricing_1.surgePricingService.getJobPriority() === 'high') {
            priority = pg_boss_config_1.JOB_PRIORITIES.HIGH;
        }
        const jobOptions = {
            priority,
            retryLimit: options.retryLimit || 3,
            expireInHours: options.expireInHours || 1
        };
        console.log(`üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ OCR –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å:`, {
            documentId: data.documentId,
            priority,
            isSurge: surge_pricing_1.surgePricingService.isSurgePeriod(),
            organizationId: data.organizationId || data.userId
        });
        try {
            const jobId = await this.boss.send(pg_boss_config_1.QUEUE_NAMES.OCR, data, jobOptions);
            console.log(`‚úÖ OCR –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID: ${jobId}`);
            return jobId;
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è OCR –∑–∞–¥–∞—á–∏:', error);
            throw error;
        }
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
     */
    async getJobStatus(jobId) {
        if (!this.boss) {
            throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        try {
            const job = await this.boss.getJobById(pg_boss_config_1.QUEUE_NAMES.OCR, jobId);
            if (!job) {
                return null;
            }
            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ pg-boss API
            return {
                id: job.id,
                status: this.mapJobState(job.state),
                progress: job.data?.progress,
                result: job.output,
                error: job.output?.error,
                createdAt: job.createdOn,
                processedAt: job.completedOn || job.failedOn,
                priority: job.priority || pg_boss_config_1.JOB_PRIORITIES.NORMAL
            };
        }
        catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ ${jobId}:`, error);
            throw error;
        }
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π
     */
    async getQueueStats() {
        if (!this.boss) {
            throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        try {
            // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –ø–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
            const totalSize = await this.boss.getQueueSize(pg_boss_config_1.QUEUE_NAMES.OCR);
            // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
            const stats = {
                waiting: totalSize,
                active: 0,
                completed: 0,
                failed: 0,
                total: totalSize
            };
            console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π:', stats);
            return stats;
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π:', error);
            throw error;
        }
    }
    /**
     * –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
     */
    async cleanCompletedJobs(olderThanHours = 24) {
        if (!this.boss) {
            throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        try {
            // pg-boss –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            // –ó–¥–µ—Å—å –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏
            console.log(`üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–¥–∞—á —Å—Ç–∞—Ä—à–µ ${olderThanHours} —á–∞—Å–æ–≤`);
            // –ó–∞–≥–ª—É—à–∫–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            const cleanedCount = 0; // pg-boss –¥–µ–ª–∞–µ—Ç —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ ${cleanedCount} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á`);
            return cleanedCount;
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:', error);
            throw error;
        }
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤)
     */
    async onJobCompleted(jobId, result) {
        console.log(`‚úÖ –ó–∞–¥–∞—á–∞ ${jobId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        // –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã
        const organizationId = result.documentId; // –≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º documentId
        const creditsToDebit = surge_pricing_1.surgePricingService.getSurgeMultiplier(); // 1 –∏–ª–∏ 2 –∫—Ä–µ–¥–∏—Ç–∞
        await credits_service_1.creditsService.debitCredits(organizationId, creditsToDebit, 'OCR processing completed');
        console.log(`üí≥ –°–ø–∏—Å–∞–Ω–æ ${creditsToDebit} –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è ${organizationId}`);
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ surge-pricing
     */
    getSurgePricingInfo() {
        return {
            isSurge: surge_pricing_1.surgePricingService.isSurgePeriod(),
            multiplier: surge_pricing_1.surgePricingService.getSurgeMultiplier()
        };
    }
    /**
     * –ú–∞–ø–ø–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏–π pg-boss –≤ –Ω–∞—à–∏ —Å—Ç–∞—Ç—É—Å—ã
     */
    mapJobState(state) {
        switch (state) {
            case 'created':
            case 'retry':
                return 'waiting';
            case 'active':
                return 'active';
            case 'completed':
                return 'completed';
            case 'failed':
            case 'cancelled':
                return 'failed';
            default:
                return 'waiting';
        }
    }
}
exports.QueueManager = QueueManager;
// Singleton instance
let queueManagerInstance = null;
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Queue Manager
 */
async function getQueueManager() {
    if (!queueManagerInstance) {
        queueManagerInstance = new QueueManager();
        await queueManagerInstance.initialize();
    }
    return queueManagerInstance;
}
/**
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Queue Manager (–¥–ª—è graceful shutdown)
 */
async function stopQueueManager() {
    if (queueManagerInstance) {
        await queueManagerInstance.stop();
        queueManagerInstance = null;
    }
}
