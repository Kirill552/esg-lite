"use strict";
/**
 * Credits Service - –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫—Ä–µ–¥–∏—Ç–æ–≤
 * –í –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Å –ë–î –∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.creditsService = exports.CreditsService = void 0;
/**
 * –ó–∞–≥–ª—É—à–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
 * TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Å PostgreSQL —Ç–∞–±–ª–∏—Ü–∞–º–∏
 */
class CreditsService {
    constructor() {
        // –ó–∞–≥–ª—É—à–∫–∞: —Ö—Ä–∞–Ω–∏–º –±–∞–ª–∞–Ω—Å—ã –≤ –ø–∞–º—è—Ç–∏
        this.balances = new Map();
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã
        this.balances.set('default', 1000);
        console.log('üîß [STUB] Credits Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏');
    }
    static getInstance() {
        if (!CreditsService.instance) {
            CreditsService.instance = new CreditsService();
        }
        return CreditsService.instance;
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
     */
    async checkBalance(organizationId) {
        const balance = this.balances.get(organizationId) || this.balances.get('default') || 1000;
        console.log(`üîß [STUB] –ë–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è ${organizationId}: ${balance}`);
        return balance;
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
     */
    async hasCredits(organizationId, required = 1) {
        const balance = await this.checkBalance(organizationId);
        const hasEnough = balance >= required;
        console.log(`üîß [STUB] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ ${organizationId}: —Ç—Ä–µ–±—É–µ—Ç—Å—è ${required}, –¥–æ—Å—Ç—É–ø–Ω–æ ${balance} - ${hasEnough ? 'OK' : '–ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û'}`);
        return hasEnough;
    }
    /**
     * –°–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤
     */
    async debitCredits(organizationId, amount, description = 'OCR processing') {
        const currentBalance = await this.checkBalance(organizationId);
        if (currentBalance < amount) {
            console.log(`üîß [STUB] –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è ${organizationId}`);
            return false;
        }
        // –ó–∞–≥–ª—É—à–∫–∞: –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –ø–∞–º—è—Ç–∏
        const newBalance = currentBalance - amount;
        this.balances.set(organizationId, newBalance);
        console.log(`üîß [STUB] –°–ø–∏—Å–∞–Ω–æ ${amount} –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è ${organizationId}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance}`);
        // TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –ë–î
        this.logTransaction(organizationId, amount, 'debit', description);
        return true;
    }
    /**
     * –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤
     */
    async creditCredits(organizationId, amount, description = 'Credits purchase') {
        const currentBalance = await this.checkBalance(organizationId);
        const newBalance = currentBalance + amount;
        // –ó–∞–≥–ª—É—à–∫–∞: –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –ø–∞–º—è—Ç–∏
        this.balances.set(organizationId, newBalance);
        console.log(`üîß [STUB] –ü–æ–ø–æ–ª–Ω–µ–Ω–æ ${amount} –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è ${organizationId}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance}`);
        // TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –ë–î
        this.logTransaction(organizationId, amount, 'credit', description);
        return true;
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
     */
    async getTransactionHistory(organizationId, limit = 10) {
        console.log(`üîß [STUB] –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è ${organizationId} (–ª–∏–º–∏—Ç: ${limit})`);
        // –ó–∞–≥–ª—É—à–∫–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        // TODO: –†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
        return [];
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ
     */
    async getBalanceInfo(organizationId) {
        const balance = await this.checkBalance(organizationId);
        return {
            organizationId,
            balance,
            lastUpdated: new Date()
        };
    }
    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
     */
    logTransaction(organizationId, amount, type, description) {
        const transaction = {
            id: `tx_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            organizationId,
            amount,
            type,
            description,
            createdAt: new Date()
        };
        console.log(`üîß [STUB] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞:`, transaction);
        // TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
    }
    /**
     * –°–±—Ä–æ—Å –±–∞–ª–∞–Ω—Å–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
     */
    async resetBalances() {
        this.balances.clear();
        this.balances.set('default', 1000);
        console.log('üîß [STUB] –ë–∞–ª–∞–Ω—Å—ã –∫—Ä–µ–¥–∏—Ç–æ–≤ —Å–±—Ä–æ—à–µ–Ω—ã');
    }
}
exports.CreditsService = CreditsService;
// –≠–∫—Å–ø–æ—Ä—Ç singleton instance
exports.creditsService = CreditsService.getInstance();
