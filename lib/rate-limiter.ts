/**
 * Rate Limiter - —Å–∏—Å—Ç–µ–º–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç PostgreSQL –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å CreditsService –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
 * –ó–∞–¥–∞—á–∞ 2.3: –û–±–Ω–æ–≤–∏—Ç—å Rate Limiter –¥–ª—è —É—á–µ—Ç–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
 */

import { prisma } from './prisma';
import { CreditsService } from './credits-service';

export interface RateLimitConfig {
  windowSizeMs: number;      // –†–∞–∑–º–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  maxRequests: number;       // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ–∫–Ω–µ
  cleanupIntervalMs: number; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
  subscriptionLimits: {      // –õ–∏–º–∏—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–∞—Ä–∏—Ñ–æ–≤
    FREE: number;           // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω
    LITE_ANNUAL: number;    // Annual Lite —Ç–∞—Ä–∏—Ñ
    CBAM_ADDON: number;     // CBAM Add-on —Ç–∞—Ä–∏—Ñ
    PREMIUM: number;        // –ü—Ä–µ–º–∏—É–º —Ç–∞—Ä–∏—Ñ
  };
}

export interface RateLimitResult {
  allowed: boolean;          // –†–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å
  remaining: number;         // –û—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
  resetTime: Date;          // –í—Ä–µ–º—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞
  retryAfter?: number;      // –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å (–µ—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω)
  reason?: string;          // –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
  subscriptionType?: string; // –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
  hasCredits?: boolean;     // –ï—Å—Ç—å –ª–∏ –∫—Ä–µ–¥–∏—Ç—ã
}

export interface RateLimitStats {
  organizationId: string;
  currentCount: number;
  maxRequests: number;
  windowStart: Date;
  windowEnd: Date;
  hasCredits: boolean;
  isSurgePeriod: boolean;
  subscriptionType: string;
  creditsBalance: number;
}

/**
 * Rate Limiter –∫–ª–∞—Å—Å –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
 */
export class RateLimiter {
  private config: RateLimitConfig;
  private cleanupTimer: NodeJS.Timeout | null = null;
  private creditsService: CreditsService;

  constructor(config: Partial<RateLimitConfig> = {}) {
    this.config = {
      windowSizeMs: config.windowSizeMs || 60 * 60 * 1000, // 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      maxRequests: config.maxRequests || 100,               // 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å
      cleanupIntervalMs: config.cleanupIntervalMs || 5 * 60 * 1000, // –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
      subscriptionLimits: config.subscriptionLimits || {
        FREE: 10,           // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω - 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å
        LITE_ANNUAL: 100,   // Annual Lite - 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å
        CBAM_ADDON: 200,    // CBAM Add-on - 200 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å
        PREMIUM: 500        // –ü—Ä–µ–º–∏—É–º - 500 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å
      }
    };

    this.creditsService = new CreditsService();

    console.log('üîß Rate Limiter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', {
      windowSizeMs: this.config.windowSizeMs,
      maxRequests: this.config.maxRequests,
      cleanupIntervalMs: this.config.cleanupIntervalMs,
      subscriptionLimits: this.config.subscriptionLimits
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    this.startCleanupTimer();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  async checkLimit(organizationId: string): Promise<RateLimitResult> {
    try {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: ${organizationId}`);

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–æ–≤
      const creditBalance = await this.creditsService.checkBalance(organizationId);
      const hasCredits = creditBalance.balance > 0;
      
      if (!hasCredits) {
        console.log(`‚ùå –ù—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è ${organizationId}: ${creditBalance.balance} —Ç CO‚ÇÇ`);
        return {
          allowed: false,
          remaining: 0,
          resetTime: new Date(),
          reason: 'INSUFFICIENT_CREDITS',
          subscriptionType: creditBalance.planType,
          hasCredits: false
        };
      }

      // 2. –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç—ã
      const subscriptionType = creditBalance.planType || 'FREE';
      const maxRequests = await this.getEffectiveMaxRequests(organizationId, subscriptionType);

      // 3. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ
      const windowStart = this.getCurrentWindowStart();
      const windowEnd = new Date(windowStart.getTime() + this.config.windowSizeMs);

      // 4. –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ª–∏–º–∏—Ç–∞
      const rateLimitRecord = await this.getOrCreateRateLimit(organizationId, windowStart);
      
      if (rateLimitRecord.requestCount >= maxRequests) {
        console.log(`‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–ª—è ${organizationId}: ${rateLimitRecord.requestCount}/${maxRequests} (–¢–∞—Ä–∏—Ñ: ${subscriptionType})`);
        
        const retryAfter = Math.ceil((windowEnd.getTime() - Date.now()) / 1000);
        
        return {
          allowed: false,
          remaining: 0,
          resetTime: windowEnd,
          retryAfter,
          reason: 'RATE_LIMIT_EXCEEDED',
          subscriptionType,
          hasCredits: true
        };
      }

      // 5. –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω
      const remaining = maxRequests - rateLimitRecord.requestCount;

      console.log(`‚úÖ –õ–∏–º–∏—Ç OK –¥–ª—è ${organizationId}: ${rateLimitRecord.requestCount}/${maxRequests} (–æ—Å—Ç–∞–ª–æ—Å—å: ${remaining}, –¢–∞—Ä–∏—Ñ: ${subscriptionType})`);

      return {
        allowed: true,
        remaining,
        resetTime: windowEnd,
        subscriptionType,
        hasCredits: true
      };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –¥–ª—è ${organizationId}:`, error);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å (fail-open)
      return {
        allowed: true,
        remaining: this.config.maxRequests,
        resetTime: new Date(Date.now() + this.config.windowSizeMs),
        reason: 'ERROR_FALLBACK'
      };
    }
  }

  /**
   * –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  async incrementCounter(organizationId: string): Promise<void> {
    try {
      console.log(`üìà –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è ${organizationId}`);

      const windowStart = this.getCurrentWindowStart();
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await prisma.rateLimit.upsert({
        where: {
          organizationId_windowStart: {
            organizationId,
            windowStart
          }
        },
        update: {
          requestCount: {
            increment: 1
          },
          updatedAt: new Date()
        },
        create: {
          organizationId,
          requestCount: 1,
          windowStart,
          updatedAt: new Date()
        }
      });

      console.log(`‚úÖ –°—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω –¥–ª—è ${organizationId}`);

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è ${organizationId}:`, error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  async getStats(organizationId: string): Promise<RateLimitStats> {
    try {
      const windowStart = this.getCurrentWindowStart();
      const windowEnd = new Date(windowStart.getTime() + this.config.windowSizeMs);

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å –ª–∏–º–∏—Ç–∞
      const rateLimitRecord = await prisma.rateLimit.findUnique({
        where: {
          organizationId_windowStart: {
            organizationId,
            windowStart
          }
        }
      });

      // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
      const creditBalance = await this.creditsService.checkBalance(organizationId);
      const subscriptionType = creditBalance.planType || 'FREE';
      const maxRequests = await this.getEffectiveMaxRequests(organizationId, subscriptionType);
      
      const currentCount = rateLimitRecord?.requestCount || 0;
      const hasCredits = creditBalance.balance > 0;
      const operationCost = await this.creditsService.getOperationCost('ocr');
      const isSurgePeriod = operationCost.surgePricingMultiplier > 1;

      return {
        organizationId,
        currentCount,
        maxRequests,
        windowStart,
        windowEnd,
        hasCredits,
        isSurgePeriod,
        subscriptionType,
        creditsBalance: creditBalance.balance
      };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è ${organizationId}:`, error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const windowStart = this.getCurrentWindowStart();
      return {
        organizationId,
        currentCount: 0,
        maxRequests: this.config.maxRequests,
        windowStart,
        windowEnd: new Date(windowStart.getTime() + this.config.windowSizeMs),
        hasCredits: false,
        isSurgePeriod: false,
        subscriptionType: 'FREE',
        creditsBalance: 0
      };
    }
  }

  /**
   * –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async resetLimits(organizationId: string): Promise<void> {
    try {
      console.log(`üîÑ –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è ${organizationId}`);

      await prisma.rateLimit.deleteMany({
        where: {
          organizationId
        }
      });

      console.log(`‚úÖ –õ–∏–º–∏—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è ${organizationId}`);

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è ${organizationId}:`, error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏ –ª–∏–º–∏—Ç–æ–≤
   */
  async canPerformOperation(organizationId: string, operationType: 'ocr' | 'report_generation' | 'api_call' = 'ocr'): Promise<{
    allowed: boolean;
    reason?: string;
    requiredCredits?: number;
    availableCredits?: number;
    rateLimitResult?: RateLimitResult;
  }> {
    try {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
      const rateLimitResult = await this.checkLimit(organizationId);
      
      if (!rateLimitResult.allowed) {
        return {
          allowed: false,
          reason: rateLimitResult.reason,
          rateLimitResult
        };
      }

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
      const operationCost = await this.creditsService.getOperationCost(operationType);
      const creditBalance = await this.creditsService.checkBalance(organizationId);
      
      if (creditBalance.balance < operationCost.finalCost) {
        return {
          allowed: false,
          reason: 'INSUFFICIENT_CREDITS_FOR_OPERATION',
          requiredCredits: operationCost.finalCost,
          availableCredits: creditBalance.balance,
          rateLimitResult
        };
      }

      return {
        allowed: true,
        requiredCredits: operationCost.finalCost,
        availableCredits: creditBalance.balance,
        rateLimitResult
      };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è ${organizationId}:`, error);
      return {
        allowed: false,
        reason: 'ERROR_CHECKING_OPERATION'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ surge-pricing
   */
  private async getEffectiveMaxRequests(organizationId: string, subscriptionType?: string): Promise<number> {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ª–∏–º–∏—Ç –ø–æ —Ç–∏–ø—É –ø–æ–¥–ø–∏—Å–∫–∏
    const subType = subscriptionType || 'FREE';
    const baseLimitKey = subType.replace('_', '_') as keyof typeof this.config.subscriptionLimits;
    let baseLimit = this.config.subscriptionLimits[baseLimitKey] || this.config.subscriptionLimits.FREE;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º surge pricing —á–µ—Ä–µ–∑ CreditsService
      const operationCost = await this.creditsService.getOperationCost('ocr');
      const isSurgePeriod = operationCost.surgePricingMultiplier > 1;
      
      if (isSurgePeriod) {
        // –í –ø–µ—Ä–∏–æ–¥ surge-pricing —É–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç—ã –Ω–∞ 50%
        const surgeMaxRequests = Math.floor(baseLimit * 0.5);
        console.log(`‚ö° Surge –ø–µ—Ä–∏–æ–¥: –ª–∏–º–∏—Ç —É–º–µ–Ω—å—à–µ–Ω –¥–æ ${surgeMaxRequests} –¥–ª—è ${organizationId} (${subType})`);
        return surgeMaxRequests;
      }

      console.log(`üìä –õ–∏–º–∏—Ç –¥–ª—è ${organizationId}: ${baseLimit} (${subType})`);
      return baseLimit;
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è surge pricing –¥–ª—è ${organizationId}:`, error);
      return baseLimit;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–∏–º–∏—Ç–∞
   */
  private async getOrCreateRateLimit(organizationId: string, windowStart: Date) {
    return await prisma.rateLimit.upsert({
      where: {
        organizationId_windowStart: {
          organizationId,
          windowStart
        }
      },
      update: {},
      create: {
        organizationId,
        requestCount: 0,
        windowStart
      }
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
   */
  private getCurrentWindowStart(): Date {
    const now = Date.now();
    const windowStart = Math.floor(now / this.config.windowSizeMs) * this.config.windowSizeMs;
    return new Date(windowStart);
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
   */
  private startCleanupTimer(): void {
    this.cleanupTimer = setInterval(async () => {
      await this.cleanupOldRecords();
    }, this.config.cleanupIntervalMs);

    console.log(`üßπ –¢–∞–π–º–µ—Ä –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${this.config.cleanupIntervalMs}ms)`);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ª–∏–º–∏—Ç–æ–≤
   */
  private async cleanupOldRecords(): Promise<void> {
    try {
      const cutoffTime = new Date(Date.now() - this.config.windowSizeMs * 2); // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 2 –æ–∫–æ–Ω
      
      const result = await prisma.rateLimit.deleteMany({
        where: {
          windowStart: {
            lt: cutoffTime
          }
        }
      });

      if (result.count > 0) {
        console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${result.count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ª–∏–º–∏—Ç–æ–≤`);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π:', error);
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Rate Limiter –∏ –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  async stop(): Promise<void> {
    if (this.cleanupTimer) {
      clearInterval(this.cleanupTimer);
      this.cleanupTimer = null;
      console.log('üõë –¢–∞–π–º–µ—Ä –æ—á–∏—Å—Ç–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    await this.cleanupOldRecords();
    console.log('‚úÖ Rate Limiter –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

/**
 * Singleton instance –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 */
let rateLimiterInstance: RateLimiter | null = null;

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Rate Limiter
 */
export function getRateLimiter(config?: Partial<RateLimitConfig>): RateLimiter {
  if (!rateLimiterInstance) {
    rateLimiterInstance = new RateLimiter(config);
  }
  return rateLimiterInstance;
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 */
export const rateLimiter = getRateLimiter();