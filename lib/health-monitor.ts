/**
 * Health Monitor –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π
 * –ó–∞–¥–∞—á–∞ 7.1: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å Health Monitor –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: 3.1, 3.2, 3.3
 */

import { getQueueManager } from './queue';
import { prisma } from './prisma';
import { healthLogger } from './structured-logger';

export interface HealthStatus {
  status: 'healthy' | 'warning' | 'critical' | 'unhealthy';
  message: string;
  timestamp: Date;
  details?: any;
}

export interface QueueStorageHealth extends HealthStatus {
  connectionTime?: number;
  version?: string;
  memoryUsage?: number;
}

export interface QueueHealth extends HealthStatus {
  stats: {
    waiting: number;
    active: number;
    completed: number;
    failed: number;
    total: number;
  };
  activeJobs?: any[];
  failedJobs?: any[];
}

export interface OverallHealth {
  status: 'healthy' | 'warning' | 'critical' | 'unhealthy';
  timestamp: Date;
  components: {
    queueStorage: QueueStorageHealth;
    queue: QueueHealth;
    database: HealthStatus;
  };
  summary: {
    totalIssues: number;
    criticalIssues: number;
    warnings: number;
  };
}

export class HealthMonitor {
  private static instance: HealthMonitor;

  private constructor() {}

  public static getInstance(): HealthMonitor {
    if (!HealthMonitor.instance) {
      HealthMonitor.instance = new HealthMonitor();
    }
    return HealthMonitor.instance;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –æ—á–µ—Ä–µ–¥–µ–π (PostgreSQL)
   * –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 3.1, 3.3
   */
  async checkQueueStorageHealth(): Promise<QueueStorageHealth> {
    const startTime = Date.now();
    
    try {
      await healthLogger.debug('Starting queue storage health check');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
      const connectionStart = Date.now();
      await prisma.$queryRaw`SELECT 1 as health_check`;
      const connectionTime = Date.now() - connectionStart;

      // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é PostgreSQL
      const versionResult = await prisma.$queryRaw<[{version: string}]>`SELECT version()`;
      const version = versionResult[0]?.version || 'Unknown';

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
      const connectionStats = await prisma.$queryRaw<[{
        total_connections: bigint;
        active_connections: bigint;
        max_connections: number;
      }]>`
        SELECT 
          (SELECT count(*) FROM pg_stat_activity) as total_connections,
          (SELECT count(*) FROM pg_stat_activity WHERE state = 'active') as active_connections,
          (SELECT setting::int FROM pg_settings WHERE name = 'max_connections') as max_connections
      `;

      const stats = connectionStats[0];
      const connectionUsage = stats ? (Number(stats.active_connections) / stats.max_connections) * 100 : 0;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      let status: 'healthy' | 'warning' | 'critical' | 'unhealthy' = 'healthy';
      let message = 'PostgreSQL —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—á–µ—Ä–µ–¥–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ';

      if (connectionTime > 1000) {
        status = 'warning';
        message = `–ú–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL (${connectionTime}ms)`;
      }

      if (connectionUsage > 80) {
        status = 'critical';
        message = `–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π PostgreSQL (${connectionUsage.toFixed(1)}%)`;
      }

      if (connectionTime > 5000) {
        status = 'unhealthy';
        message = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL (${connectionTime}ms)`;
      }

      console.log(`‚úÖ PostgreSQL: ${status} (${connectionTime}ms, ${connectionUsage.toFixed(1)}% –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π)`);

      return {
        status,
        message,
        timestamp: new Date(),
        connectionTime,
        version: version.split(' ')[0] + ' ' + version.split(' ')[1], // PostgreSQL version
        memoryUsage: connectionUsage,
        details: {
          totalConnections: stats ? Number(stats.total_connections) : 0,
          activeConnections: stats ? Number(stats.active_connections) : 0,
          maxConnections: stats?.max_connections || 0,
          responseTime: connectionTime
        }
      };

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PostgreSQL:', error.message);

      // –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 3.3: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º unhealthy –µ—Å–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
      return {
        status: 'unhealthy',
        message: `PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`,
        timestamp: new Date(),
        connectionTime: Date.now() - startTime,
        details: {
          error: error.message,
          errorCode: error.code,
          errorType: 'CONNECTION_ERROR'
        }
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á
   * –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 3.1, 3.2
   */
  async checkQueueHealth(): Promise<QueueHealth> {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á...');

      const queueManager = await getQueueManager();
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏ (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ 3.2)
      const stats = await queueManager.getQueueStats();
      
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏:', stats);

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      let activeJobs: any[] = [];
      let failedJobs: any[] = [];

      try {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        activeJobs = await queueManager.getActiveJobs(5);
        failedJobs = await queueManager.getFailedJobs(5);
      } catch (jobError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á:', (jobError as Error).message);
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏
      let status: 'healthy' | 'warning' | 'critical' | 'unhealthy' = 'healthy';
      let message = '–û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ';

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –æ—á–µ—Ä–µ–¥—å
      const totalJobs = stats.waiting + stats.active;
      const failureRate = stats.total > 0 ? (stats.failed / stats.total) * 100 : 0;

      if (totalJobs > 100) {
        status = 'warning';
        message = `–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –æ—á–µ—Ä–µ–¥—å (${totalJobs} –∑–∞–¥–∞—á –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ)`;
      }

      if (failureRate > 10) {
        status = 'critical';
        message = `–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏ (${failureRate.toFixed(1)}%)`;
      }

      if (totalJobs > 500) {
        status = 'critical';
        message = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –æ—á–µ—Ä–µ–¥—å (${totalJobs} –∑–∞–¥–∞—á)`;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Å—Ç—Ä—è–≤—à–∏–µ –∑–∞–¥–∞—á–∏
      const stuckActiveJobs = activeJobs.filter(job => {
        const startTime = new Date(job.startedAt || job.createdAt);
        const now = new Date();
        const processingTime = now.getTime() - startTime.getTime();
        return processingTime > 10 * 60 * 1000; // –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç
      });

      if (stuckActiveJobs.length > 0) {
        status = 'warning';
        message = `–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞—Å—Ç—Ä—è–≤—à–∏–µ –∑–∞–¥–∞—á–∏ (${stuckActiveJobs.length})`;
      }

      console.log(`‚úÖ –û—á–µ—Ä–µ–¥—å: ${status} (${totalJobs} –∞–∫—Ç–∏–≤–Ω—ã—Ö, ${failureRate.toFixed(1)}% –æ—à–∏–±–æ–∫)`);

      return {
        status,
        message,
        timestamp: new Date(),
        stats,
        activeJobs: activeJobs.map(job => ({
          id: job.id,
          createdAt: job.createdAt,
          startedAt: job.startedAt,
          priority: job.priority,
          data: {
            documentId: job.data?.documentId,
            fileName: job.data?.fileName
          }
        })),
        failedJobs: failedJobs.map(job => ({
          id: job.id,
          error: job.error,
          failedAt: job.failedAt,
          retryCount: job.retryCount,
          data: {
            documentId: job.data?.documentId,
            fileName: job.data?.fileName
          }
        })),
        details: {
          totalJobs,
          failureRate,
          stuckJobs: stuckActiveJobs.length,
          queueLoad: totalJobs > 0 ? 'high' : totalJobs > 50 ? 'medium' : 'low'
        }
      };

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–µ—Ä–µ–¥–∏:', error.message);

      return {
        status: 'unhealthy',
        message: `–û—á–µ—Ä–µ–¥—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${error.message}`,
        timestamp: new Date(),
        stats: {
          waiting: 0,
          active: 0,
          completed: 0,
          failed: 0,
          total: 0
        },
        details: {
          error: error.message,
          errorType: 'QUEUE_ERROR'
        }
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async checkDatabaseHealth(): Promise<HealthStatus> {
    const startTime = Date.now();

    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
      await prisma.$queryRaw`SELECT 1`;
      const responseTime = Date.now() - startTime;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      const documentCount = await prisma.document.count();
      const recentDocuments = await prisma.document.count({
        where: {
          createdAt: {
            gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
          }
        }
      });

      let status: 'healthy' | 'warning' | 'critical' | 'unhealthy' = 'healthy';
      let message = '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ';

      if (responseTime > 500) {
        status = 'warning';
        message = `–ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫ –ë–î (${responseTime}ms)`;
      }

      if (responseTime > 2000) {
        status = 'critical';
        message = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫ –ë–î (${responseTime}ms)`;
      }

      console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${status} (${responseTime}ms, ${documentCount} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)`);

      return {
        status,
        message,
        timestamp: new Date(),
        details: {
          responseTime,
          totalDocuments: documentCount,
          recentDocuments,
          tablesChecked: ['documents', 'users']
        }
      };

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î:', error.message);

      return {
        status: 'unhealthy',
        message: `–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${error.message}`,
        timestamp: new Date(),
        details: {
          error: error.message,
          responseTime: Date.now() - startTime
        }
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
   * –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 3.1
   */
  async getOverallHealth(): Promise<OverallHealth> {
    console.log('üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...');

    const [queueStorageHealth, queueHealth, databaseHealth] = await Promise.all([
      this.checkQueueStorageHealth(),
      this.checkQueueHealth(),
      this.checkDatabaseHealth()
    ]);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    const statuses = [queueStorageHealth.status, queueHealth.status, databaseHealth.status];
    
    let overallStatus: 'healthy' | 'warning' | 'critical' | 'unhealthy' = 'healthy';
    
    if (statuses.includes('unhealthy')) {
      overallStatus = 'unhealthy';
    } else if (statuses.includes('critical')) {
      overallStatus = 'critical';
    } else if (statuses.includes('warning')) {
      overallStatus = 'warning';
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã
    const criticalIssues = statuses.filter(s => s === 'critical' || s === 'unhealthy').length;
    const warnings = statuses.filter(s => s === 'warning').length;
    const totalIssues = criticalIssues + warnings;

    console.log(`üè• –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: ${overallStatus} (${totalIssues} –ø—Ä–æ–±–ª–µ–º, ${criticalIssues} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö)`);

    return {
      status: overallStatus,
      timestamp: new Date(),
      components: {
        queueStorage: queueStorageHealth,
        queue: queueHealth,
        database: databaseHealth
      },
      summary: {
        totalIssues,
        criticalIssues,
        warnings
      }
    };
  }

  /**
   * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
   */
  async quickHealthCheck(): Promise<{ healthy: boolean; message: string }> {
    try {
      // –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      await Promise.all([
        prisma.$queryRaw`SELECT 1`,
        getQueueManager().then(qm => qm.getQueueStats())
      ]);

      return {
        healthy: true,
        message: '–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞'
      };
    } catch (error: any) {
      return {
        healthy: false,
        message: `–°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${error.message}`
      };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const healthMonitor = HealthMonitor.getInstance();