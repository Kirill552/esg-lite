/**
 * Queue Manager –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ pg-boss
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
 * –ó–∞–¥–∞—á–∞ 2.2: –û–±–Ω–æ–≤–∏—Ç—å Queue Manager –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
 */

const PgBoss = require('pg-boss');
import { createPgBoss, QUEUE_NAMES, JOB_PRIORITIES, OcrJobData, OcrJobResult } from './pg-boss-config';
import { CreditsService } from './credits-service';
import { metricsCollector } from './metrics';
import { queueLogger } from './structured-logger';

export interface QueueStats {
  waiting: number;
  active: number;
  completed: number;
  failed: number;
  total: number;
}

export interface DetailedQueueStats extends QueueStats {
  byStatus: Record<string, number>;
}

export interface ActiveJob {
  id: string;
  data: OcrJobData;
  createdAt: Date;
  startedAt?: Date;
  priority: number;
}

export interface FailedJob {
  id: string;
  data: OcrJobData;
  error: string;
  failedAt: Date;
  retryCount: number;
}

export interface PerformanceMetrics {
  averageProcessingTime: number;
  throughputPerHour: number;
  errorRate: number;
  queueHealth: 'healthy' | 'warning' | 'critical';
}

export interface JobStatus {
  id: string;
  status: 'waiting' | 'active' | 'completed' | 'failed';
  progress?: number;
  result?: OcrJobResult;
  error?: string;
  createdAt: Date;
  processedAt?: Date;
  priority: number;
}

export interface AddJobOptions {
  priority?: 'normal' | 'high' | 'urgent';
  retryLimit?: number;
  expireInHours?: number;
}

// –ó–∞–≥–ª—É—à–∫–∏ —É–¥–∞–ª–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Queue Manager
 */
export class QueueManager {
  private boss: any | null = null;
  private creditsService: CreditsService;

  constructor() {
    this.creditsService = new CreditsService();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pg-boss
   */
  async initialize(): Promise<void> {
    if (this.boss) {
      console.log('‚ö†Ô∏è Queue Manager —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    try {
      this.boss = await createPgBoss();
      
      // –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ—á–µ—Ä–µ–¥–∏
      await this.boss.createQueue(QUEUE_NAMES.OCR, {
        retryLimit: 3,
        retryDelay: 2000,
        expireInHours: 1
      });
      
      await this.boss.createQueue(QUEUE_NAMES.PDF_GENERATION, {
        retryLimit: 2,
        retryDelay: 5000,
        expireInHours: 2
      });
      
      await this.boss.createQueue(QUEUE_NAMES.CLEANUP, {
        retryLimit: 1,
        retryDelay: 10000,
        expireInHours: 23
      });
      
      console.log('‚úÖ Queue Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log('‚úÖ –û—á–µ—Ä–µ–¥–∏ —Å–æ–∑–¥–∞–Ω—ã:', Object.values(QUEUE_NAMES));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Queue Manager:', error);
      throw error;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ pg-boss
   */
  async stop(): Promise<void> {
    if (this.boss) {
      await this.boss.stop();
      this.boss = null;
      console.log('üõë Queue Manager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ OCR –≤ –æ—á–µ—Ä–µ–¥—å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –∫—Ä–µ–¥–∏—Ç–æ–≤
   */
  async addOcrJob(data: OcrJobData, options: AddJobOptions = {}): Promise<string | null> {
    if (!this.boss) {
      throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    const organizationId = data.organizationId || data.userId;

    await queueLogger.debug('Starting OCR job addition', {
      documentId: data.documentId,
      organizationId,
      options
    });

    // –≠—Ç–∞–ø 1: –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const operationCost = await this.creditsService.getOperationCost('ocr');
    const requiredCredits = operationCost.finalCost;

    await queueLogger.info('Calculated operation cost', {
      documentId: data.documentId,
      requiredCredits,
      baseCost: operationCost.baseCost,
      surgePricingMultiplier: operationCost.surgePricingMultiplier
    });

    // –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
    const hasCredits = await this.creditsService.hasCredits(organizationId, requiredCredits);
    
    if (!hasCredits) {
      const balance = await this.creditsService.checkBalance(organizationId);
      
      await queueLogger.warn('Insufficient credits for organization', {
        organizationId,
        documentId: data.documentId,
        requiredCredits,
        availableCredits: balance.balance
      }, { organizationId });
      
      throw new Error(
        `INSUFFICIENT_CREDITS: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å. ` +
        `–¢—Ä–µ–±—É–µ—Ç—Å—è: ${requiredCredits} —Ç CO‚ÇÇ, –¥–æ—Å—Ç—É–ø–Ω–æ: ${balance.balance} —Ç CO‚ÇÇ`
      );
    }

    // –≠—Ç–∞–ø 3: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
    const blockingResult = await this.blockCreditsForJob(organizationId, requiredCredits, data.documentId);
    
    if (!blockingResult.success) {
      throw new Error(`CREDITS_BLOCKING_FAILED: ${blockingResult.error}`);
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    let priority: number = JOB_PRIORITIES.NORMAL;
    
    if (options.priority === 'urgent') {
      priority = JOB_PRIORITIES.URGENT;
    } else if (options.priority === 'high') {
      priority = JOB_PRIORITIES.HIGH;
    }

    const jobOptions = {
      priority,
      retryLimit: options.retryLimit || 3,
      expireInHours: options.expireInHours || 1
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–∞—Ö –≤ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    const enrichedJobData = {
      ...data,
      _credits: {
        organizationId,
        blockedAmount: requiredCredits,
        blockingTransactionId: blockingResult.transactionId,
        operationCost
      }
    };

    await queueLogger.info('Adding OCR job to queue', {
      documentId: data.documentId,
      priority,
      requiredCredits,
      blockingTransactionId: blockingResult.transactionId,
      jobOptions
    }, { organizationId });

    try {
      const jobId = await this.boss.send(QUEUE_NAMES.OCR, enrichedJobData, jobOptions);
      
      await queueLogger.info('OCR job created', {
        jobId,
        documentId: data.documentId,
        jobIdType: typeof jobId,
        jobIdLength: jobId ? String(jobId).length : 0
      }, { organizationId });
      
      if (!jobId || typeof jobId !== 'string' || jobId.trim() === '') {
        throw new Error(`Invalid job ID returned: ${JSON.stringify(jobId)}`);
      }
      
      await queueLogger.jobStarted(jobId, 'OCR', {
        documentId: data.documentId,
        priority,
        organizationId,
        blockedCredits: requiredCredits
      });
      
      return jobId;
      
    } catch (error) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å, —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫—Ä–µ–¥–∏—Ç—ã
      if (blockingResult.transactionId) {
        await this.unblockCreditsForJob(organizationId, blockingResult.transactionId, 'Job queue addition failed');
      }
      
      await queueLogger.error('Failed to add OCR job to queue', error instanceof Error ? error : new Error(String(error)), {
        documentId: data.documentId,
        options: jobOptions,
        unblockedTransactionId: blockingResult.transactionId
      }, { organizationId });
      
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
   */
  async getJobStatus(jobId: string): Promise<JobStatus | null> {
    if (!this.boss) {
      throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      const job = await this.boss.getJobById(QUEUE_NAMES.OCR, jobId);
      
      if (!job) {
        return null;
      }

      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ pg-boss API
      return {
        id: job.id,
        status: this.mapJobState(job.state),
        progress: (job.data as any)?.progress,
        result: job.output as OcrJobResult | undefined,
        error: (job.output as any)?.error,
        createdAt: job.createdOn,
        processedAt: job.completedOn || (job as any).failedOn,
        priority: job.priority || JOB_PRIORITIES.NORMAL
      };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ ${jobId}:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π
   */
  async getQueueStats(): Promise<QueueStats> {
    if (!this.boss) {
      throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –ø–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
      const totalSize = await this.boss.getQueueSize(QUEUE_NAMES.OCR);
      
      // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
      const stats = {
        waiting: totalSize,
        active: 0,
        completed: 0,
        failed: 0,
        total: totalSize
      };

      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π:', stats);
      return stats;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π:', error);
      throw error;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ PostgreSQL
   */
  async cleanCompletedJobs(olderThanHours: number = 24): Promise<number> {
    if (!this.boss) {
      throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      console.log(`üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–¥–∞—á —Å—Ç–∞—Ä—à–µ ${olderThanHours} —á–∞—Å–æ–≤`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ pg-boss
      const db = (this.boss as any).db;
      
      if (!db) {
        console.log('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É pg-boss');
        return 0;
      }

      // –û—á–∏—â–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      const cutoffTime = new Date(Date.now() - olderThanHours * 60 * 60 * 1000);
      
      const result = await db.query(`
        DELETE FROM pgboss.job 
        WHERE name = $1 
        AND state IN ('completed', 'failed') 
        AND completedon < $2
      `, [QUEUE_NAMES.OCR, cutoffTime]);
      
      const cleanedCount = result.rowCount || 0;
      console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ ${cleanedCount} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á`);
      
      return cleanedCount;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:', error);
      // Fallback: pg-boss –¥–µ–ª–∞–µ—Ç –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É
      return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞–¥–∞—á
   */
  async getDetailedQueueStats(): Promise<QueueStats & { byStatus: Record<string, number> }> {
    if (!this.boss) {
      throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      const db = (this.boss as any).db;
      
      if (!db) {
        // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        const basicStats = await this.getQueueStats();
        return {
          ...basicStats,
          byStatus: { created: basicStats.waiting }
        };
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
      const result = await db.query(`
        SELECT 
          state,
          COUNT(*) as count
        FROM pgboss.job 
        WHERE name = $1 
        GROUP BY state
      `, [QUEUE_NAMES.OCR]);

      const byStatus: Record<string, number> = {};
      let waiting = 0, active = 0, completed = 0, failed = 0;

      result.rows.forEach((row: any) => {
        const count = parseInt(row.count);
        byStatus[row.state] = count;

        switch (row.state) {
          case 'created':
          case 'retry':
            waiting += count;
            break;
          case 'active':
            active += count;
            break;
          case 'completed':
            completed += count;
            break;
          case 'failed':
          case 'cancelled':
            failed += count;
            break;
        }
      });

      const stats = {
        waiting,
        active,
        completed,
        failed,
        total: waiting + active + completed + failed,
        byStatus
      };

      console.log('üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π:', stats);
      return stats;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
      const basicStats = await this.getQueueStats();
      return {
        ...basicStats,
        byStatus: { unknown: basicStats.total }
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
   */
  async getActiveJobs(limit: number = 10): Promise<Array<{
    id: string;
    data: OcrJobData;
    createdAt: Date;
    startedAt?: Date;
    priority: number;
  }>> {
    if (!this.boss) {
      throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      const db = (this.boss as any).db;
      
      if (!db) {
        console.log('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á');
        return [];
      }

      const result = await db.query(`
        SELECT 
          id,
          data,
          createdon,
          startedon,
          priority
        FROM pgboss.job 
        WHERE name = $1 
        AND state = 'active'
        ORDER BY startedon DESC
        LIMIT $2
      `, [QUEUE_NAMES.OCR, limit]);

      return result.rows.map((row: any) => ({
        id: row.id,
        data: row.data,
        createdAt: row.createdon,
        startedAt: row.startedon,
        priority: row.priority || JOB_PRIORITIES.NORMAL
      }));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   */
  async getFailedJobs(limit: number = 10): Promise<Array<{
    id: string;
    data: OcrJobData;
    error: string;
    failedAt: Date;
    retryCount: number;
  }>> {
    if (!this.boss) {
      throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      const db = (this.boss as any).db;
      
      if (!db) {
        console.log('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á');
        return [];
      }

      const result = await db.query(`
        SELECT 
          id,
          data,
          output,
          completedon as failed_at,
          retrycount
        FROM pgboss.job 
        WHERE name = $1 
        AND state = 'failed'
        ORDER BY completedon DESC
        LIMIT $2
      `, [QUEUE_NAMES.OCR, limit]);

      return result.rows.map((row: any) => ({
        id: row.id,
        data: row.data,
        error: row.output?.error || 'Unknown error',
        failedAt: row.failed_at,
        retryCount: row.retrycount || 0
      }));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á:', error);
      return [];
    }
  }

  /**
   * –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π –∑–∞–¥–∞—á–∏
   */
  async retryFailedJob(jobId: string): Promise<string | null> {
    if (!this.boss) {
      throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –∑–∞–¥–∞—á–∏
      const job = await this.boss.getJobById(QUEUE_NAMES.OCR, jobId);
      
      if (!job || job.state !== 'failed') {
        console.log(`‚ö†Ô∏è –ó–∞–¥–∞—á–∞ ${jobId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ failed`);
        return null;
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏
      const newJobId = await this.addOcrJob(job.data as OcrJobData, {
        priority: 'high' // –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—É—á–∞—é—Ç –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      });

      console.log(`üîÑ –ó–∞–¥–∞—á–∞ ${jobId} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ –∫–∞–∫ ${newJobId}`);
      return newJobId;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ ${jobId}:`, error);
      throw error;
    }
  }

  /**
   * –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è)
   */
  async cancelJob(jobId: string): Promise<boolean> {
    if (!this.boss) {
      throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      const result = await this.boss.cancel(jobId);
      
      if (result) {
        console.log(`‚ùå –ó–∞–¥–∞—á–∞ ${jobId} –æ—Ç–º–µ–Ω–µ–Ω–∞`);
      } else {
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É ${jobId} (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è)`);
      }
      
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ ${jobId}:`, error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—á–µ—Ä–µ–¥–∏
   */
  async getPerformanceMetrics(): Promise<{
    averageProcessingTime: number;
    throughputPerHour: number;
    errorRate: number;
    queueHealth: 'healthy' | 'warning' | 'critical';
  }> {
    if (!this.boss) {
      throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π MetricsCollector –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
      const metrics = await metricsCollector.getPerformanceMetrics(24);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π API
      const throughputPerHour = metrics.throughputPerMinute * 60;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –æ—á–µ—Ä–µ–¥–∏
      let queueHealth: 'healthy' | 'warning' | 'critical' = 'healthy';
      if (metrics.errorRate > 10) queueHealth = 'warning';
      if (metrics.errorRate > 30) queueHealth = 'critical';

      const result = {
        averageProcessingTime: metrics.averageProcessingTime,
        throughputPerHour,
        errorRate: metrics.errorRate,
        queueHealth
      };

      console.log('üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', result);
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
      return {
        averageProcessingTime: 0,
        throughputPerHour: 0,
        errorRate: 0,
        queueHealth: 'warning' as const
      };
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤)
   */
  async onJobCompleted(jobId: string, result: OcrJobResult, processingTimeMs?: number): Promise<void> {
    console.log(`‚úÖ –ó–∞–¥–∞—á–∞ ${jobId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (processingTimeMs) {
      await metricsCollector.recordProcessingTime(jobId, processingTimeMs);
    }
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    const organizationId = result.documentId; // –≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º documentId
    const operationCost = await this.creditsService.getOperationCost('ocr');
    
    const debitResult = await this.creditsService.debitCredits(
      organizationId, 
      operationCost.finalCost, 
      'OCR processing completed'
    );
    
    if (debitResult.success) {
      console.log(`üí≥ –°–ø–∏—Å–∞–Ω–æ ${operationCost.finalCost} —Ç CO‚ÇÇ –¥–ª—è ${organizationId}`);
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤: ${debitResult.error}`);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–¥–∞—á–∏ (–¥–ª—è –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫)
   */
  async onJobFailed(jobId: string, error: string, errorType: string = 'PROCESSING_ERROR'): Promise<void> {
    console.log(`‚ùå –ó–∞–¥–∞—á–∞ ${jobId} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: ${error}`);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –æ—à–∏–±–∫–∏
    await metricsCollector.recordError(jobId, errorType, error);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ surge-pricing
   */
  async getSurgePricingInfo(): Promise<{ isSurge: boolean; multiplier: number }> {
    const operationCost = await this.creditsService.getOperationCost('ocr');
    return {
      isSurge: operationCost.surgePricingMultiplier > 1,
      multiplier: operationCost.surgePricingMultiplier
    };
  }

  /**
   * –ú–∞–ø–ø–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏–π pg-boss –≤ –Ω–∞—à–∏ —Å—Ç–∞—Ç—É—Å—ã
   */
  private mapJobState(state: string): 'waiting' | 'active' | 'completed' | 'failed' {
    switch (state) {
      case 'created':
      case 'retry':
        return 'waiting';
      case 'active':
        return 'active';
      case 'completed':
        return 'completed';
      case 'failed':
      case 'cancelled':
        return 'failed';
      default:
        return 'waiting';
    }
  }

  /**
   * –ë–ª–æ–∫–∏—Ä—É–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –∑–∞–¥–∞—á–∏
   */
  private async blockCreditsForJob(
    organizationId: string, 
    amount: number, 
    reference: string
  ): Promise<{ success: boolean; transactionId?: string; error?: string }> {
    try {
      const result = await this.creditsService.debitCredits(
        organizationId,
        amount,
        `Credits blocked for OCR job: ${reference}`
      );
      
      if (result.success) {
        return { 
          success: true, 
          transactionId: result.transactionId 
        };
      } else {
        return { 
          success: false, 
          error: result.error || 'Unknown error during credits blocking' 
        };
      }
    } catch (error) {
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Unknown error during credits blocking' 
      };
    }
  }

  /**
   * –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –∑–∞–¥–∞—á–∏
   */
  private async unblockCreditsForJob(
    organizationId: string, 
    transactionId: string, 
    reason: string
  ): Promise<void> {
    try {
      // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º - —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–∑–∂–µ
      await queueLogger.info('Credits unblock requested', {
        organizationId,
        transactionId,
        reason
      });
      
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      // –≠—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è CreditsService –Ω–æ–≤—ã–º –º–µ—Ç–æ–¥–æ–º
    } catch (error) {
      await queueLogger.error('Failed to unblock credits', error instanceof Error ? error : new Error(String(error)), {
        organizationId,
        transactionId,
        reason
      });
    }
  }
}

// Singleton instance
let queueManagerInstance: QueueManager | null = null;

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Queue Manager
 */
export async function getQueueManager(): Promise<QueueManager> {
  if (!queueManagerInstance) {
    queueManagerInstance = new QueueManager();
    await queueManagerInstance.initialize();
  }
  return queueManagerInstance;
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Queue Manager (–¥–ª—è graceful shutdown)
 */
export async function stopQueueManager(): Promise<void> {
  if (queueManagerInstance) {
    await queueManagerInstance.stop();
    queueManagerInstance = null;
  }
}