/**
 * –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –≤—ã–±—Ä–æ—Å–æ–≤ 296-–§–ó
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã IPCC AR6 (2025)
export const GWP_VALUES_2025 = {
  CO2: 1,      // –Ω–µ–∏–∑–º–µ–Ω–Ω–æ
  CH4: 28,     // –±—ã–ª–æ 25 –≤ AR4, —Ç–µ–ø–µ—Ä—å 28 –≤ AR6
  N2O: 265,    // –±—ã–ª–æ 298 –≤ AR4, —Ç–µ–ø–µ—Ä—å 265 –≤ AR6
  HFC: 1300,   // —Å—Ä–µ–¥–Ω–∏–π –¥–ª—è HFC-134a (–Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–π)
  PFC: 6630,   // —Å—Ä–µ–¥–Ω–∏–π –¥–ª—è PFC-14 (CF4, –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–π)
  SF6: 23500   // –±—ã–ª–æ 22800 –≤ AR4, —Ç–µ–ø–µ—Ä—å 23500 –≤ AR6
};

// –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const GWP_VALUES_AR4 = {
  CO2: 1,
  CH4: 25,
  N2O: 298,
  HFC: 1430,
  PFC: 7390,
  SF6: 22800
};

export interface EmissionFactorVersion {
  id: string;
  version: string;
  name: string;
  description: string;
  effectiveFrom: Date;
  effectiveTo?: Date;
  isActive: boolean;
  source: string;
  coefficients: {
    CO2: number;
    CH4: number;
    N2O: number;
    HFC: number;
    PFC: number;
    SF6: number;
  };
  createdAt: Date;
  updatedAt: Date;
}

export interface EmissionFactorUpdate {
  version: string;
  name: string;
  description: string;
  effectiveFrom: string; // ISO date string
  source: string;
  coefficients: {
    CO2: number;
    CH4: number;
    N2O: number;
    HFC: number;
    PFC: number;
    SF6: number;
  };
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
 */
export async function getActiveEmissionFactors(date: Date = new Date()): Promise<EmissionFactorVersion | null> {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º raw SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ç–∏–ø–∞–º–∏
    const result = await prisma.$queryRaw`
      SELECT * FROM emission_factors 
      WHERE "effectiveFrom" <= ${date}
        AND ("effectiveTo" IS NULL OR "effectiveTo" >= ${date})
        AND "isActive" = true
      ORDER BY "effectiveFrom" DESC
      LIMIT 1
    `;

    const factors = result as any[];
    if (factors.length > 0) {
      const factor = factors[0];
      return {
        id: factor.id,
        version: factor.version,
        name: factor.name,
        description: factor.description,
        effectiveFrom: factor.effectiveFrom,
        effectiveTo: factor.effectiveTo || undefined,
        isActive: factor.isActive,
        source: factor.source,
        coefficients: factor.coefficients,
        createdAt: factor.createdAt,
        updatedAt: factor.updatedAt
      };
    }

    return null;
  } catch (error) {
    console.error('Error getting active emission factors:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–∞–∫ fallback
    return {
      id: 'fallback',
      version: 'AR6-2025',
      name: 'IPCC AR6 –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã 2025',
      description: '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã IPCC AR6 –¥–ª—è 296-–§–ó',
      effectiveFrom: new Date('2025-01-01'),
      isActive: true,
      source: 'IPCC AR6 Working Group I',
      coefficients: GWP_VALUES_2025,
      createdAt: new Date(),
      updatedAt: new Date()
    };
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
 */
export async function createEmissionFactorVersion(update: EmissionFactorUpdate): Promise<EmissionFactorVersion> {
  try {
    const effectiveFrom = new Date(update.effectiveFrom);
    
    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–µ—Ä—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    await prisma.emissionFactor.updateMany({
      where: {
        effectiveFrom: { lte: effectiveFrom },
        OR: [
          { effectiveTo: null },
          { effectiveTo: { gte: effectiveFrom } }
        ]
      },
      data: {
        effectiveTo: effectiveFrom,
        isActive: false
      }
    });

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
    const newFactor = await prisma.emissionFactor.create({
      data: {
        version: update.version,
        name: update.name,
        description: update.description,
        effectiveFrom: effectiveFrom,
        isActive: true,
        source: update.source,
        coefficients: update.coefficients
      }
    });

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: ${update.version}`);

    return {
      id: newFactor.id,
      version: newFactor.version,
      name: newFactor.name,
      description: newFactor.description,
      effectiveFrom: newFactor.effectiveFrom,
      effectiveTo: newFactor.effectiveTo || undefined,
      isActive: newFactor.isActive,
      source: newFactor.source,
      coefficients: newFactor.coefficients as any,
      createdAt: newFactor.createdAt,
      updatedAt: newFactor.updatedAt
    };
    
  } catch (error) {
    console.error('Error creating emission factor version:', error);
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–µ—Ä—Å–∏—é –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
 */
export async function getAllEmissionFactorVersions(): Promise<EmissionFactorVersion[]> {
  try {
    const factors = await prisma.emissionFactor.findMany({
      orderBy: { effectiveFrom: 'desc' }
    });

    return factors.map((factor: any) => ({
      id: factor.id,
      version: factor.version,
      name: factor.name,
      description: factor.description,
      effectiveFrom: factor.effectiveFrom,
      effectiveTo: factor.effectiveTo || undefined,
      isActive: factor.isActive,
      source: factor.source,
      coefficients: factor.coefficients as any,
      createdAt: factor.createdAt,
      updatedAt: factor.updatedAt
    }));
  } catch (error) {
    console.error('Error getting all emission factor versions:', error);
    return [];
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —Å –±–∞–∑–æ–≤—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏
 */
export async function initializeEmissionFactors(): Promise<void> {
  try {
    const existingFactors = await prisma.emissionFactor.count();
    
    if (existingFactors === 0) {
      console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤...');

      // –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –≤–µ—Ä—Å–∏—é AR4
      await prisma.emissionFactor.create({
        data: {
          version: 'AR4-2007',
          name: 'IPCC AR4 –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (—É—Å—Ç–∞—Ä–µ–≤—à–∏–µ)',
          description: '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã IPCC AR4 2007 –≥–æ–¥–∞ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–æ 2025)',
          effectiveFrom: new Date('2021-01-01'),
          effectiveTo: new Date('2024-12-31'),
          isActive: false,
          source: 'IPCC Fourth Assessment Report (2007)',
          coefficients: GWP_VALUES_AR4
        }
      });

      // –°–æ–∑–¥–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é AR6
      await createEmissionFactorVersion({
        version: 'AR6-2025',
        name: 'IPCC AR6 –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã 2025',
        description: '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã IPCC AR6 —Å–æ–≥–ª–∞—Å–Ω–æ –†–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏—é –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –†–§ –æ—Ç 04.04.2025 ‚Ññ 805-—Ä',
        effectiveFrom: '2025-01-01',
        source: 'IPCC Sixth Assessment Report (2021) + –†–§ 805-—Ä',
        coefficients: GWP_VALUES_2025
      });

      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }
  } catch (error) {
    console.error('Error initializing emission factors:', error);
    throw error;
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
 */
export async function updateToLatestFactors(): Promise<EmissionFactorVersion> {
  console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤...');
  
  const currentFactors = await getActiveEmissionFactors();
  
  if (currentFactors?.version === 'AR6-2025') {
    console.log('‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã');
    return currentFactors;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ AR6-2025
  const updated = await createEmissionFactorVersion({
    version: 'AR6-2025',
    name: 'IPCC AR6 –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã 2025',
    description: '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã IPCC AR6 —Å–æ–≥–ª–∞—Å–Ω–æ –†–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏—é –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –†–§ –æ—Ç 04.04.2025 ‚Ññ 805-—Ä',
    effectiveFrom: new Date().toISOString(),
    source: 'IPCC Sixth Assessment Report (2021) + –†–§ 805-—Ä',
    coefficients: GWP_VALUES_2025
  });

  console.log('‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏');
  return updated;
}

/**
 * –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–¥–ª—è –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏–π)
 */
export async function scheduleFactorUpdates(): Promise<void> {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 –¥–Ω–µ–π
  const THIRTY_DAYS = 30 * 24 * 60 * 60 * 1000;
  
  const checkUpdates = async () => {
    try {
      console.log('üìÖ –ü–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤...');
      
      const current = await getActiveEmissionFactors();
      const thirtyDaysAgo = new Date(Date.now() - THIRTY_DAYS);
      
      if (!current || current.createdAt < thirtyDaysAgo) {
        console.log('‚ö†Ô∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞');
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
      }
    } catch (error) {
      console.error('Error in scheduled factor check:', error);
    }
  };

  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
  setTimeout(checkUpdates, 5 * 60 * 1000);
  
  // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –¥–Ω–µ–π
  setInterval(checkUpdates, THIRTY_DAYS);
  
  console.log('üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω');
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º)
 */
export async function getCurrentGWPValues(): Promise<typeof GWP_VALUES_2025> {
  const factors = await getActiveEmissionFactors();
  return factors?.coefficients || GWP_VALUES_2025;
}
