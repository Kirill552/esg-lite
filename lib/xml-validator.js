/**
 * XML Validator Library –¥–ª—è CBAM –æ—Ç—á—ë—Ç–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç xmllint –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ XML –ø—Ä–æ—Ç–∏–≤ XSD —Å—Ö–µ–º
 * 
 * @version 1.0.0
 * @date 2025-08-01
 * @author ESG-Lite Team
 */

const { execSync, exec } = require('child_process');
const fs = require('fs').promises;
const path = require('path');
const { promisify } = require('util');

const execAsync = promisify(exec);

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ XML —Ñ–∞–π–ª–æ–≤
 */
class XMLValidator {
  constructor(schemasPath = './schemas') {
    this.schemasPath = schemasPath;
    this.tempDir = process.env.TEMP_DIR || '/tmp/xml-validation';
    this.init();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
   */
  async init() {
    try {
      // –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      await fs.mkdir(this.tempDir, { recursive: true });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ xmllint
      execSync('which xmllint', { stdio: 'ignore' });
      console.log('‚úÖ xmllint –Ω–∞–π–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
      
    } catch (error) {
      console.error('‚ùå xmllint –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ libxml2-utils');
      throw new Error('xmllint –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ');
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è CBAM XML –æ—Ç—á—ë—Ç–∞
   * @param {string} xmlContent - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ XML —Ñ–∞–π–ª–∞
   * @param {string} schemaType - —Ç–∏–ø —Å—Ö–µ–º—ã ('cbam-quarterly' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
   * @returns {Promise<ValidationResult>}
   */
  async validateCBAMReport(xmlContent, schemaType = 'cbam-quarterly') {
    const startTime = Date.now();
    
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª —Å—Ö–µ–º—ã
      const schemaFile = this.getSchemaFile(schemaType);
      
      // –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π XML —Ñ–∞–π–ª
      const xmlFilePath = await this.createTempXMLFile(xmlContent);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
      const validationResult = await this.performValidation(xmlFilePath, schemaFile);
      
      // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      await this.cleanup(xmlFilePath);
      
      const executionTime = Date.now() - startTime;
      
      return {
        isValid: validationResult.isValid,
        errors: validationResult.errors,
        warnings: validationResult.warnings,
        schemaType,
        executionTime,
        timestamp: new Date().toISOString()
      };
      
    } catch (error) {
      return {
        isValid: false,
        errors: [`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.message}`],
        warnings: [],
        schemaType,
        executionTime: Date.now() - startTime,
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å—Ö–µ–º—ã
   * @param {string} schemaType - —Ç–∏–ø —Å—Ö–µ–º—ã
   * @returns {string} –ø—É—Ç—å –∫ XSD —Ñ–∞–π–ª—É
   */
  getSchemaFile(schemaType) {
    const schemaFiles = {
      'cbam-quarterly': 'cbam-quarterly-report.xsd',
      'cbam-shared': 'stypes.xsd'
    };
    
    const fileName = schemaFiles[schemaType];
    if (!fileName) {
      throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ö–µ–º—ã: ${schemaType}`);
    }
    
    return path.join(this.schemasPath, fileName);
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π XML —Ñ–∞–π–ª
   * @param {string} xmlContent - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ XML
   * @returns {Promise<string>} –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
   */
  async createTempXMLFile(xmlContent) {
    const timestamp = Date.now();
    const fileName = `cbam-report-${timestamp}.xml`;
    const filePath = path.join(this.tempDir, fileName);
    
    await fs.writeFile(filePath, xmlContent, 'utf8');
    return filePath;
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é xmllint
   * @param {string} xmlFilePath - –ø—É—Ç—å –∫ XML —Ñ–∞–π–ª—É
   * @param {string} schemaFile - –ø—É—Ç—å –∫ XSD —Å—Ö–µ–º–µ
   * @returns {Promise<{isValid: boolean, errors: string[], warnings: string[]}>}
   */
  async performValidation(xmlFilePath, schemaFile) {
    try {
      // –ö–æ–º–∞–Ω–¥–∞ xmllint –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      const command = `xmllint --noout --schema "${schemaFile}" "${xmlFilePath}"`;
      
      console.log(`üîç –í—ã–ø–æ–ª–Ω—è—é –≤–∞–ª–∏–¥–∞—Ü–∏—é: ${command}`);
      
      const { stdout, stderr } = await execAsync(command);
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫ - –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
      if (!stderr || stderr.trim() === '') {
        console.log('‚úÖ XML –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        return {
          isValid: true,
          errors: [],
          warnings: this.parseWarnings(stdout)
        };
      }
      
      // –ü–∞—Ä—Å–∏–º –æ—à–∏–±–∫–∏ –∏–∑ stderr
      const errors = this.parseErrors(stderr);
      
      return {
        isValid: false,
        errors,
        warnings: this.parseWarnings(stdout)
      };
      
    } catch (error) {
      // xmllint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º XML
      const errors = this.parseErrors(error.stderr || error.message);
      
      return {
        isValid: false,
        errors,
        warnings: []
      };
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –æ—à–∏–±–æ–∫ –∏–∑ –≤—ã–≤–æ–¥–∞ xmllint
   * @param {string} stderr - –≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫
   * @returns {string[]} –º–∞—Å—Å–∏–≤ –æ—à–∏–±–æ–∫
   */
  parseErrors(stderr) {
    if (!stderr) return [];
    
    const lines = stderr.split('\n').filter(line => line.trim());
    const errors = [];
    
    for (const line of lines) {
      if (line.includes('error:') || line.includes('fails to validate')) {
        // –£–±–∏—Ä–∞–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∞
        const cleanError = line
          .replace(/.*?:(\d+):\s*/, '–°—Ç—Ä–æ–∫–∞ $1: ')
          .replace(/element\s+(\w+):\s*/, '–≠–ª–µ–º–µ–Ω—Ç "$1": ')
          .replace(/attribute\s+(\w+):\s*/, '–ê—Ç—Ä–∏–±—É—Ç "$1": ')
          .replace(/Schemas validity error:\s*/, '')
          .trim();
        
        if (cleanError) {
          errors.push(cleanError);
        }
      }
    }
    
    return errors.length > 0 ? errors : ['–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ XML –ø—Ä–æ—Ç–∏–≤ XSD —Å—Ö–µ–º—ã'];
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∏–∑ –≤—ã–≤–æ–¥–∞ xmllint
   * @param {string} stdout - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥
   * @returns {string[]} –º–∞—Å—Å–∏–≤ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
   */
  parseWarnings(stdout) {
    if (!stdout) return [];
    
    const lines = stdout.split('\n').filter(line => line.trim());
    const warnings = [];
    
    for (const line of lines) {
      if (line.includes('warning:')) {
        const cleanWarning = line
          .replace(/.*?warning:\s*/, '')
          .trim();
        
        if (cleanWarning) {
          warnings.push(cleanWarning);
        }
      }
    }
    
    return warnings;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
   * @param {string} filePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
   */
  async cleanup(filePath) {
    try {
      await fs.unlink(filePath);
    } catch (error) {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${filePath}`);
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã CBAM –æ—Ç—á—ë—Ç–∞ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)
   * @param {string} xmlContent - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ XML
   * @returns {Promise<{isValid: boolean, issues: string[]}>}
   */
  async validateCBAMStructure(xmlContent) {
    const issues = [];
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      const requiredElements = [
        'CBAMQuarterlyReport',
        'ReportHeader',
        'Declarant',
        'ReportingPeriod',
        'Summary',
        'Declaration'
      ];
      
      for (const element of requiredElements) {
        if (!xmlContent.includes(`<${element}`)) {
          issues.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç: ${element}`);
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º EORI –Ω–æ–º–µ—Ä
      const eoriMatch = xmlContent.match(/<EORI>([^<]+)<\/EORI>/);
      if (eoriMatch) {
        const eori = eoriMatch[1];
        if (!/^[A-Z]{2}[A-Z0-9]{1,15}$/.test(eori)) {
          issues.push(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç EORI –Ω–æ–º–µ—Ä–∞: ${eori}`);
        }
      } else {
        issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç EORI –Ω–æ–º–µ—Ä –¥–µ–∫–ª–∞—Ä–∞–Ω—Ç–∞');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã –æ—Ç—á—ë—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
      const yearMatch = xmlContent.match(/<Year>(\d{4})<\/Year>/);
      if (yearMatch) {
        const year = parseInt(yearMatch[1]);
        const currentYear = new Date().getFullYear();
        if (year < 2023 || year > currentYear + 1) {
          issues.push(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏: ${year}`);
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–∞—Ä—Ç–∞–ª
      const quarterMatch = xmlContent.match(/<Quarter>(\d)<\/Quarter>/);
      if (quarterMatch) {
        const quarter = parseInt(quarterMatch[1]);
        if (quarter < 1 || quarter > 4) {
          issues.push(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–≤–∞—Ä—Ç–∞–ª: ${quarter}`);
        }
      }
      
      return {
        isValid: issues.length === 0,
        issues
      };
      
    } catch (error) {
      return {
        isValid: false,
        issues: [`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: ${error.message}`]
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ö–µ–º–∞—Ö
   * @returns {Promise<Object>} –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ö–µ–º–∞—Ö
   */
  async getAvailableSchemas() {
    try {
      const files = await fs.readdir(this.schemasPath);
      const xsdFiles = files.filter(file => file.endsWith('.xsd'));
      
      const schemas = {};
      for (const file of xsdFiles) {
        const filePath = path.join(this.schemasPath, file);
        const stat = await fs.stat(filePath);
        
        schemas[file] = {
          name: file,
          path: filePath,
          size: stat.size,
          modified: stat.mtime.toISOString()
        };
      }
      
      return schemas;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ö–µ–º: ${error.message}`);
    }
  }
}

/**
 * –¢–∏–ø—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * @typedef {Object} ValidationResult
 * @property {boolean} isValid - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * @property {string[]} errors - –º–∞—Å—Å–∏–≤ –æ—à–∏–±–æ–∫
 * @property {string[]} warnings - –º–∞—Å—Å–∏–≤ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
 * @property {string} schemaType - —Ç–∏–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ö–µ–º—ã
 * @property {number} executionTime - –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º—Å
 * @property {string} timestamp - timestamp –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */

module.exports = XMLValidator;

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
module.exports.XMLValidator = XMLValidator;
module.exports.validateCBAMReport = async (xmlContent, schemaType = 'cbam-quarterly') => {
  const validator = new XMLValidator();
  return await validator.validateCBAMReport(xmlContent, schemaType);
};
