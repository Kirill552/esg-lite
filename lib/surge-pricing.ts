/**
 * Surge Pricing Service - –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ESG-Lite
 * –ó–∞–¥–∞—á–∞ 5.1: –°–æ–∑–¥–∞—Ç—å Surge Pricing Service
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: 1.4 Surge-pricing - –∫—Ä–µ–¥–∏—Ç √ó2 –≤ –ø–µ—Ä–∏–æ–¥ 15-30 –∏—é–Ω—è
 */

export interface SurgePricingConfig {
  enabled: boolean;
  surgeStartDate: Date;
  surgeEndDate: Date;
  multiplier: number;
  reason: string;
}

export interface SurgePricingStatus {
  isActive: boolean;
  multiplier: number;
  reason: string;
  startDate?: Date;
  endDate?: Date;
  timeRemaining?: string;
}

export interface SurgePricingNotification {
  type: 'start' | 'end' | 'reminder';
  message: string;
  timestamp: Date;
  isActive: boolean;
  daysRemaining?: number;
}

export class SurgePricingService {
  private config: SurgePricingConfig;

  constructor() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ surge pricing –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ 15-30 –∏—é–Ω—è
    const currentYear = new Date().getFullYear();
    this.config = {
      enabled: true,
      surgeStartDate: new Date(currentYear, 5, 15), // 15 –∏—é–Ω—è (–º–µ—Å—è—Ü 5 = –∏—é–Ω—å)
      surgeEndDate: new Date(currentYear, 5, 30, 23, 59, 59, 999), // 30 –∏—é–Ω—è –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
      multiplier: 2.0, // √ó2 —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º 1.4
      reason: '–í—ã—Å–æ–∫–∏–π —Å–µ–∑–æ–Ω –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ (15-30 –∏—é–Ω—è)'
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—ã surge –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ–¥–∞
   */
  private getSurgeDates(year: number): { start: Date; end: Date } {
    return {
      start: new Date(year, 5, 15), // 15 –∏—é–Ω—è 00:00:00
      end: new Date(year, 5, 30, 23, 59, 59, 999) // 30 –∏—é–Ω—è 23:59:59.999
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–µ—Ä–∏–æ–¥ surge pricing
   */
  isSurgePeriod(date: Date = new Date()): boolean {
    if (!this.config.enabled) {
      return false;
    }

    const checkDate = new Date(date);
    const { start, end } = this.getSurgeDates(checkDate.getFullYear());
    
    return checkDate >= start && checkDate <= end;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è surge pricing
   */
  getSurgeMultiplier(date: Date = new Date()): number {
    if (this.isSurgePeriod(date)) {
      return this.config.multiplier; // 2.0x –≤ surge –ø–µ—Ä–∏–æ–¥
    }
    return 1.0; // –û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å surge pricing
   */
  getSurgePricingStatus(date: Date = new Date()): SurgePricingStatus {
    const isActive = this.isSurgePeriod(date);
    const { start: surgeStart, end: surgeEnd } = this.getSurgeDates(date.getFullYear());

    // –î–ª—è —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—É—é –¥–∞—Ç—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
    const statusStartDate = new Date(date.getFullYear(), 5, 15);
    const statusEndDate = new Date(date.getFullYear(), 5, 30);

    let timeRemaining: string | undefined;
    if (isActive) {
      // –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –¥–Ω–µ–π: —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
      const daysDiff = 30 - date.getDate(); 
      const daysRemaining = daysDiff > 0 ? daysDiff : 1;
      timeRemaining = `${daysRemaining} –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è`;
    }

    return {
      isActive,
      multiplier: isActive ? this.config.multiplier : 1.0,
      reason: isActive ? this.config.reason : '–û–±—ã—á–Ω–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
      startDate: isActive ? statusStartDate : undefined,
      endDate: isActive ? statusEndDate : undefined,
      timeRemaining
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ surge pricing
   */
  getSurgePricingNotification(date: Date = new Date()): SurgePricingNotification | null {
    const { start: surgeStart, end: surgeEnd } = this.getSurgeDates(date.getFullYear());
    const checkDate = new Date(date);
    
    const isActive = this.isSurgePeriod(date);
    
    if (isActive) {
      // –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –¥–Ω–µ–π: —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
      const daysDiff = 30 - checkDate.getDate();
      const daysRemaining = daysDiff > 0 ? daysDiff : 1;
      
      if (daysRemaining <= 3) {
        return {
          type: 'reminder',
          message: `‚ö° Surge pricing –∞–∫—Ç–∏–≤–µ–Ω! –ö—Ä–µ–¥–∏—Ç—ã —Å—Ç–æ—è—Ç √ó${this.config.multiplier}. –û—Å—Ç–∞–ª–æ—Å—å ${daysRemaining} –¥–Ω–µ–π.`,
          timestamp: checkDate,
          isActive: true,
          daysRemaining
        };
      }
      
      return {
        type: 'start',
        message: `‚ö° –ü–µ—Ä–∏–æ–¥ surge pricing –∞–∫—Ç–∏–≤–µ–Ω –¥–æ ${surgeEnd.toLocaleDateString('ru-RU')}. –°—Ç–æ–∏–º–æ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç–æ–≤ —É–≤–µ–ª–∏—á–µ–Ω–∞ –≤ ${this.config.multiplier} —Ä–∞–∑–∞.`,
        timestamp: checkDate,
        isActive: true,
        daysRemaining
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ—Ä–æ –ª–∏ –Ω–∞—á–Ω–µ—Ç—Å—è surge –ø–µ—Ä–∏–æ–¥
    const msToStart = surgeStart.getTime() - checkDate.getTime();
    const daysToStart = Math.ceil(msToStart / (1000 * 60 * 60 * 24));
    
    if (daysToStart > 0 && daysToStart <= 7) {
      return {
        type: 'reminder',
        message: `üí° Surge pricing –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ ${daysToStart} –¥–Ω–µ–π (${surgeStart.toLocaleDateString('ru-RU')}). –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã —Å–µ–π—á–∞—Å.`,
        timestamp: checkDate,
        isActive: false,
        daysRemaining: daysToStart
      };
    }
    
    return null; // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É —Å —É—á–µ—Ç–æ–º surge pricing
   */
  calculatePrice(basePrice: number, date: Date = new Date()): number {
    const multiplier = this.getSurgeMultiplier(date);
    return Math.ceil(basePrice * multiplier);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ surge pricing
   */
  getJobPriority(date: Date = new Date()): 'normal' | 'high' {
    return this.isSurgePeriod(date) ? 'high' : 'normal';
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞ UI
   */
  getBannerInfo(date: Date = new Date()): { show: boolean; message: string; type: 'warning' | 'info' } | null {
    const { start: surgeStart, end: surgeEnd } = this.getSurgeDates(date.getFullYear());
    const checkDate = new Date(date);
    
    const isActive = this.isSurgePeriod(date);
    
    if (isActive) {
      const msRemaining = surgeEnd.getTime() - checkDate.getTime();
      const daysRemaining = Math.ceil(msRemaining / (1000 * 60 * 60 * 24));
      
      return {
        show: true,
        message: `‚ö° Surge –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω! –°—Ç–æ–∏–º–æ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç–æ–≤ √ó${this.config.multiplier}. –û—Å—Ç–∞–ª–æ—Å—å ${daysRemaining} –¥–Ω–µ–π.`,
        type: 'warning'
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –Ω–∞—á–∞–ª–µ
    const msToStart = surgeStart.getTime() - checkDate.getTime();
    const daysToStart = Math.ceil(msToStart / (1000 * 60 * 60 * 24));
    
    if (daysToStart > 0 && daysToStart <= 7) {
      return {
        show: true,
        message: `üí° –°–∫–∏–¥–∫–∞ 15% –¥–æ ${surgeStart.toLocaleDateString('ru-RU')}! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã —Å–µ–π—á–∞—Å.`,
        type: 'info'
      };
    }
    
    return null;
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é surge pricing
   */
  updateConfig(newConfig: Partial<SurgePricingConfig>): void {
    this.config = { ...this.config, ...newConfig };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
   */
  getConfig(): SurgePricingConfig {
    return { ...this.config };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –±—É–¥–µ—Ç –ª–∏ surge pricing –∞–∫—Ç–∏–≤–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç
   */
  willBeSurgeActive(startDate: Date, endDate: Date): boolean {
    const currentYear = new Date().getFullYear();
    const { start: surgeStart, end: surgeEnd } = this.getSurgeDates(currentYear);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    return startDate <= surgeEnd && endDate >= surgeStart;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–Ω–∏ –¥–æ –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è surge –ø–µ—Ä–∏–æ–¥–∞
   */
  getDaysToSurgeEvent(date: Date = new Date()): { event: 'start' | 'end' | 'none'; days: number } {
    const { start: surgeStart, end: surgeEnd } = this.getSurgeDates(date.getFullYear());
    const checkDate = new Date(date);
    
    if (this.isSurgePeriod(date)) {
      // –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –¥–Ω–µ–π: —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
      const daysDiff = 30 - checkDate.getDate();
      const daysToEnd = daysDiff > 0 ? daysDiff : 1;
      return { event: 'end', days: daysToEnd };
    }
    
    const msToStart = surgeStart.getTime() - checkDate.getTime();
    const daysToStart = Math.ceil(msToStart / (1000 * 60 * 60 * 24));
    
    if (daysToStart > 0 && daysToStart <= 365) {
      return { event: 'start', days: daysToStart };
    }
    
    return { event: 'none', days: 0 };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
   */
  getNotifications(date: Date = new Date()): Array<{
    id: string;
    type: 'start' | 'reminder' | 'banner';
    message: string;
    created: Date;
    active: boolean;
  }> {
    const { start: surgeStart, end: surgeEnd } = this.getSurgeDates(date.getFullYear());
    const checkDate = new Date(date);
    const notifications = [];
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ
    const startNotification = {
      id: 'surge-start',
      type: 'start' as const,
      message: `üöÄ Surge –ø–µ—Ä–∏–æ–¥ –Ω–∞—á–∞–ª—Å—è! –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç–æ–≤ √ó${this.config.multiplier} –¥–æ ${surgeEnd.toLocaleDateString('ru-RU')}.`,
      created: surgeStart,
      active: this.isSurgePeriod(date)
    };
    
    // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –ø–µ—Ä–∏–æ–¥–∞
    const midDate = new Date(surgeStart.getTime() + (surgeEnd.getTime() - surgeStart.getTime()) / 2);
    const reminderNotification = {
      id: 'surge-reminder',
      type: 'reminder' as const,
      message: `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: Surge –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π. –ö—Ä–µ–¥–∏—Ç—ã √ó${this.config.multiplier}.`,
      created: midDate,
      active: this.isSurgePeriod(date) && checkDate >= midDate
    };
    
    // –ë–∞–Ω–Ω–µ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    const bannerInfo = this.getBannerInfo(date);
    if (bannerInfo?.show) {
      notifications.push({
        id: 'surge-banner',
        type: 'banner' as const,
        message: bannerInfo.message,
        created: checkDate,
        active: true
      });
    }
    
    notifications.push(startNotification, reminderNotification);
    
    return notifications.filter(n => n.active);
  }
}

// Singleton instance –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
export const surgePricingService = new SurgePricingService();