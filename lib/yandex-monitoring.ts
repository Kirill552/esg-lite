/**
 * Yandex Cloud Monitoring Integration
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫ PostgreSQL –æ—á–µ—Ä–µ–¥–µ–π –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
 */

import fs from 'fs';
import jwt from 'jsonwebtoken';

interface MetricData {
  name: string;
  value: number;
  labels?: Record<string, string>;
  timestamp?: Date;
}

interface YandexCloudConfig {
  folderId: string;
  serviceAccountKeyFile?: string;
  serviceAccountJson?: string;
  endpoint?: string;
  enabled?: boolean;
}

export class YandexCloudMonitoring {
  private config: YandexCloudConfig;
  private iamToken: string | null = null;
  private tokenExpirationTime: Date | null = null;

  constructor(config: YandexCloudConfig) {
    this.config = {
      endpoint: 'https://monitoring.api.cloud.yandex.net/monitoring/v2/data/write',
      enabled: true,
      ...config
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–±–æ—Ç–µ
   */
  isEnabled(): boolean {
    return Boolean(
      this.config.enabled && 
      this.config.folderId && 
      (this.config.serviceAccountKeyFile || this.config.serviceAccountJson)
    );
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ IAM —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Service Account –∫–ª—é—á
   */
  private async getIamToken(): Promise<string> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω (—Å –∑–∞–ø–∞—Å–æ–º 5 –º–∏–Ω—É—Ç)
    if (this.iamToken && this.tokenExpirationTime && 
        new Date() < new Date(this.tokenExpirationTime.getTime() - 5 * 60 * 1000)) {
      return this.iamToken;
    }

    let serviceAccountKey: any;
    
    try {
      if (this.config.serviceAccountKeyFile) {
        const keyFileContent = fs.readFileSync(this.config.serviceAccountKeyFile, 'utf8');
        serviceAccountKey = JSON.parse(keyFileContent);
      } else if (this.config.serviceAccountJson) {
        serviceAccountKey = JSON.parse(this.config.serviceAccountJson);
      } else {
        throw new Error('Service Account key not provided');
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      throw new Error(`Failed to load service account key: ${errorMessage}`);
    }

    // –°–æ–∑–¥–∞–µ–º JWT –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IAM —Ç–æ–∫–µ–Ω–∞
    const now = Math.floor(Date.now() / 1000);
    const payload = {
      aud: 'https://iam.api.cloud.yandex.net/iam/v1/tokens',
      iss: serviceAccountKey.service_account_id,
      iat: now,
      exp: now + 3600 // 1 —á–∞—Å
    };

    let jwtToken: string;
    try {
      jwtToken = jwt.sign(payload, serviceAccountKey.private_key, {
        algorithm: 'PS256',
        keyid: serviceAccountKey.id
      });
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      throw new Error(`Failed to create JWT: ${errorMessage}`);
    }

    // –û–±–º–µ–Ω–∏–≤–∞–µ–º JWT –Ω–∞ IAM —Ç–æ–∫–µ–Ω
    const response = await fetch('https://iam.api.cloud.yandex.net/iam/v1/tokens', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        jwt: jwtToken
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Failed to get IAM token: ${response.status} ${errorText}`);
    }

    const data = await response.json();
    this.iamToken = data.iamToken;
    this.tokenExpirationTime = new Date(data.expiresAt);

    console.log('üîë IAM —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ:', this.tokenExpirationTime);
    return this.iamToken!; // –ú—ã –∑–Ω–∞–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ null –ø–æ—Å–ª–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫ –≤ Yandex Cloud Monitoring
   */
  async writeMetrics(metrics: MetricData[]): Promise<void> {
    if (!this.isEnabled()) {
      console.log('‚ö†Ô∏è Yandex Cloud Monitoring –æ—Ç–∫–ª—é—á–µ–Ω');
      return;
    }

    if (metrics.length === 0) {
      return;
    }

    try {
      const iamToken = await this.getIamToken();

      const requestBody = {
        metrics: metrics.map(metric => ({
          name: metric.name,
          labels: {
            service: 'esg-lite',
            environment: process.env.NODE_ENV || 'development',
            ...metric.labels
          },
          type: 'DGAUGE', // Double gauge - –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –º–µ—Ç—Ä–∏–∫
          ts: metric.timestamp 
            ? Math.floor(metric.timestamp.getTime() / 1000) 
            : Math.floor(Date.now() / 1000),
          value: metric.value
        }))
      };

      const response = await fetch(
        `${this.config.endpoint}?folderId=${this.config.folderId}&service=custom`,
        {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${iamToken}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(requestBody)
        }
      );

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP ${response.status}: ${errorText}`);
      }

      console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${metrics.length} –º–µ—Ç—Ä–∏–∫ –≤ Yandex Cloud Monitoring`);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Ç—Ä–∏–∫ –≤ Yandex Cloud:', errorMessage);
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É –Ω–∞—Ä—É–∂—É, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏
   */
  async writeMetric(name: string, value: number, labels?: Record<string, string>): Promise<void> {
    return this.writeMetrics([{ name, value, labels }]);
  }

  /**
   * –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
   */
  async writeMetricsWithRetry(metrics: MetricData[], maxRetries = 3): Promise<void> {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        await this.writeMetrics(metrics);
        return;
      } catch (error) {
        if (attempt === maxRetries) {
          const errorMessage = error instanceof Error ? error.message : String(error);
          console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫:`, errorMessage);
          return;
        }
        
        const delay = attempt * 2000; // 2s, 4s, 6s
        console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay}–º—Å...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  }
}

/**
 * –°–∏–Ω–≥–ª—Ç–æ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 */
export const yandexMonitoring = new YandexCloudMonitoring({
  folderId: process.env.YANDEX_CLOUD_FOLDER_ID!,
  serviceAccountKeyFile: process.env.YANDEX_CLOUD_SA_KEY_FILE,
  serviceAccountJson: process.env.YANDEX_CLOUD_SA_JSON,
  endpoint: process.env.YANDEX_MONITORING_ENDPOINT,
  enabled: process.env.YANDEX_MONITORING_ENABLED === 'true'
});
