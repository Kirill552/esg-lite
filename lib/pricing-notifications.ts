/**
 * Pricing Notification Service
 * –ó–∞–¥–∞—á–∞ 5.3: –°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ü–µ–Ω–∞—Ö
 * 
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ —Ü–µ–Ω–∞—Ö, –≤–∫–ª—é—á–∞—è surge pricing, 
 * —Å–∫–∏–¥–∫–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤
 */

import { surgePricingService } from '@/lib/surge-pricing';

export interface PricingNotification {
  id: string;
  type: 'surge_start' | 'surge_end' | 'discount' | 'price_change' | 'low_credits';
  title: string;
  message: string;
  severity: 'info' | 'warning' | 'success' | 'error';
  actionText?: string;
  actionUrl?: string;
  validFrom: Date;
  validUntil?: Date;
  dismissible: boolean;
  showInBanner: boolean;
  sendEmail: boolean;
}

export interface PricingBannerInfo {
  show: boolean;
  type: 'surge_active' | 'surge_ending' | 'normal_pricing' | 'discount';
  title: string;
  message: string;
  severity: 'info' | 'warning' | 'success';
  actionText?: string;
  actionUrl?: string;
  countdown?: {
    endDate: Date;
    message: string;
  };
}

export interface CurrentPricingStatus {
  isSurgeActive: boolean;
  baseMultiplier: number;
  currentMultiplier: number;
  surgeReason?: string;
  bannerInfo: PricingBannerInfo;
  notifications: PricingNotification[];
  priceChange: {
    hasChanged: boolean;
    previousPrice: number;
    currentPrice: number;
    changePercent: number;
  };
}

class PricingNotificationService {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
   */
  async getCurrentPricingStatus(date: Date = new Date()): Promise<CurrentPricingStatus> {
    const isSurgeActive = surgePricingService.isSurgePeriod(date);
    const currentMultiplier = surgePricingService.getSurgeMultiplier(date);
    const surgeReason = '–í—ã—Å–æ–∫–∏–π —Å–µ–∑–æ–Ω –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ (15-30 –∏—é–Ω—è)';
    
    // –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã (–≤ –∫—Ä–µ–¥–∏—Ç–∞—Ö –∑–∞ —Ç–æ–Ω–Ω—É CO‚ÇÇ)
    const basePrice = 5; // 5 ‚ÇΩ/—Ç CO‚ÇÇ
    const currentPrice = basePrice * currentMultiplier;
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å surgePricingInfo
    const surgePricingInfo = {
      isActive: isSurgeActive,
      multiplier: currentMultiplier,
      reason: surgeReason
    };
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–Ω–Ω–µ—Ä–µ
    const bannerInfo = this.generateBannerInfo(surgePricingInfo, date);
    
    // –ê–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notifications = await this.getActiveNotifications(date);
    
    return {
      isSurgeActive,
      baseMultiplier: 1,
      currentMultiplier,
      surgeReason,
      bannerInfo,
      notifications,
      priceChange: {
        hasChanged: currentMultiplier !== 1,
        previousPrice: basePrice,
        currentPrice,
        changePercent: ((currentPrice - basePrice) / basePrice) * 100
      }
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞
   */
  private generateBannerInfo(surgePricingInfo: any, date: Date): PricingBannerInfo {
    if (surgePricingInfo.isActive) {
      // Surge –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω
      const surgeEnd = new Date(date.getFullYear(), 5, 30); // 30 –∏—é–Ω—è
      const daysLeft = Math.ceil((surgeEnd.getTime() - date.getTime()) / (1000 * 60 * 60 * 24));
      
      if (daysLeft <= 3) {
        return {
          show: true,
          type: 'surge_ending',
          title: '‚è∞ Surge pricing –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è!',
          message: `–ü–æ–≤—ã—à–µ–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã √ó${surgePricingInfo.multiplier} –¥–µ–π—Å—Ç–≤—É—é—Ç –µ—â–µ ${daysLeft} –¥–Ω—è(–µ–π). –£—Å–ø–µ–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ —Ç–µ–∫—É—â–∏–º —Ü–µ–Ω–∞–º.`,
          severity: 'warning',
          actionText: '–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç',
          actionUrl: '/upload',
          countdown: {
            endDate: surgeEnd,
            message: '–¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è surge pricing'
          }
        };
      } else {
        return {
          show: true,
          type: 'surge_active',
          title: 'üìà –ê–∫—Ç–∏–≤–µ–Ω surge pricing',
          message: `–í —Å–≤—è–∑–∏ —Å –≤—ã—Å–æ–∫–∏–º —Å–µ–∑–æ–Ω–æ–º –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤—É—é—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã √ó${surgePricingInfo.multiplier}. ${surgePricingInfo.reason}`,
          severity: 'info',
          actionText: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ü–µ–Ω–∞—Ö',
          actionUrl: '/pricing'
        };
      }
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ surge —Å–∫–æ—Ä–æ
      const surgeStart = new Date(date.getFullYear(), 5, 15); // 15 –∏—é–Ω—è
      const daysUntilSurge = Math.ceil((surgeStart.getTime() - date.getTime()) / (1000 * 60 * 60 * 24));
      
      if (daysUntilSurge <= 7 && daysUntilSurge > 0) {
        return {
          show: true,
          type: 'discount',
          title: 'üí∞ –°–∫–∏–¥–∫–∞ 50% –¥–æ surge pricing!',
          message: `–û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–µ–π—á–∞—Å –ø–æ –±–∞–∑–æ–≤—ã–º —Ç–∞—Ä–∏—Ñ–∞–º. –ß–µ—Ä–µ–∑ ${daysUntilSurge} –¥–Ω—è(–µ–π) –Ω–∞—á–Ω–µ—Ç—Å—è surge pricing √ó2.`,
          severity: 'success',
          actionText: '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–π—á–∞—Å',
          actionUrl: '/upload',
          countdown: {
            endDate: surgeStart,
            message: '–¥–æ –Ω–∞—á–∞–ª–∞ surge pricing'
          }
        };
      } else {
        return {
          show: false,
          type: 'normal_pricing',
          title: '–û–±—ã—á–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã',
          message: '–î–µ–π—Å—Ç–≤—É—é—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.',
          severity: 'info'
        };
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private async getActiveNotifications(date: Date): Promise<PricingNotification[]> {
    const notifications: PricingNotification[] = [];
    const isSurgeActive = surgePricingService.isSurgePeriod(date);
    const currentMultiplier = surgePricingService.getSurgeMultiplier(date);
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ surge pricing
    if (isSurgeActive) {
      notifications.push({
        id: 'surge-active',
        type: 'surge_start',
        title: '–ê–∫—Ç–∏–≤–µ–Ω surge pricing',
        message: `–¢–∞—Ä–∏—Ñ—ã –ø–æ–≤—ã—à–µ–Ω—ã –≤ ${currentMultiplier}x —Ä–∞–∑–∞ –¥–æ 30 –∏—é–Ω—è –≤ —Å–≤—è–∑–∏ —Å –≤—ã—Å–æ–∫–∏–º —Å–µ–∑–æ–Ω–æ–º –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏.`,
        severity: 'warning',
        actionText: '–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏',
        actionUrl: '/pricing',
        validFrom: new Date(date.getFullYear(), 5, 15),
        validUntil: new Date(date.getFullYear(), 5, 30),
        dismissible: true,
        showInBanner: true,
        sendEmail: true
      });
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–∏–¥–∫–µ –ø–µ—Ä–µ–¥ surge
    const surgeStart = new Date(date.getFullYear(), 5, 15);
    const daysUntilSurge = Math.ceil((surgeStart.getTime() - date.getTime()) / (1000 * 60 * 60 * 24));
    
    if (daysUntilSurge <= 7 && daysUntilSurge > 0) {
      notifications.push({
        id: 'pre-surge-discount',
        type: 'discount',
        title: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏ –æ–±—ã—á–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤!',
        message: `–ß–µ—Ä–µ–∑ ${daysUntilSurge} –¥–Ω—è(–µ–π) –Ω–∞—á–Ω–µ—Ç—Å—è surge pricing. –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–µ–π—á–∞—Å –ø–æ –±–∞–∑–æ–≤—ã–º —Ü–µ–Ω–∞–º.`,
        severity: 'success',
        actionText: '–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç',
        actionUrl: '/upload',
        validFrom: new Date(date.getFullYear(), 5, 8),
        validUntil: new Date(date.getFullYear(), 5, 15),
        dismissible: true,
        showInBanner: true,
        sendEmail: true
      });
    }

    return notifications;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async getEmailNotifications(userId: string, date: Date = new Date()): Promise<PricingNotification[]> {
    const allNotifications = await this.getActiveNotifications(date);
    return allNotifications.filter(notification => notification.sendEmail);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  async shouldSendEmailNotification(
    userId: string, 
    notificationType: PricingNotification['type'],
    date: Date = new Date()
  ): Promise<boolean> {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏, 
    // –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    // –î–ª—è MVP –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
    return true;
  }

  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
   */
  async markNotificationAsSent(
    userId: string,
    notificationId: string,
    date: Date = new Date()
  ): Promise<void> {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    // –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
    console.log(`üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${notificationId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —Ü–µ–Ω
   */
  async getPricingSummary(date: Date = new Date()) {
    const status = await this.getCurrentPricingStatus(date);
    
    return {
      current: {
        basePrice: 5,
        currentPrice: 5 * status.currentMultiplier,
        multiplier: status.currentMultiplier,
        currency: 'RUB',
        unit: '—Ç CO‚ÇÇ'
      },
      surge: {
        isActive: status.isSurgeActive,
        reason: status.surgeReason,
        startDate: new Date(date.getFullYear(), 5, 15),
        endDate: new Date(date.getFullYear(), 5, 30)
      },
      banner: status.bannerInfo,
      hasActiveNotifications: status.notifications.length > 0
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const pricingNotificationService = new PricingNotificationService();
export default pricingNotificationService;
