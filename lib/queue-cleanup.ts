/**
 * Cleanup –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–ª—è PostgreSQL –æ—á–µ—Ä–µ–¥–µ–π
 * –ó–∞–¥–∞—á–∞ 8.3: –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è PostgreSQL –æ—á–µ—Ä–µ–¥–µ–π
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: 5.2, 6.3
 */

import { prisma } from './prisma';

export interface CleanupOptions {
  completedJobsOlderThanHours?: number;
  failedJobsOlderThanHours?: number;
  logsOlderThanHours?: number;
  batchSize?: number;
  dryRun?: boolean;
}

export interface CleanupResult {
  deletedJobs: number;
  deletedLogs: number;
  duration: number;
  errors: string[];
}

export class QueueCleanup {
  private static instance: QueueCleanup;

  private constructor() {}

  public static getInstance(): QueueCleanup {
    if (!QueueCleanup.instance) {
      QueueCleanup.instance = new QueueCleanup();
    }
    return QueueCleanup.instance;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á
   */
  async cleanupOldJobs(options: CleanupOptions = {}): Promise<CleanupResult> {
    const startTime = Date.now();
    const {
      completedJobsOlderThanHours = 24 * 7, // 7 –¥–Ω–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      failedJobsOlderThanHours = 24 * 30,   // 30 –¥–Ω–µ–π –¥–ª—è failed
      logsOlderThanHours = 24 * 3,          // 3 –¥–Ω—è –¥–ª—è –ª–æ–≥–æ–≤
      batchSize = 1000,
      dryRun = false
    } = options;

    console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á –æ—á–µ—Ä–µ–¥–∏...');
    console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: completed=${completedJobsOlderThanHours}h, failed=${failedJobsOlderThanHours}h, logs=${logsOlderThanHours}h`);
    console.log(`üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: ${batchSize}, dry run: ${dryRun}`);

    const result: CleanupResult = {
      deletedJobs: 0,
      deletedLogs: 0,
      duration: 0,
      errors: []
    };

    try {
      // 1. –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
      const completedCutoff = new Date(Date.now() - completedJobsOlderThanHours * 60 * 60 * 1000);
      const completedDeleted = await this.cleanupJobsByState(
        'COMPLETED', 
        completedCutoff, 
        batchSize, 
        dryRun
      );
      result.deletedJobs += completedDeleted;

      // 2. –û—á–∏—Å—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á
      const failedCutoff = new Date(Date.now() - failedJobsOlderThanHours * 60 * 60 * 1000);
      const failedDeleted = await this.cleanupJobsByState(
        'FAILED', 
        failedCutoff, 
        batchSize, 
        dryRun
      );
      result.deletedJobs += failedDeleted;

      // 3. –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
      const cancelledDeleted = await this.cleanupJobsByState(
        'CANCELLED', 
        completedCutoff, 
        batchSize, 
        dryRun
      );
      result.deletedJobs += cancelledDeleted;

      // 4. –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
      const expiredDeleted = await this.cleanupJobsByState(
        'EXPIRED', 
        completedCutoff, 
        batchSize, 
        dryRun
      );
      result.deletedJobs += expiredDeleted;

      // 5. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
      const logsCutoff = new Date(Date.now() - logsOlderThanHours * 60 * 60 * 1000);
      const logsDeleted = await this.cleanupOldLogs(logsCutoff, batchSize, dryRun);
      result.deletedLogs = logsDeleted;

      // 6. –û—á–∏—Å—Ç–∫–∞ –∑–∞–¥–∞—á —Å –∏—Å—Ç–µ–∫—à–∏–º keepUntil
      const keepUntilDeleted = await this.cleanupExpiredKeepUntil(batchSize, dryRun);
      result.deletedJobs += keepUntilDeleted;

      result.duration = Date.now() - startTime;

      console.log(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${result.duration}ms`);
      console.log(`üìä –£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞—á: ${result.deletedJobs}, –ª–æ–≥–æ–≤: ${result.deletedLogs}`);

      return result;

    } catch (error: any) {
      result.errors.push(error.message);
      result.duration = Date.now() - startTime;
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error.message);
      return result;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∑–∞–¥–∞—á –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
   */
  private async cleanupJobsByState(
    state: string, 
    cutoffDate: Date, 
    batchSize: number, 
    dryRun: boolean
  ): Promise<number> {
    console.log(`üîç –û—á–∏—Å—Ç–∫–∞ –∑–∞–¥–∞—á –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ${state} —Å—Ç–∞—Ä—à–µ ${cutoffDate.toISOString()}`);

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      const countResult = await prisma.queueJob.count({
        where: {
          state: state as any,
          completedOn: {
            lt: cutoffDate
          }
        }
      });

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${countResult} –∑–∞–¥–∞—á ${state} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);

      if (countResult === 0) {
        return 0;
      }

      if (dryRun) {
        console.log(`üîç DRY RUN: –ë—ã–ª–æ –±—ã —É–¥–∞–ª–µ–Ω–æ ${countResult} –∑–∞–¥–∞—á ${state}`);
        return countResult;
      }

      // –£–¥–∞–ª—è–µ–º –±–∞—Ç—á–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
      let totalDeleted = 0;
      let batchCount = 0;

      while (totalDeleted < countResult) {
        batchCount++;
        console.log(`üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ ${batchCount} –¥–ª—è ${state}...`);

        const deleteResult = await prisma.queueJob.deleteMany({
          where: {
            state: state as any,
            completedOn: {
              lt: cutoffDate
            }
          }
        });

        totalDeleted += deleteResult.count;
        console.log(`‚úÖ –ë–∞—Ç—á ${batchCount}: —É–¥–∞–ª–µ–Ω–æ ${deleteResult.count} –∑–∞–¥–∞—á ${state}`);

        // –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞, –∑–Ω–∞—á–∏—Ç –∑–∞–∫–æ–Ω—á–∏–ª–∏
        if (deleteResult.count < batchSize) {
          break;
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
      }

      console.log(`‚úÖ –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞—á ${state}: ${totalDeleted}`);
      return totalDeleted;

    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–¥–∞—á ${state}:`, error.message);
      throw error;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
   */
  private async cleanupOldLogs(cutoffDate: Date, batchSize: number, dryRun: boolean): Promise<number> {
    console.log(`üîç –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ ${cutoffDate.toISOString()}`);

    try {
      const countResult = await prisma.queueJobLog.count({
        where: {
          createdOn: {
            lt: cutoffDate
          }
        }
      });

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${countResult} –ª–æ–≥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);

      if (countResult === 0) {
        return 0;
      }

      if (dryRun) {
        console.log(`üîç DRY RUN: –ë—ã–ª–æ –±—ã —É–¥–∞–ª–µ–Ω–æ ${countResult} –ª–æ–≥–æ–≤`);
        return countResult;
      }

      const deleteResult = await prisma.queueJobLog.deleteMany({
        where: {
          createdOn: {
            lt: cutoffDate
          }
        }
      });

      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –ª–æ–≥–æ–≤: ${deleteResult.count}`);
      return deleteResult.count;

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤:', error.message);
      throw error;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∑–∞–¥–∞—á —Å –∏—Å—Ç–µ–∫—à–∏–º keepUntil
   */
  private async cleanupExpiredKeepUntil(batchSize: number, dryRun: boolean): Promise<number> {
    console.log('üîç –û—á–∏—Å—Ç–∫–∞ –∑–∞–¥–∞—á —Å –∏—Å—Ç–µ–∫—à–∏–º keepUntil');

    try {
      const now = new Date();
      const countResult = await prisma.queueJob.count({
        where: {
          keepUntil: {
            lt: now
          }
        }
      });

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${countResult} –∑–∞–¥–∞—á —Å –∏—Å—Ç–µ–∫—à–∏–º keepUntil`);

      if (countResult === 0) {
        return 0;
      }

      if (dryRun) {
        console.log(`üîç DRY RUN: –ë—ã–ª–æ –±—ã —É–¥–∞–ª–µ–Ω–æ ${countResult} –∑–∞–¥–∞—á —Å –∏—Å—Ç–µ–∫—à–∏–º keepUntil`);
        return countResult;
      }

      const deleteResult = await prisma.queueJob.deleteMany({
        where: {
          keepUntil: {
            lt: now
          }
        }
      });

      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞—á —Å –∏—Å—Ç–µ–∫—à–∏–º keepUntil: ${deleteResult.count}`);
      return deleteResult.count;

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–¥–∞—á —Å –∏—Å—Ç–µ–∫—à–∏–º keepUntil:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏
   */
  async getQueueStatistics(): Promise<{
    totalJobs: number;
    jobsByState: Record<string, number>;
    totalLogs: number;
    logsByLevel: Record<string, number>;
    oldestJob: Date | null;
    newestJob: Date | null;
  }> {
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏...');

    try {
      // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
      const totalJobs = await prisma.queueJob.count();

      // –ó–∞–¥–∞—á–∏ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
      const jobsByStateRaw = await prisma.queueJob.groupBy({
        by: ['state'],
        _count: {
          id: true
        }
      });

      const jobsByState: Record<string, number> = {};
      jobsByStateRaw.forEach(item => {
        jobsByState[item.state] = item._count.id;
      });

      // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
      const totalLogs = await prisma.queueJobLog.count();

      // –õ–æ–≥–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º
      const logsByLevelRaw = await prisma.queueJobLog.groupBy({
        by: ['level'],
        _count: {
          id: true
        }
      });

      const logsByLevel: Record<string, number> = {};
      logsByLevelRaw.forEach(item => {
        logsByLevel[item.level] = item._count.id;
      });

      // –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –∏ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞
      const oldestJob = await prisma.queueJob.findFirst({
        orderBy: { createdOn: 'asc' },
        select: { createdOn: true }
      });

      const newestJob = await prisma.queueJob.findFirst({
        orderBy: { createdOn: 'desc' },
        select: { createdOn: true }
      });

      const stats = {
        totalJobs,
        jobsByState,
        totalLogs,
        logsByLevel,
        oldestJob: oldestJob?.createdOn || null,
        newestJob: newestJob?.createdOn || null
      };

      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏:', stats);
      return stats;

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
      throw error;
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ (–¥–ª—è cron job)
   */
  async autoCleanup(): Promise<CleanupResult> {
    console.log('ü§ñ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏...');

    const options: CleanupOptions = {
      completedJobsOlderThanHours: 24 * 7,  // 7 –¥–Ω–µ–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
      failedJobsOlderThanHours: 24 * 30,    // 30 –¥–Ω–µ–π –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö
      logsOlderThanHours: 24 * 3,           // 3 –¥–Ω—è –¥–ª—è –ª–æ–≥–æ–≤
      batchSize: 500,                       // –ú–µ–Ω—å—à–∏–π –±–∞—Ç—á –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
      dryRun: false
    };

    return await this.cleanupOldJobs(options);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const queueCleanup = QueueCleanup.getInstance();