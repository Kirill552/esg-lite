'use client'

import { useState } from 'react'
import { FileUpload } from '@/components/upload/FileUpload'
import { Card } from '@/components/ui/Card'
import { Button } from '@/components/ui/Button'
import { ProgressModal } from '@/components/ui/ProgressModal'
import { useProgressModal } from '@/lib/hooks/useProgressModal'
import { FileType } from '@/types'
import { 
  Upload, 
  FileText, 
  AlertCircle, 
  CheckCircle, 
  Loader2,
  Download,
  Eye
} from 'lucide-react'

import Link from 'next/link'

export default function UploadPage() {
  const [selectedFile, setSelectedFile] = useState<File | null>(null)
  const [isProcessing, setIsProcessing] = useState(false)
  const [processingComplete, setProcessingComplete] = useState(false)
  const [fileUploaded, setFileUploaded] = useState(false)
  const [uploadedFileInfo, setUploadedFileInfo] = useState<{documentId: string, fileKey: string} | null>(null)
  const [error, setError] = useState('')
  
  // –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–º–æ–¥–∞–ª–∫–æ–π
  const [progressState, progressActions] = useProgressModal()

  const maxFileSizeInMB = 10
  const acceptedFileTypes: FileType[] = ['pdf', 'csv', 'xlsx', 'xls'] // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º Excel —Ñ–∞–π–ª—ã

  const handleFileSelect = (file: File) => {
    setSelectedFile(file)
    setError('')
    setProcessingComplete(false)
    setFileUploaded(false)
    setUploadedFileInfo(null)
    progressActions.reset()
  }

  const handleProcessFile = async () => {
    if (!selectedFile) return

    const fileSize = (selectedFile.size / 1024 / 1024).toFixed(2) + ' –ú–ë'
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if (selectedFile.size > maxFileSizeInMB * 1024 * 1024) {
      progressActions.setError(
        `–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${maxFileSizeInMB} –ú–ë`,
        {
          type: 'file-size',
          maxSize: maxFileSizeInMB + ' –ú–ë',
          actualSize: fileSize
        }
      )
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    const fileExtension = selectedFile.name.split('.').pop()?.toLowerCase()
    if (!fileExtension || !acceptedFileTypes.includes(fileExtension as FileType)) {
      progressActions.setError(
        '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞',
        {
          type: 'file-type',
          allowedTypes: acceptedFileTypes,
          actualType: fileExtension || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        }
      )
      return
    }

    progressActions.startUpload(selectedFile.name, fileSize)
    setIsProcessing(true)
    setError('')

    try {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
      progressActions.updateProgress(10, '–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª...')
      
      const formData = new FormData()
      formData.append('file', selectedFile)

      progressActions.updateProgress(30, '–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä...')

      const uploadResponse = await fetch('/api/upload', {
        method: 'POST',
        body: formData,
      })

      progressActions.updateProgress(70, '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª...')

      if (!uploadResponse.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞')
      }

      const uploadResult = await uploadResponse.json()
      
      if (!uploadResult.success) {
        throw new Error(uploadResult.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞')
      }

      progressActions.updateProgress(100, '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!')
      
      setTimeout(() => {
        progressActions.setCompleted('–§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ')
      }, 500)

      console.log('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:', uploadResult.data)
      setFileUploaded(true)
      setUploadedFileInfo(uploadResult.data)
      
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err)
      setError(err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
      
      progressActions.setError(
        err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞',
        { type: 'network' }
      )
    } finally {
      setIsProcessing(false)
    }
  }

  const handleRunOCR = async () => {
    if (!uploadedFileInfo) return

    progressActions.setProcessing('–ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...')
    setIsProcessing(true)
    setError('')

    try {
      console.log('üîç –ó–∞–ø—É—Å–∫–∞–µ–º OCR –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:', uploadedFileInfo.documentId)

      const ocrResponse = await fetch('/api/ocr', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          documentId: uploadedFileInfo.documentId
        }),
      })

      if (!ocrResponse.ok) {
        throw new Error('–û—à–∏–±–∫–∞ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏')
      }

      const ocrResult = await ocrResponse.json()
      
      if (!ocrResult.success) {
        throw new Error(ocrResult.error || '–û—à–∏–±–∫–∞ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏')
      }

      console.log('‚úÖ OCR –∑–∞–≤–µ—Ä—à–µ–Ω:', ocrResult.data)
      setProcessingComplete(true)
      
      progressActions.setCompleted('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –û—Ç—á–µ—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é.')
      
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ OCR:', err)
      setError(err.message || '–û—à–∏–±–∫–∞ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
      
      progressActions.setError(
        err.message || '–û—à–∏–±–∫–∞ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏',
        { type: 'server' }
      )
    } finally {
      setIsProcessing(false)
    }
  }

  const resetUpload = () => {
    setSelectedFile(null)
    setProcessingComplete(false)
    setFileUploaded(false)
    setUploadedFileInfo(null)
    setError('')
    progressActions.reset()
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-emerald-50 via-white to-blue-50 py-12">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-slate-900 mb-4">
            –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
          </h1>
          <p className="text-xl text-slate-600 max-w-2xl mx-auto">
            –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Å—á–µ—Ç–∞ –∑–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é –∏–ª–∏ CSV/Excel —Ñ–∞–π–ª—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ 
            —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤ –ø–æ 296-–§–ó
          </p>
        </div>

        {/* –ë–ª–æ–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É–¥–∞–ª—ë–Ω */}

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Upload Area */}
          <div className="lg:col-span-2">
            <Card className="p-8 border-0 bg-white/70 backdrop-blur-sm">
              <div className="mb-6">
                <h2 className="text-2xl font-semibold text-slate-900 mb-2">
                  –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª
                </h2>
                <p className="text-slate-600">
                  –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã: PDF, CSV, Excel XLS/XLSX (–¥–æ {maxFileSizeInMB} –ú–ë)
                </p>
              </div>

              {!selectedFile ? (
                <FileUpload
                  onFileSelect={handleFileSelect}
                  acceptedFileTypes={acceptedFileTypes}
                  maxFileSizeInMB={maxFileSizeInMB}
                  className="mb-6"
                />
              ) : (
                <div className="mb-6">
                  <div className="flex items-center p-4 bg-emerald-50 border border-emerald-200 rounded-lg mb-4">
                    <FileText className="w-8 h-8 text-emerald-600 mr-4" />
                    <div className="flex-1">
                      <h3 className="font-medium text-emerald-900">
                        {selectedFile.name}
                      </h3>
                      <p className="text-sm text-emerald-600">
                        {(selectedFile.size / 1024 / 1024).toFixed(2)} –ú–ë
                      </p>
                    </div>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={resetUpload}
                      className="text-emerald-600 hover:text-emerald-700"
                    >
                      –ò–∑–º–µ–Ω–∏—Ç—å
                    </Button>
                  </div>
                  
                  {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ */}
                  {!fileUploaded && (
                    <Button
                      onClick={handleProcessFile}
                      disabled={isProcessing}
                      className="w-full bg-gradient-to-r from-emerald-500 to-green-600 text-white hover:from-emerald-600 hover:to-green-700 transition-all duration-200"
                      size="lg"
                    >
                      {isProcessing ? (
                        <>
                          <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                          –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª 
                        </>
                      ) : (
                        <>
                          <Upload className="w-5 h-5 mr-2" />
                          üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª 
                        </>
                      )}
                    </Button>
                  )}
                </div>
              )}

              {error && (
                <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg flex items-center">
                  <AlertCircle className="w-5 h-5 text-red-600 mr-3" />
                  <p className="text-red-700">{error}</p>
                </div>
              )}

              {fileUploaded && !processingComplete && (
                <div className="space-y-4">
                  <div className="p-4 bg-green-50 border border-green-200 rounded-lg flex items-center">
                    <CheckCircle className="w-5 h-5 text-green-600 mr-3" />
                    <p className="text-green-700 font-medium">
                      ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞.
                    </p>
                  </div>
                  
                  <Button
                    onClick={handleRunOCR}
                    disabled={isProcessing}
                    className="w-full bg-gradient-to-r from-blue-500 to-indigo-600 text-white hover:from-blue-600 hover:to-indigo-700 transition-all duration-200"
                    size="lg"
                  >
                    {isProcessing ? (
                      <>
                        <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                        –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ç–µ–∫—Å—Ç...
                      </>
                    ) : (
                      <>
                        <Eye className="w-5 h-5 mr-2" />
                        üîç –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç
                      </>
                    )}
                  </Button>
                </div>
              )}

              {processingComplete && (
                <div className="space-y-4">
                  <div className="p-4 bg-green-50 border border-green-200 rounded-lg flex items-center">
                    <CheckCircle className="w-5 h-5 text-green-600 mr-3" />
                    <p className="text-green-700 font-medium">
                      –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –û—Ç—á—ë—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é.
                    </p>
                  </div>
                  
                  <div className="space-y-4">
                    <Link href="/reports">
                      <Button variant="primary" size="lg" className="w-full bg-gradient-to-r from-blue-500 to-indigo-600 text-white hover:from-blue-600 hover:to-indigo-700">
                        <Download className="w-5 h-5 mr-2" />
                        –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ç—á—ë—Ç–∞–º
                      </Button>
                    </Link>
                    
                    <Link href="/documents">
                      <Button variant="secondary" size="lg" className="w-full">
                        <FileText className="w-5 h-5 mr-2" />
                        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
                      </Button>
                    </Link>
                  </div>
                  
                  <Button
                    variant="ghost"
                    onClick={resetUpload}
                    className="w-full"
                  >
                    –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª
                  </Button>
                </div>
              )}
            </Card>
          </div>

          {/* Info Sidebar */}
          <div className="space-y-6">
            <Card className="p-6 border-0 bg-white/60 backdrop-blur-sm">
              <h3 className="font-bold text-slate-900 mb-4">
                üìã –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ?
              </h3>
              <div className="space-y-3 text-sm text-slate-600">
                <div className="flex items-start">
                  <div className="w-6 h-6 bg-emerald-100 rounded-full flex items-center justify-center mr-3 mt-0.5">
                    <span className="text-xs font-medium text-emerald-700">1</span>
                  </div>
                  <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞</p>
                </div>
                <div className="flex items-start">
                  <div className="w-6 h-6 bg-emerald-100 rounded-full flex items-center justify-center mr-3 mt-0.5">
                    <span className="text-xs font-medium text-emerald-700">2</span>
                  </div>
                  <p>–†–∞—Å—á—ë—Ç —É–≥–ª–µ—Ä–æ–¥–Ω–æ–≥–æ —Å–ª–µ–¥–∞ –ø–æ 296-–§–ó</p>
                </div>
                <div className="flex items-start">
                  <div className="w-6 h-6 bg-emerald-100 rounded-full flex items-center justify-center mr-3 mt-0.5">
                    <span className="text-xs font-medium text-emerald-700">3</span>
                  </div>
                  <p>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤ PDF –∏ CSV/XML</p>
                </div>
              </div>
            </Card>

            <Card className="p-6 border-0 bg-white/60 backdrop-blur-sm">
              <h3 className="font-bold text-slate-900 mb-4">
                üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
              </h3>
              <div className="space-y-3 text-sm text-slate-600">
                <div className="flex items-center">
                  <FileText className="w-4 h-4 text-slate-500 mr-2" />
                  <p>PDF —Å—á–µ—Ç–∞ –∑–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é</p>
                </div>
                <div className="flex items-center">
                  <FileText className="w-4 h-4 text-slate-500 mr-2" />
                  <p>CSV —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏</p>
                </div>
                <div className="flex items-center">
                  <FileText className="w-4 h-4 text-slate-500 mr-2" />
                  <p>Excel —Ñ–∞–π–ª—ã XLS/XLSX —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏</p>
                </div>
              </div>
            </Card>

            <Card className="p-6 border-0 bg-gradient-to-br from-emerald-50 to-green-50/50">
              <h3 className="font-bold text-slate-900 mb-4">
                üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
              </h3>
              <p className="text-sm text-slate-600">
                –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –∏ —É–¥–∞–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ 
                —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏.
              </p>
            </Card>
          </div>
        </div>
      </div>
      
      {/* Progress Modal */}
      <ProgressModal
        isOpen={progressState.isOpen}
        progress={progressState.progress}
        status={progressState.status}
        message={progressState.message}
        details={progressState.details}
        fileName={progressState.fileName}
        fileSize={progressState.fileSize}
        errorDetails={progressState.errorDetails}
        onClose={progressActions.close}
        onRetry={() => {
          progressActions.close()
          if (progressState.status === 'error' && selectedFile) {
            handleProcessFile()
          }
        }}
      />
    </div>
  )
} 