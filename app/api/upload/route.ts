import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { uploadFile, generateFileKey } from '@/lib/s3';
import { prisma } from '@/lib/prisma';
import { getUserInternalId } from '@/lib/user-utils';

export const runtime = 'nodejs';

export async function POST(request: NextRequest) {
  try {
    const { userId } = await auth();
    if (!userId) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const formData = await request.formData();
    const file = formData.get('file') as File;

    if (!file) {
      return NextResponse.json(
        { error: 'No file provided' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    const allowedTypes = [
      'application/pdf', 
      'text/csv', 
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // .xlsx
      'application/vnd.ms-excel' // .xls
    ];
    if (!allowedTypes.includes(file.type)) {
      return NextResponse.json(
        { error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (10MB)
    const maxSize = 10 * 1024 * 1024; // 10MB
    if (file.size > maxSize) {
      return NextResponse.json(
        { error: 'File too large. Maximum size is 10MB.' },
        { status: 400 }
      );
    }

    console.log('üìÅ Uploading file to S3:', file.name);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ S3
    const fileType = file.type === 'application/pdf' ? 'pdf' : 'csv';
    const fileKey = generateFileKey(file.name, fileType);
    const buffer = Buffer.from(await file.arrayBuffer());
    const fileUrl = await uploadFile(fileKey, buffer, file.type);

    console.log('‚úÖ File uploaded to S3. URL:', fileUrl);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const documentId = `doc_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    const result = await prisma.$transaction(async (tx) => {
      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const internalUserId = await getUserInternalId(userId);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const user = await tx.user.findUnique({
        where: { id: internalUserId }
      });

      if (!user) {
        throw new Error('USER_NOT_FOUND');
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ë–î
      const document = await tx.document.create({
        data: {
          id: documentId,
          userId: internalUserId,
          fileName: file.name,
          originalName: file.name,
          filePath: fileKey, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª—é—á —Ñ–∞–π–ª–∞
          fileSize: file.size,
          fileType: file.type,
          status: 'UPLOADED'
        }
      });

      return { document, user };
    });
    
    console.log('üíæ Document saved to database:', result.document);

    return NextResponse.json({
      success: true,
      data: {
        documentId: result.document.id,
        fileKey,
        fileName: result.document.fileName
      }
    }, { status: 201 });

  } catch (error: any) {
    console.error('‚ùå Upload error:', error);
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (error instanceof Error) {
      // –û—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (error.message.includes('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è') || 
          error.message === 'USER_NOT_FOUND') {
        return NextResponse.json(
          { error: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
          { status: 401 }
        );
      }

      // –û—à–∏–±–∫–∏ S3
      if (error.message.includes('S3') || error.message.includes('upload')) {
        return NextResponse.json(
          { error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ' },
          { status: 503 }
        );
      }

      // –û—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      if (error.message.includes('Unique constraint')) {
        return NextResponse.json(
          { error: '–î–æ–∫—É–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' },
          { status: 409 }
        );
      }

      // –û—à–∏–±–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      if (error.message.includes('Transaction')) {
        return NextResponse.json(
          { error: '–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' },
          { status: 500 }
        );
      }
    }
    
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞', details: error.message },
      { status: 500 }
    );
  }
} 