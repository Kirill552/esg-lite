/**
 * Health Check API endpoint –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π
 * –ó–∞–¥–∞—á–∞ 7.2: –°–æ–∑–¥–∞—Ç—å API endpoint –¥–ª—è health checks
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: 3.1, 3.2
 */

import { NextRequest, NextResponse } from 'next/server';
import { healthMonitor } from '@/lib/health-monitor';

export const runtime = 'nodejs';

/**
 * GET /api/queue/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 3.1: Endpoint –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 3.2: –ü–æ–∫–∞–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
 */
export async function GET(request: NextRequest) {
  const startTime = Date.now();
  
  try {
    console.log('üè• Health check –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');

    const { searchParams } = new URL(request.url);
    const component = searchParams.get('component'); // specific component check
    const quick = searchParams.get('quick') === 'true'; // quick check flag

    // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞
    if (quick) {
      console.log('‚ö° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è...');
      
      const quickResult = await healthMonitor.quickHealthCheck();
      const responseTime = Date.now() - startTime;
      
      return NextResponse.json({
        status: quickResult.healthy ? 'healthy' : 'unhealthy',
        message: quickResult.message,
        timestamp: new Date().toISOString(),
        responseTime: `${responseTime}ms`,
        type: 'quick'
      }, { 
        status: quickResult.healthy ? 200 : 503,
        headers: {
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache',
          'Expires': '0'
        }
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    if (component) {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${component}`);
      
      let componentHealth;
      let httpStatus = 200;

      switch (component) {
        case 'queue-storage':
        case 'storage':
          componentHealth = await healthMonitor.checkQueueStorageHealth();
          break;
        case 'queue':
          componentHealth = await healthMonitor.checkQueueHealth();
          break;
        case 'database':
        case 'db':
          componentHealth = await healthMonitor.checkDatabaseHealth();
          break;
        default:
          return NextResponse.json({
            error: 'Invalid component',
            message: `Component '${component}' not found`,
            availableComponents: ['queue-storage', 'queue', 'database'],
            timestamp: new Date().toISOString()
          }, { status: 400 });
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      if (componentHealth.status === 'unhealthy') {
        httpStatus = 503; // Service Unavailable
      } else if (componentHealth.status === 'critical') {
        httpStatus = 500; // Internal Server Error
      } else if (componentHealth.status === 'warning') {
        httpStatus = 200; // OK but with warnings
      }

      const responseTime = Date.now() - startTime;

      return NextResponse.json({
        component,
        ...componentHealth,
        responseTime: `${responseTime}ms`,
        type: 'component'
      }, { 
        status: httpStatus,
        headers: {
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache',
          'Expires': '0'
        }
      });
    }

    // –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    console.log('üè• –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...');
    
    const overallHealth = await healthMonitor.getOverallHealth();
    const responseTime = Date.now() - startTime;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
    let httpStatus = 200;
    if (overallHealth.status === 'unhealthy') {
      httpStatus = 503; // Service Unavailable
    } else if (overallHealth.status === 'critical') {
      httpStatus = 500; // Internal Server Error
    } else if (overallHealth.status === 'warning') {
      httpStatus = 200; // OK but with warnings
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    const response = {
      ...overallHealth,
      responseTime: `${responseTime}ms`,
      type: 'full',
      // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ 3.2)
      queueSummary: {
        totalJobs: overallHealth.components.queue.stats.total,
        waiting: overallHealth.components.queue.stats.waiting,
        active: overallHealth.components.queue.stats.active,
        completed: overallHealth.components.queue.stats.completed,
        failed: overallHealth.components.queue.stats.failed,
        successRate: overallHealth.components.queue.stats.total > 0 
          ? ((overallHealth.components.queue.stats.completed / overallHealth.components.queue.stats.total) * 100).toFixed(1) + '%'
          : '0%'
      },
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      performance: {
        responseTime: `${responseTime}ms`,
        queueStorageResponseTime: overallHealth.components.queueStorage.connectionTime ? 
          `${overallHealth.components.queueStorage.connectionTime}ms` : 'N/A',
        databaseResponseTime: overallHealth.components.database.details?.responseTime ? 
          `${overallHealth.components.database.details.responseTime}ms` : 'N/A'
      },
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º
      recommendations: generateRecommendations(overallHealth)
    };

    console.log(`‚úÖ Health check –∑–∞–≤–µ—Ä—à–µ–Ω: ${overallHealth.status} (${responseTime}ms)`);

    return NextResponse.json(response, { 
      status: httpStatus,
      headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0',
        'X-Health-Status': overallHealth.status,
        'X-Response-Time': `${responseTime}ms`
      }
    });

  } catch (error: any) {
    const responseTime = Date.now() - startTime;
    console.error('‚ùå Health check API error:', error);

    return NextResponse.json({
      status: 'unhealthy',
      message: 'Health check failed',
      error: error.message,
      timestamp: new Date().toISOString(),
      responseTime: `${responseTime}ms`,
      type: 'error',
      details: {
        errorType: 'HEALTH_CHECK_ERROR',
        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
      }
    }, { 
      status: 503,
      headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    });
  }
}

/**
 * HEAD /api/queue/health - –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å)
 */
export async function HEAD(request: NextRequest) {
  try {
    const quickResult = await healthMonitor.quickHealthCheck();
    
    return new NextResponse(null, {
      status: quickResult.healthy ? 200 : 503,
      headers: {
        'X-Health-Status': quickResult.healthy ? 'healthy' : 'unhealthy',
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    });
  } catch (error) {
    return new NextResponse(null, {
      status: 503,
      headers: {
        'X-Health-Status': 'unhealthy',
        'Cache-Control': 'no-cache, no-store, must-revalidate'
      }
    });
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º
 */
function generateRecommendations(health: any): string[] {
  const recommendations: string[] = [];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –æ—á–µ—Ä–µ–¥–µ–π
  if (health.components.queueStorage.status === 'unhealthy') {
    recommendations.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL');
    recommendations.push('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω');
  } else if (health.components.queueStorage.status === 'critical') {
    recommendations.push('–£–≤–µ–ª–∏—á—å—Ç–µ –ª–∏–º–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π PostgreSQL');
    recommendations.push('–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
  } else if (health.components.queueStorage.status === 'warning') {
    recommendations.push('–ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å PostgreSQL');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—á–µ—Ä–µ–¥—å—é
  if (health.components.queue.status === 'unhealthy') {
    recommendations.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π');
    recommendations.push('–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ worker –ø—Ä–æ—Ü–µ—Å—Å—ã');
  } else if (health.components.queue.status === 'critical') {
    const stats = health.components.queue.stats;
    if (stats.waiting + stats.active > 500) {
      recommendations.push('–£–≤–µ–ª–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ worker –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
      recommendations.push('–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á');
    }
    if (stats.total > 0 && (stats.failed / stats.total) > 0.1) {
      recommendations.push('–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–æ–∫ –≤ –∑–∞–¥–∞—á–∞—Ö');
      recommendations.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ worker –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
    }
  } else if (health.components.queue.status === 'warning') {
    recommendations.push('–ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –æ—á–µ—Ä–µ–¥—å');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  if (health.components.database.status === 'unhealthy') {
    recommendations.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
  } else if (health.components.database.status === 'critical') {
    recommendations.push('–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    recommendations.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω–¥–µ–∫—Å—ã –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ë–î');
  }

  // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (health.summary.criticalIssues > 0) {
    recommendations.push('–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã');
  }
  
  if (health.summary.warnings > 0 && health.summary.criticalIssues === 0) {
    recommendations.push('–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π');
  }

  if (recommendations.length === 0) {
    recommendations.push('–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥');
  }

  return recommendations;
}