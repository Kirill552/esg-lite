import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient, ReportType } from '@prisma/client';
import { auth } from '@clerk/nextjs/server';
import fs from 'fs';
import path from 'path';
import { generate296FZReport, generateCBAMReport, ReportGenerationData } from '@/lib/report-generator';

// –¢–∏–ø—ã –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
interface EsgReportData {
  documentId: string;
  companyName: string;
  fullCompanyName: string;
  inn: string;
  ogrn: string;
  kpp: string;
  reportingPeriod: string;
  emissionSources: Array<{
    source: string;
    activity: string;
    unit: string;
    emissionFactor: string;
    emissions: string;
  }>;
  totalEmissions: string;
  methodology: string;
  createdAt: string;
}

interface CbamDeclarationData {
  documentId: string;
  companyName: string;
  eori: string;
  quarter: string;
  goods: Array<{
    cnCode: string;
    goodType: string;
    quantity: string;
    unit: string;
    totalEmissions: string;
  }>;
  totalQuantity: string;
  totalEmissions: string;
  createdAt: string;
}

// –§—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF (–∑–∞–≥–ª—É—à–∫–∏, –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã)
async function generateEsgReportPdf(data: EsgReportData): Promise<Buffer> {
  // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π PDF
  const puppeteer = require('puppeteer');
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  
  const html = `
    <html>
      <head>
        <meta charset="UTF-8">
        <title>–û—Ç—á–µ—Ç 296-–§–ó</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; }
          h1 { color: #2563eb; }
          table { border-collapse: collapse; width: 100%; margin: 20px 0; }
          th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
          th { background-color: #f2f2f2; }
        </style>
      </head>
      <body>
        <h1>–û—Ç—á–µ—Ç –æ –≤—ã–±—Ä–æ—Å–∞—Ö –ø–∞—Ä–Ω–∏–∫–æ–≤—ã—Ö –≥–∞–∑–æ–≤ (296-–§–ó)</h1>
        <p><strong>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</strong> ${data.companyName}</p>
        <p><strong>–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</strong> ${data.fullCompanyName}</p>
        <p><strong>–ò–ù–ù:</strong> ${data.inn}</p>
        <p><strong>–û–ì–†–ù:</strong> ${data.ogrn}</p>
        <p><strong>–ö–ü–ü:</strong> ${data.kpp}</p>
        <p><strong>–û—Ç—á–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥:</strong> ${data.reportingPeriod}</p>
        <p><strong>–û–±—â–∏–µ –≤—ã–±—Ä–æ—Å—ã:</strong> ${data.totalEmissions} —Ç CO‚ÇÇ-—ç–∫–≤</p>
        <h2>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≤—ã–±—Ä–æ—Å–æ–≤:</h2>
        <table>
          <tr><th>–ò—Å—Ç–æ—á–Ω–∏–∫</th><th>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</th><th>–ï–¥–∏–Ω–∏—Ü–∞</th><th>–§–∞–∫—Ç–æ—Ä</th><th>–í—ã–±—Ä–æ—Å—ã</th></tr>
          ${data.emissionSources.map(source => `
            <tr>
              <td>${source.source}</td>
              <td>${source.activity}</td>
              <td>${source.unit}</td>
              <td>${source.emissionFactor}</td>
              <td>${source.emissions}</td>
            </tr>
          `).join('')}
        </table>
        <p><strong>–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è:</strong> ${data.methodology}</p>
        <p><strong>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong> ${data.createdAt}</p>
      </body>
    </html>
  `;
  
  await page.setContent(html);
  const pdfBuffer = await page.pdf({ format: 'A4' });
  await browser.close();
  
  return Buffer.from(pdfBuffer);
}

async function generateCbamDeclarationPdf(data: CbamDeclarationData): Promise<Buffer> {
  const puppeteer = require('puppeteer');
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  
  const html = `
    <html>
      <head>
        <meta charset="UTF-8">
        <title>CBAM Declaration</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; }
          h1 { color: #2563eb; }
          table { border-collapse: collapse; width: 100%; margin: 20px 0; }
          th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
          th { background-color: #f2f2f2; }
        </style>
      </head>
      <body>
        <h1>CBAM Declaration</h1>
        <p><strong>Company:</strong> ${data.companyName}</p>
        <p><strong>EORI:</strong> ${data.eori}</p>
        <p><strong>Quarter:</strong> ${data.quarter}</p>
        <p><strong>Total Emissions:</strong> ${data.totalEmissions} tCO‚ÇÇ-eq</p>
        <h2>Goods:</h2>
        <table border="1" style="border-collapse: collapse; width: 100%;">
          <tr><th>CN Code</th><th>Good Type</th><th>Quantity</th><th>Unit</th><th>Emissions</th></tr>
          ${data.goods.map(good => `
            <tr>
              <td>${good.cnCode}</td>
              <td>${good.goodType}</td>
              <td>${good.quantity}</td>
              <td>${good.unit}</td>
              <td>${good.totalEmissions}</td>
            </tr>
          `).join('')}
        </table>
        <p><strong>Created:</strong> ${data.createdAt}</p>
      </body>
    </html>
  `;
  
  await page.setContent(html);
  const pdfBuffer = await page.pdf({ format: 'A4' });
  await browser.close();
  
  return Buffer.from(pdfBuffer);
}

const prisma = new PrismaClient();

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { userId } = await auth();
    
    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { id } = await params;

    // –ù–∞—Ö–æ–¥–∏–º –æ—Ç—á–µ—Ç
    const report = await prisma.report.findFirst({
      where: { id, userId }
    });

    if (!report) {
      return NextResponse.json({ error: 'Report not found' }, { status: 404 });
    }

    // –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    if (report.filePath && fs.existsSync(report.filePath)) {
      const fileBuffer = fs.readFileSync(report.filePath);
      const response = new NextResponse(fileBuffer);
      
      response.headers.set('Content-Type', 'application/pdf');
      response.headers.set('Content-Disposition', `inline; filename="${report.fileName}"`);
      
      console.log(`üëÅÔ∏è –û—Ç—á–µ—Ç –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: ${report.fileName}`);
      return response;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    console.log(`üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: ${report.reportType}`);
    
    let pdfBuffer: Buffer;

    // –ü—Ä–∏–≤–æ–¥–∏–º emissionData –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ç–∏–ø—É
    const emissionData = report.emissionData as any;

    switch (report.reportType as string) {
      case 'REPORT_296FZ':
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 296-–§–ó –æ—Ç—á–µ—Ç
        const esgData: EsgReportData = {
          documentId: report.id,
          companyName: emissionData?.companyName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
          fullCompanyName: emissionData?.fullCompanyName || emissionData?.companyName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
          inn: emissionData?.inn || '0000000000',
          ogrn: emissionData?.ogrn || '0000000000000',
          kpp: emissionData?.kpp || '',
          reportingPeriod: emissionData?.reportingPeriod || new Date().getFullYear().toString(),
          emissionSources: emissionData?.emissionSources || [
            {
              source: '–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è',
              activity: '1000',
              unit: '–∫–í—Ç¬∑—á',
              emissionFactor: '0.322',
              emissions: '322.0'
            },
            {
              source: '–ü—Ä–∏—Ä–æ–¥–Ω—ã–π –≥–∞–∑',
              activity: '500',
              unit: '–º¬≥',
              emissionFactor: '2.349',
              emissions: '1174.5'
            }
          ],
          totalEmissions: emissionData?.totalEmissions || '1496.5',
          methodology: report.methodology || '296-–§–ó-2025',
          createdAt: new Date().toLocaleDateString('ru-RU')
        };
        
        pdfBuffer = await generateEsgReportPdf(esgData);
        break;

      case 'CBAM_XML':
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CBAM –æ—Ç—á–µ—Ç
        const cbamData: CbamDeclarationData = {
          documentId: report.id,
          companyName: emissionData?.companyName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
          eori: emissionData?.eori || 'RU000000000000000',
          quarter: emissionData?.quarter || 'Q1 2025',
          goods: emissionData?.goods || [
            {
              cnCode: '7208 51 200',
              goodType: 'Steel sheets, hot-rolled',
              quantity: '100.0',
              unit: 'tonnes',
              totalEmissions: '250.5'
            }
          ],
          totalQuantity: emissionData?.totalQuantity || '100.0 tonnes',
          totalEmissions: emissionData?.totalEmissions || '250.5',
          createdAt: new Date().toLocaleDateString('ru-RU')
        };
        
        pdfBuffer = await generateCbamDeclarationPdf(cbamData);
        break;

      default:
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –æ—Ç—á–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º 296-–§–ó —à–∞–±–ª–æ–Ω
        const defaultData: EsgReportData = {
          documentId: report.id,
          companyName: emissionData?.companyName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
          fullCompanyName: emissionData?.fullCompanyName || emissionData?.companyName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
          inn: emissionData?.inn || '0000000000',
          ogrn: emissionData?.ogrn || '0000000000000',
          kpp: emissionData?.kpp || '',
          reportingPeriod: emissionData?.reportingPeriod || new Date().getFullYear().toString(),
          emissionSources: emissionData?.emissionSources || [],
          totalEmissions: emissionData?.totalEmissions || '0',
          methodology: report.methodology || '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–µ—Ç–æ–¥–∏–∫–∞',
          createdAt: new Date().toLocaleDateString('ru-RU')
        };
        
        pdfBuffer = await generateEsgReportPdf(defaultData);
        break;
    }

    const response = new NextResponse(pdfBuffer);
    response.headers.set('Content-Type', 'application/pdf');
    response.headers.set('Content-Disposition', `inline; filename="${report.fileName}"`);
    
    console.log(`‚úÖ PDF —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: ${report.fileName}`);
    return response;

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', error);
    
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É
    const errorPdf = Buffer.from(`%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj
2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj
3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
>>
endobj
4 0 obj
<<
/Length 120
>>
stream
BT
/F1 12 Tf
100 700 Td
(–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞) Tj
0 -20 Td
(Error generating report for view) Tj
0 -20 Td
(–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π) Tj
ET
endstream
endobj
xref
0 5
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000206 00000 n 
trailer
<<
/Size 5
/Root 1 0 R
>>
startxref
350
%%EOF`);

    const response = new NextResponse(errorPdf);
    response.headers.set('Content-Type', 'application/pdf');
    response.headers.set('Content-Disposition', `inline; filename="error_report_view.pdf"`);
    
    return response;
  }
}
