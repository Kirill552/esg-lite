import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient, ReportType } from '@prisma/client';
import { auth } from '@clerk/nextjs/server';
import { getUserInternalId } from '@/lib/user-utils';
import { validateReportData } from '@/lib/report-validation';
import { generateReport, ReportGenerationData } from '@/lib/report-generator';

const prisma = new PrismaClient();

// GET - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
export async function GET() {
  try {
    const { userId: clerkUserId } = await auth();
    
    if (!clerkUserId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const internalUserId = await getUserInternalId(clerkUserId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { id: internalUserId }
    });

    if (!user) {
      return NextResponse.json(
        { error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    const reports = await prisma.report.findMany({
      where: { userId: internalUserId },
      orderBy: { createdAt: 'desc' },
      include: {
        user: {
          select: {
            id: true,
            email: true,
            firstName: true,
            lastName: true
          }
        }
      }
    });

    return NextResponse.json(reports);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤:', error);
    
    if (error instanceof Error) {
      // –û—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (error.message.includes('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')) {
        return NextResponse.json(
          { error: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
          { status: 401 }
        );
      }

      // –û—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      if (error.message.includes('connection') || error.message.includes('timeout')) {
        return NextResponse.json(
          { error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö' },
          { status: 503 }
        );
      }
    }
    
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// POST - —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
export async function POST(request: NextRequest) {
  try {
    const { userId: clerkUserId } = await auth();
    
    if (!clerkUserId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const body = await request.json();
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞:', body);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const validationErrors = validateReportData(body);
    if (validationErrors.length > 0) {
      return NextResponse.json(
        { 
          error: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
          details: validationErrors
        },
        { status: 400 }
      );
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    const result = await prisma.$transaction(async (tx) => {
      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const internalUserId = await getUserInternalId(clerkUserId);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const user = await tx.user.findUnique({
        where: { id: internalUserId }
      });

      if (!user) {
        throw new Error('USER_NOT_FOUND');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
      const reportType = body.reportType === 'CBAM_QUARTERLY' ? 'CBAM' : '296-FZ';
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      const companyData = body.companyData || body.emissionData || {};
      const signerData = body.signerData || {};
      
      const reportGenerationData: ReportGenerationData = {
        // –û–±—â–∏–µ –ø–æ–ª—è
        org_name: companyData.companyName || companyData.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        org_address: companyData.address || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        signer_name: signerData.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        signer_position: signerData.position || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        signer_pos: signerData.position || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        sign_date: new Date().toLocaleDateString('ru-RU'),
        generation_date: new Date().toLocaleDateString('ru-RU'),
        generation_time: new Date().toLocaleTimeString('ru-RU'),
        document_id: `${reportType}_${Date.now()}`,
        
        // –ü–æ–ª—è –¥–ª—è 296-FZ
        org_inn: companyData.inn || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        org_okpo: companyData.okpo || companyData.ogrn || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        org_oktmo: companyData.oktmo || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        org_phone: companyData.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        org_email: companyData.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        report_year: companyData.reportingPeriod || body.reportPeriod || '2025',
        
        // –ü–æ–ª—è –¥–ª—è CBAM
        eori: companyData.eori || 'RU000000000000000',
        cbam_id: companyData.cbamId || 'DL-2025-000000',
        org_country: companyData.country || 'RU',
        report_year_q: body.reportPeriod || '2025-2',
        
        // –î–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–æ—Å–∞—Ö/—Ç–æ–≤–∞—Ä–∞—Ö
        ...body.emissionData,
        ...body.goodsData
      };
      
      const generationResult = await generateReport(reportType, reportGenerationData);
      
      if (!generationResult.success) {
        throw new Error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: ${generationResult.error}`);
      }
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const reportData = {
        userId: internalUserId,
        reportType: body.reportType as ReportType,
        format: 'PDF',
        fileName: generationResult.fileName || `Report_${Date.now()}.pdf`,
        filePath: generationResult.filePath || '',
        fileSize: generationResult.fileSize || 0,
        emissionData: body.emissionData || {},
        methodology: reportType === 'CBAM' ? 'CBAM-2025' : '296-FZ-2025',
        downloadCount: 0,
        version: 1,
        isLocked: false
      };

      const report = await tx.report.create({
        data: reportData,
      });

      return { report, user, generationResult };
    });

    console.log(`‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ${result.report.id}, —Ç–∏–ø: ${result.report.reportType}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${result.user.id}`);
    
    if (result.generationResult?.unreplacedTokens && result.generationResult.unreplacedTokens.length > 0) {
      console.warn('‚ö†Ô∏è –ù–µ–∑–∞–º–µ–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:', result.generationResult.unreplacedTokens);
    }

    return NextResponse.json({
      ...result.report,
      generationInfo: {
        success: result.generationResult?.success || false,
        unreplacedTokens: result.generationResult?.unreplacedTokens || []
      }
    }, { status: 201 });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:', error);
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (error instanceof Error) {
      // –û—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (error.message.includes('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è') || 
          error.message === 'USER_NOT_FOUND') {
        return NextResponse.json(
          { error: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
          { status: 401 }
        );
      }

      // –û—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      if (error.message.includes('Unique constraint')) {
        return NextResponse.json(
          { error: '–û—Ç—á–µ—Ç —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' },
          { status: 409 }
        );
      }

      // –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Prisma
      if (error.message.includes('Invalid') || error.message.includes('Required')) {
        return NextResponse.json(
          { error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞' },
          { status: 400 }
        );
      }

      // –û—à–∏–±–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      if (error.message.includes('Transaction')) {
        return NextResponse.json(
          { error: '–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' },
          { status: 500 }
        );
      }
    }
    
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞' },
      { status: 500 }
    );
  }
} 