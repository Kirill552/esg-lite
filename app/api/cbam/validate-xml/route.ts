/**
 * API Endpoint –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ CBAM XML –æ—Ç—á—ë—Ç–æ–≤
 * 
 * POST /api/cbam/validate-xml
 * 
 * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç XML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –µ–≥–æ –ø—Ä–æ—Ç–∏–≤ XSD —Å—Ö–µ–º—ã CBAM
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏ XML
 * 
 * @version 1.0.0
 * @date 2025-08-01
 */

import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
const VALIDATOR_SERVICE_URL = process.env.XML_VALIDATOR_URL || 'http://xml-validator:3001';

export async function POST(request: NextRequest) {
  const startTime = Date.now();
  
  try {
    // –ü–∞—Ä—Å–∏–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    const body = await request.json();
    const { 
      xmlContent, 
      schemaType = 'cbam-quarterly', 
      includeStructureCheck = true,
      reportId 
    } = body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!xmlContent) {
      return NextResponse.json(
        { error: '–ü–∞—Ä–∞–º–µ—Ç—Ä xmlContent –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      );
    }

    if (typeof xmlContent !== 'string') {
      return NextResponse.json(
        { error: 'xmlContent –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π' },
        { status: 400 }
      );
    }

    console.log(`üîç –ó–∞–ø—Ä–æ—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ CBAM XML (—Å—Ö–µ–º–∞: ${schemaType})`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const validationResponse = await fetch(`${VALIDATOR_SERVICE_URL}/validate`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        xmlContent,
        schemaType,
        includeStructureCheck
      })
    });

    if (!validationResponse.ok) {
      const errorText = await validationResponse.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', errorText);
      
      return NextResponse.json(
        { 
          error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', 
          details: errorText,
          serviceUrl: VALIDATOR_SERVICE_URL 
        },
        { status: 502 }
      );
    }

    const validationResult = await validationResponse.json();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const response = {
      ...validationResult,
      metadata: {
        apiVersion: '1.0.0',
        requestTime: new Date().toISOString(),
        processingTime: Date.now() - startTime,
        reportId: reportId || null,
        schemaVersion: '1.4.1.1'
      }
    };

    // –õ–æ–≥–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const isValid = response.summary?.isValid || false;
    const totalErrors = response.summary?.totalErrors || 0;
    const totalWarnings = response.summary?.totalWarnings || 0;

    console.log(`${isValid ? '‚úÖ' : '‚ùå'} CBAM XML –≤–∞–ª–∏–¥–∞—Ü–∏—è: ${totalErrors} –æ—à–∏–±–æ–∫, ${totalWarnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –ë–î (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω reportId)
    if (reportId) {
      try {
        await saveValidationResult(reportId, response);
      } catch (dbError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –ë–î:', dbError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const statusCode = isValid ? 200 : 422;
    return NextResponse.json(response, { status: statusCode });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API –≤–∞–ª–∏–¥–∞—Ü–∏–∏ CBAM XML:', error);
    
    return NextResponse.json(
      {
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        metadata: {
          apiVersion: '1.0.0',
          requestTime: new Date().toISOString(),
          processingTime: Date.now() - startTime
        }
      },
      { status: 500 }
    );
  }
}

/**
 * GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–µ
 */
export async function GET(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const healthResponse = await fetch(`${VALIDATOR_SERVICE_URL}/health`);
    
    if (!healthResponse.ok) {
      return NextResponse.json(
        { 
          error: '–°–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
          serviceUrl: VALIDATOR_SERVICE_URL,
          status: 'offline'
        },
        { status: 503 }
      );
    }

    const healthData = await healthResponse.json();
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ö–µ–º
    const schemasResponse = await fetch(`${VALIDATOR_SERVICE_URL}/schemas`);
    const schemasData = schemasResponse.ok ? await schemasResponse.json() : null;

    const info = {
      service: 'CBAM XML Validator API',
      version: '1.0.0',
      status: 'online',
      validator: healthData,
      schemas: schemasData,
      endpoints: {
        validate: 'POST /api/cbam/validate-xml',
        info: 'GET /api/cbam/validate-xml'
      },
      usage: {
        example: {
          method: 'POST',
          url: '/api/cbam/validate-xml',
          body: {
            xmlContent: '<CBAMQuarterlyReport>...</CBAMQuarterlyReport>',
            schemaType: 'cbam-quarterly',
            includeStructureCheck: true,
            reportId: 'optional-report-id'
          }
        }
      }
    };

    return NextResponse.json(info);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–µ:', error);
    
    return NextResponse.json(
      {
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        serviceUrl: VALIDATOR_SERVICE_URL
      },
      { status: 500 }
    );
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function saveValidationResult(reportId: string, validationResult: any) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
    const report = await prisma.report.findUnique({
      where: { id: reportId }
    });

    if (!report) {
      console.warn(`‚ö†Ô∏è –û—Ç—á—ë—Ç —Å ID ${reportId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    await prisma.reportValidation.create({
      data: {
        reportId: reportId,
        validationType: 'CBAM_XML',
        isValid: validationResult.summary?.isValid || false,
        errors: validationResult.validation?.errors || [],
        warnings: validationResult.validation?.warnings || [],
        schemaType: validationResult.summary?.schemaUsed || 'cbam-quarterly',
        validationData: validationResult,
        createdAt: new Date()
      }
    });

    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –æ—Ç—á—ë—Ç–∞ ${reportId}`);

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –æ—Ç—á—ë—Ç–∞ ${reportId}:`, error);
    throw error;
  }
}
